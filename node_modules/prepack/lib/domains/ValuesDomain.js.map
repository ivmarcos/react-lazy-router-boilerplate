{"version":3,"sources":["../../src/domains/ValuesDomain.js"],"names":["ValuesDomain","values","_elements","undefined","type","isTop","getElements","cval","y","union","Set","forEach","v","add","intersection","elements","has","newSet","$Realm","intrinsics","realm","v1","v2","joinWith","meetWith","topVal"],"mappings":"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","file":"ValuesDomain.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport invariant from \"../invariant.js\";\nimport type { Realm } from \"../realm.js\";\nimport { AbstractValue, ConcreteValue, EmptyValue, Value } from \"../values/index.js\";\n\n/* An abstract domain that collects together a set of concrete values\n   that might be the value of a variable at runtime.\n   Initially, every variable has the value undefined.\n   A property that has been weakly deleted will have more than\n   one value, one of which will by the EmptyValue.  */\n\nexport default class ValuesDomain {\n  constructor(values: void | Set<ConcreteValue>) {\n    this._elements = values;\n  }\n\n  static topVal = new ValuesDomain(undefined);\n\n  _elements: void | Set<ConcreteValue>;\n\n  isTop() {\n    return this._elements === undefined;\n  }\n\n  getElements() {\n    invariant(this._elements !== undefined);\n    return this._elements;\n  }\n\n  includesValueNotOfType(type: typeof Value): boolean {\n    invariant(!this.isTop());\n    for (let cval of this.getElements()) {\n      if (!(cval instanceof type)) return true;\n    }\n    return false;\n  }\n\n  includesValueOfType(type: typeof Value): boolean {\n    invariant(!this.isTop());\n    for (let cval of this.getElements()) {\n      if (cval instanceof type) return true;\n    }\n    return false;\n  }\n\n  static joinValues(realm: Realm, v1: void | Value, v2: void | Value): ValuesDomain {\n    if (v1 === undefined) v1 = realm.intrinsics.undefined;\n    if (v2 === undefined) v2 = realm.intrinsics.undefined;\n    if (v1 instanceof AbstractValue) return v1.values.joinWith(v2);\n    if (v2 instanceof AbstractValue) return v2.values.joinWith(v1);\n    let union = new Set();\n    invariant(v1 instanceof ConcreteValue); union.add(v1);\n    invariant(v2 instanceof ConcreteValue); union.add(v2);\n    return new ValuesDomain(union);\n  }\n\n  joinWith(y: Value): ValuesDomain {\n    if (this.isTop()) return this;\n    let union = new Set(this.getElements());\n    if (y instanceof AbstractValue) {\n      if (y.values.isTop()) return y.values;\n      y.values.getElements().forEach((v) => union.add(v));\n    } else {\n      invariant(y instanceof ConcreteValue);\n      union.add(y);\n    }\n    return new ValuesDomain(union);\n  }\n\n  static meetValues(realm: Realm, v1: void | Value, v2: void | Value): ValuesDomain {\n    if (v1 === undefined) v1 = realm.intrinsics.undefined;\n    if (v2 === undefined) v2 = realm.intrinsics.undefined;\n    if (v1 instanceof AbstractValue) return v1.values.meetWith(v2);\n    if (v2 instanceof AbstractValue) return v2.values.meetWith(v1);\n    let intersection = new Set();\n    invariant(v1 instanceof ConcreteValue);\n    invariant(v2 instanceof ConcreteValue);\n    if (v1 === v2) intersection.add(v1);\n    return new ValuesDomain(intersection);\n  }\n\n  meetWith(y: Value): ValuesDomain {\n    let intersection = new Set();\n    let elements = this._elements;\n    if (y instanceof AbstractValue) {\n      if (y.values.isTop()) return this;\n      y.values.getElements().forEach((v) => {\n        if (elements === undefined || elements.has(v)) intersection.add(v);\n      });\n    } else {\n      invariant(y instanceof ConcreteValue);\n      if (elements === undefined || elements.has(y)) intersection.add(y);\n    }\n    return new ValuesDomain(intersection);\n  }\n\n  promoteEmptyToUndefined(): ValuesDomain {\n    if (this.isTop()) return this;\n    let newSet = new Set();\n    for (let cval of this.getElements()) {\n      if (cval instanceof EmptyValue)\n        newSet.add(cval.$Realm.intrinsics.undefined);\n      else\n        newSet.add(cval);\n    }\n    return new ValuesDomain(newSet);\n  }\n}\n"]}