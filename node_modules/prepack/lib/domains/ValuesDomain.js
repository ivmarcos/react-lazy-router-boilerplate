"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright (c) 2017-present, Facebook, Inc.
ll rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
his source code is licensed under the BSD-style license found in the
file in the root directory of this source tree. An additional grant
of patent rights can be found in the PATENTS file in the same directory.


var _invariant = require("../invariant.js");

var _invariant2 = _interopRequireDefault(_invariant);

var _index = require("../values/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* An abstract domain that collects together a set of concrete values
   that might be the value of a variable at runtime.
   Initially, every variable has the value undefined.
   A property that has been weakly deleted will have more than
   one value, one of which will by the EmptyValue.  */

var ValuesDomain = function () {
  function ValuesDomain(values) {
    _classCallCheck(this, ValuesDomain);

    this._elements = values;
  }

  _createClass(ValuesDomain, [{
    key: "isTop",
    value: function isTop() {
      return this._elements === undefined;
    }
  }, {
    key: "getElements",
    value: function getElements() {
      (0, _invariant2.default)(this._elements !== undefined);
      return this._elements;
    }
  }, {
    key: "includesValueNotOfType",
    value: function includesValueNotOfType(type) {
      (0, _invariant2.default)(!this.isTop());
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.getElements()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var cval = _step.value;

          if (!(cval instanceof type)) return true;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return false;
    }
  }, {
    key: "includesValueOfType",
    value: function includesValueOfType(type) {
      (0, _invariant2.default)(!this.isTop());
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.getElements()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var cval = _step2.value;

          if (cval instanceof type) return true;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return false;
    }
  }, {
    key: "joinWith",
    value: function joinWith(y) {
      if (this.isTop()) return this;
      var union = new Set(this.getElements());
      if (y instanceof _index.AbstractValue) {
        if (y.values.isTop()) return y.values;
        y.values.getElements().forEach(function (v) {
          return union.add(v);
        });
      } else {
        (0, _invariant2.default)(y instanceof _index.ConcreteValue);
        union.add(y);
      }
      return new ValuesDomain(union);
    }
  }, {
    key: "meetWith",
    value: function meetWith(y) {
      var intersection = new Set();
      var elements = this._elements;
      if (y instanceof _index.AbstractValue) {
        if (y.values.isTop()) return this;
        y.values.getElements().forEach(function (v) {
          if (elements === undefined || elements.has(v)) intersection.add(v);
        });
      } else {
        (0, _invariant2.default)(y instanceof _index.ConcreteValue);
        if (elements === undefined || elements.has(y)) intersection.add(y);
      }
      return new ValuesDomain(intersection);
    }
  }, {
    key: "promoteEmptyToUndefined",
    value: function promoteEmptyToUndefined() {
      if (this.isTop()) return this;
      var newSet = new Set();
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this.getElements()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var cval = _step3.value;

          if (cval instanceof _index.EmptyValue) newSet.add(cval.$Realm.intrinsics.undefined);else newSet.add(cval);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return new ValuesDomain(newSet);
    }
  }], [{
    key: "joinValues",
    value: function joinValues(realm, v1, v2) {
      if (v1 === undefined) v1 = realm.intrinsics.undefined;
      if (v2 === undefined) v2 = realm.intrinsics.undefined;
      if (v1 instanceof _index.AbstractValue) return v1.values.joinWith(v2);
      if (v2 instanceof _index.AbstractValue) return v2.values.joinWith(v1);
      var union = new Set();
      (0, _invariant2.default)(v1 instanceof _index.ConcreteValue);union.add(v1);
      (0, _invariant2.default)(v2 instanceof _index.ConcreteValue);union.add(v2);
      return new ValuesDomain(union);
    }
  }, {
    key: "meetValues",
    value: function meetValues(realm, v1, v2) {
      if (v1 === undefined) v1 = realm.intrinsics.undefined;
      if (v2 === undefined) v2 = realm.intrinsics.undefined;
      if (v1 instanceof _index.AbstractValue) return v1.values.meetWith(v2);
      if (v2 instanceof _index.AbstractValue) return v2.values.meetWith(v1);
      var intersection = new Set();
      (0, _invariant2.default)(v1 instanceof _index.ConcreteValue);
      (0, _invariant2.default)(v2 instanceof _index.ConcreteValue);
      if (v1 === v2) intersection.add(v1);
      return new ValuesDomain(intersection);
    }
  }]);

  return ValuesDomain;
}();

ValuesDomain.topVal = new ValuesDomain(undefined);
exports.default = ValuesDomain;
//# sourceMappingURL=ValuesDomain.js.map