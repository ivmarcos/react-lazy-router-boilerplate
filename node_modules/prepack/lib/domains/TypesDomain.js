"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright (c) 2017-present, Facebook, Inc.
ll rights reserved.

his source code is licensed under the BSD-style license found in the
file in the root directory of this source tree. An additional grant
of patent rights can be found in the PATENTS file in the same directory.


var _index = require("../values/index.js");

var _invariant = require("../invariant.js");

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* An abstract domain for the type of value a variable might have.  */

var TypesDomain = function () {
  function TypesDomain(type) {
    _classCallCheck(this, TypesDomain);

    (0, _invariant2.default)(type !== _index.ConcreteValue, "Concrete values must be specific");
    this._type = type === _index.Value ? undefined : type;
  }

  _createClass(TypesDomain, [{
    key: "getType",
    value: function getType() {
      return this._type || _index.Value;
    }
  }, {
    key: "joinWith",
    value: function joinWith(t) {
      var type = this.getType();
      if (type === t) return this;
      if (_index.Value.isTypeCompatibleWith(type, _index.FunctionValue) && _index.Value.isTypeCompatibleWith(t, _index.FunctionValue)) {
        return new TypesDomain(_index.FunctionValue);
      }
      if (_index.Value.isTypeCompatibleWith(type, _index.ObjectValue) && _index.Value.isTypeCompatibleWith(t, _index.ObjectValue)) {
        return new TypesDomain(_index.ObjectValue);
      }
      if (_index.Value.isTypeCompatibleWith(type, _index.PrimitiveValue) && _index.Value.isTypeCompatibleWith(t, _index.PrimitiveValue)) {
        return new TypesDomain(_index.PrimitiveValue);
      }
      return TypesDomain.topVal;
    }
  }], [{
    key: "joinValues",
    value: function joinValues(v1, v2) {
      if (v1 === undefined && v2 === undefined) return new TypesDomain(_index.UndefinedValue);
      if (v1 === undefined || v2 === undefined) return TypesDomain.topVal;
      if (v1 instanceof _index.AbstractValue) return v1.types.joinWith(v2.getType());
      if (v2 instanceof _index.AbstractValue) return v2.types.joinWith(v1.getType());
      return new TypesDomain(v1.getType()).joinWith(v2.getType());
    }
  }]);

  return TypesDomain;
}();

TypesDomain.topVal = new TypesDomain(undefined);
exports.default = TypesDomain;
//# sourceMappingURL=TypesDomain.js.map