"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Reference = exports.LexicalEnvironment = exports.ModuleEnvironmentRecord = exports.GlobalEnvironmentRecord = exports.FunctionEnvironmentRecord = exports.ObjectEnvironmentRecord = exports.DeclarativeEnvironmentRecord = exports.EnvironmentRecord = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _completions = require("./completions.js");

var _realm = require("./realm.js");

var _index = require("./values/index.js");

var _parse = require("./utils/parse.js");

var _parse2 = _interopRequireDefault(_parse);

var _invariant = require("./invariant.js");

var _invariant2 = _interopRequireDefault(_invariant);

var _traverse = require("./traverse.js");

var _traverse2 = _interopRequireDefault(_traverse);

var _index2 = require("./methods/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * Copyright (c) 2017-present, Facebook, Inc.
                                                                                                                                                           * All rights reserved.
                                                                                                                                                           *
                                                                                                                                                           * This source code is licensed under the BSD-style license found in the
                                                                                                                                                           * LICENSE file in the root directory of this source tree. An additional grant
                                                                                                                                                           * of patent rights can be found in the PATENTS file in the same directory.
                                                                                                                                                           */

var sourceMap = require('source-map');

// ECMA262 8.1.1

var EnvironmentRecord = exports.EnvironmentRecord = function EnvironmentRecord(realm) {
  _classCallCheck(this, EnvironmentRecord);

  (0, _invariant2.default)(realm, "expected realm");
  this.realm = realm;
  this.isReadOnly = false;
};

// ECMA262 8.1.1.1
var DeclarativeEnvironmentRecord = exports.DeclarativeEnvironmentRecord = function (_EnvironmentRecord) {
  _inherits(DeclarativeEnvironmentRecord, _EnvironmentRecord);

  function DeclarativeEnvironmentRecord(realm) {
    _classCallCheck(this, DeclarativeEnvironmentRecord);

    var _this = _possibleConstructorReturn(this, (DeclarativeEnvironmentRecord.__proto__ || Object.getPrototypeOf(DeclarativeEnvironmentRecord)).call(this, realm));

    _this.bindings = Object.create(null);
    return _this;
  }

  _createClass(DeclarativeEnvironmentRecord, [{
    key: "HasBinding",


    // ECMA262 8.1.1.1.1
    value: function HasBinding(N) {
      // 1. Let envRec be the declarative Environment Record for which the method was invoked.
      var envRec = this;

      // 2. If envRec has a binding for the name that is the value of N, return true.
      if (envRec.bindings[N]) return true;

      // 3. Return false.
      return false;
    }

    // ECMA262 8.1.1.1.2

  }, {
    key: "CreateMutableBinding",
    value: function CreateMutableBinding(N, D) {
      var realm = this.realm;

      // 1. Let envRec be the declarative Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Assert: envRec does not already have a binding for N.
      (0, _invariant2.default)(!envRec.bindings[N], "shouldn't have the binding " + N);

      // 3. Create a mutable binding in envRec for N and record that it is uninitialized. If D is true, record that the newly created binding may be deleted by a subsequent DeleteBinding call.
      this.bindings[N] = realm.recordModifiedBinding({
        initialized: false,
        mutable: true,
        deletable: D
      }, envRec);

      // 4. Return NormalCompletion(empty).
      return realm.intrinsics.undefined;
    }

    // ECMA262 8.1.1.1.3

  }, {
    key: "CreateImmutableBinding",
    value: function CreateImmutableBinding(N, S) {
      var realm = this.realm;

      // 1. Let envRec be the declarative Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Assert: envRec does not already have a binding for N.
      (0, _invariant2.default)(!envRec.bindings[N], "shouldn't have the binding " + N);

      // 3. Create an immutable binding in envRec for N and record that it is uninitialized. If S is true, record that the newly created binding is a strict binding.
      this.bindings[N] = realm.recordModifiedBinding({
        initialized: false,
        strict: S,
        deletable: false
      }, envRec);

      // 4. Return NormalCompletion(empty).
      return realm.intrinsics.undefined;
    }

    // ECMA262 8.1.1.1.4

  }, {
    key: "InitializeBinding",
    value: function InitializeBinding(N, V) {
      // 1. Let envRec be the declarative Environment Record for which the method was invoked.
      var envRec = this;

      var binding = envRec.bindings[N];

      // 2. Assert: envRec must have an uninitialized binding for N.
      (0, _invariant2.default)(binding && !binding.initialized, "shouldn't have the binding " + N);

      // 3. Set the bound value for N in envRec to V.
      this.realm.recordModifiedBinding(binding, envRec).value = V;

      // 4. Record that the binding for N in envRec has been initialized.
      binding.initialized = true;

      // 5. Return NormalCompletion(empty).
      return this.realm.intrinsics.empty;
    }

    // ECMA262 8.1.1.1.5

  }, {
    key: "SetMutableBinding",
    value: function SetMutableBinding(N, V, S) {
      var realm = this.realm;

      // 1. Let envRec be the declarative Environment Record for which the method was invoked.
      var envRec = this;

      var binding = envRec.bindings[N];

      // 2. If envRec does not have a binding for N, then
      if (!binding) {
        // a. If S is true, throw a ReferenceError exception.
        if (S) {
          throw realm.createErrorThrowCompletion(realm.intrinsics.ReferenceError, N + " not found");
        }

        // b. Perform envRec.CreateMutableBinding(N, true).
        envRec.CreateMutableBinding(N, true);

        // c. Perform envRec.InitializeBinding(N, V).
        envRec.InitializeBinding(N, V);

        // d. Return NormalCompletion(empty).
        return this.realm.intrinsics.empty;
      }

      // 3. If the binding for N in envRec is a strict binding, let S be true.
      if (binding.strict) S = true;

      // 4. If the binding for N in envRec has not yet been initialized, throw a ReferenceError exception.
      if (!binding.initialized) {
        throw realm.createErrorThrowCompletion(realm.intrinsics.ReferenceError, N + " has not yet been initialized");
      } else if (binding.mutable) {
        // 5. Else if the binding for N in envRec is a mutable binding, change its bound value to V.
        realm.recordModifiedBinding(binding, envRec).value = V;
      } else {
        // 6. Else,
        // a. Assert: This is an attempt to change the value of an immutable binding.

        // b. If S is true, throw a TypeError exception.
        if (S) {
          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, "attempt to change immutable binding");
        }
      }

      // 7. Return NormalCompletion(empty).
      return this.realm.intrinsics.empty;
    }

    // ECMA262 8.1.1.1.6

  }, {
    key: "GetBindingValue",
    value: function GetBindingValue(N, S) {
      var realm = this.realm;

      // 1. Let envRec be the declarative Environment Record for which the method was invoked.
      var envRec = this;

      var binding = envRec.bindings[N];

      // 2. Assert: envRec has a binding for N.
      (0, _invariant2.default)(binding, "expected binding");

      // 3. If the binding for N in envRec is an uninitialized binding, throw a ReferenceError exception.
      if (!binding.initialized) {
        throw realm.createErrorThrowCompletion(realm.intrinsics.ReferenceError);
      }

      // 4. Return the value currently bound to N in envRec.
      (0, _invariant2.default)(binding.value);
      return binding.value;
    }

    // ECMA262 8.1.1.1.7

  }, {
    key: "DeleteBinding",
    value: function DeleteBinding(N) {
      // 1. Let envRec be the declarative Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Assert: envRec has a binding for the name that is the value of N.
      (0, _invariant2.default)(envRec.bindings[N], "expected binding to exist");

      // 3. If the binding for N in envRec cannot be deleted, return false.
      if (!envRec.bindings[N].deletable) return false;

      // 4. Remove the binding for N from envRec.
      this.realm.recordModifiedBinding(envRec.bindings[N], envRec).value = undefined;
      delete envRec.bindings[N];

      // 5. Return true.
      return true;
    }

    // ECMA262 8.1.1.1.8

  }, {
    key: "HasThisBinding",
    value: function HasThisBinding() {
      // 1. Return false.
      return false;
    }

    // ECMA262 8.1.1.1.9

  }, {
    key: "HasSuperBinding",
    value: function HasSuperBinding() {
      // 1. Return false.
      return false;
    }

    // ECMA262 8.1.1.1.10

  }, {
    key: "WithBaseObject",
    value: function WithBaseObject() {
      // 1. Return undefined.
      return this.realm.intrinsics.undefined;
    }
  }]);

  return DeclarativeEnvironmentRecord;
}(EnvironmentRecord);

// ECMA262 8.1.1.2


var ObjectEnvironmentRecord = exports.ObjectEnvironmentRecord = function (_EnvironmentRecord2) {
  _inherits(ObjectEnvironmentRecord, _EnvironmentRecord2);

  function ObjectEnvironmentRecord(realm, obj) {
    _classCallCheck(this, ObjectEnvironmentRecord);

    var _this2 = _possibleConstructorReturn(this, (ObjectEnvironmentRecord.__proto__ || Object.getPrototypeOf(ObjectEnvironmentRecord)).call(this, realm));

    _this2.object = obj;
    return _this2;
  }

  // ECMA262 8.1.1.2.1


  _createClass(ObjectEnvironmentRecord, [{
    key: "HasBinding",
    value: function HasBinding(N) {
      var realm = this.realm;

      // 1. Let envRec be the object Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let bindings be the binding object for envRec.
      var bindings = this.object;

      // 3. Let foundBinding be ? HasProperty(bindings, N).
      var foundBinding = (0, _index2.HasProperty)(realm, bindings, N);

      // 4. If foundBinding is false, return false.
      if (!foundBinding) return false;

      // 5. If the withEnvironment flag of envRec is false, return true.
      if (!envRec.withEnvironment) return true;

      // 6. Let unscopables be ? Get(bindings, @@unscopables).
      var unscopables = (0, _index2.Get)(realm, bindings, realm.intrinsics.SymbolUnscopables);

      // 7. If Type(unscopables) is Object, then
      if (unscopables instanceof _index.ObjectValue || unscopables instanceof _index.AbstractObjectValue) {
        // a. Let blocked be ToBoolean(? Get(unscopables, N)).
        var blocked = (0, _index2.ToBooleanPartial)(realm, (0, _index2.Get)(realm, unscopables, N));

        // b. If blocked is true, return false.
        if (blocked) return false;
      }

      // 8. Return true.
      return true;
    }

    // ECMA262 8.1.1.2.2

  }, {
    key: "CreateMutableBinding",
    value: function CreateMutableBinding(N, D) {
      var realm = this.realm;

      // 1. Let envRec be the object Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let bindings be the binding object for envRec.
      var bindings = envRec.object;

      // 3. If D is true, let configValue be true; otherwise let configValue be false.
      var configValue = D ? true : false;

      // 4. Return ? DefinePropertyOrThrow(bindings, N, PropertyDescriptor{[[Value]]: undefined, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: configValue}).
      return new _index.BooleanValue(realm, (0, _index2.DefinePropertyOrThrow)(realm, bindings, N, {
        value: realm.intrinsics.undefined,
        writable: true,
        enumerable: true,
        configurable: configValue
      }));
    }

    // ECMA262 8.1.1.2.3

  }, {
    key: "CreateImmutableBinding",
    value: function CreateImmutableBinding(N, S) {
      // The concrete Environment Record method CreateImmutableBinding is never used within this specification in association with object Environment Records.
      throw new Error("unreachable");
    }

    // ECMA262 8.1.1.2.4

  }, {
    key: "InitializeBinding",
    value: function InitializeBinding(N, V) {
      // 1. Let envRec be the object Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Assert: envRec must have an uninitialized binding for N.
      // 3. Record that the binding for N in envRec has been initialized.

      // 4. Return ? envRec.SetMutableBinding(N, V, false).
      return envRec.SetMutableBinding(N, V, false);
    }

    // ECMA262 8.1.1.2.5

  }, {
    key: "SetMutableBinding",
    value: function SetMutableBinding(N, V, S) {
      var realm = this.realm;

      // 1. Let envRec be the object Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let bindings be the binding object for envRec.
      var bindings = envRec.object;

      // 3. Return ? Set(bindings, N, V, S).
      return new _index.BooleanValue(realm, (0, _index2.Set)(realm, bindings, N, V, S));
    }

    // ECMA262 8.1.1.2.6

  }, {
    key: "GetBindingValue",
    value: function GetBindingValue(N, S) {
      var realm = this.realm;

      // 1. Let envRec be the object Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let bindings be the binding object for envRec.
      var bindings = envRec.object;

      // 3. Let value be ? HasProperty(bindings, N).
      var value = (0, _index2.HasProperty)(realm, bindings, N);

      // 4. If value is false, then
      if (!value) {
        // a. If S is false, return the value undefined; otherwise throw a ReferenceError exception.
        if (!S) {
          return realm.intrinsics.undefined;
        } else {
          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);
        }
      }

      // 5. Return ? Get(bindings, N).
      return (0, _index2.Get)(realm, bindings, N);
    }

    // ECMA262 8.1.1.2.7

  }, {
    key: "DeleteBinding",
    value: function DeleteBinding(N) {
      // 1. Let envRec be the object Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let bindings be the binding object for envRec.
      var bindings = envRec.object;

      // 3. Return ? bindings.[[Delete]](N).
      return bindings.$Delete(N);
    }

    // ECMA262 8.1.1.2.8

  }, {
    key: "HasThisBinding",
    value: function HasThisBinding() {
      // 1. Return false.
      return false;
    }

    // ECMA262 8.1.1.2.9

  }, {
    key: "HasSuperBinding",
    value: function HasSuperBinding() {
      // 1. Return false.
      return false;
    }

    // ECMA262 8.1.1.2.10

  }, {
    key: "WithBaseObject",
    value: function WithBaseObject() {
      // 1. Let envRec be the object Environment Record for which the method was invoked.
      var envRec = this;

      // 2. If the withEnvironment flag of envRec is true, return the binding object for envRec.
      if (envRec.withEnvironment) return envRec.object;

      // 3. Otherwise, return undefined.
      return this.realm.intrinsics.undefined;
    }
  }]);

  return ObjectEnvironmentRecord;
}(EnvironmentRecord);

// ECMA262 8.1.1.3


var FunctionEnvironmentRecord = exports.FunctionEnvironmentRecord = function (_DeclarativeEnvironme) {
  _inherits(FunctionEnvironmentRecord, _DeclarativeEnvironme);

  function FunctionEnvironmentRecord() {
    _classCallCheck(this, FunctionEnvironmentRecord);

    return _possibleConstructorReturn(this, (FunctionEnvironmentRecord.__proto__ || Object.getPrototypeOf(FunctionEnvironmentRecord)).apply(this, arguments));
  }

  _createClass(FunctionEnvironmentRecord, [{
    key: "BindThisValue",


    // ECMA262 8.1.1.3.1
    value: function BindThisValue(V) {
      var realm = this.realm;

      // 1. Let envRec be the function Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Assert: envRec.[[ThisBindingStatus]] is not "lexical".
      (0, _invariant2.default)(envRec.$ThisBindingStatus !== "lexical", "this binding status shouldn't be lexical");

      // 3. If envRec.[[ThisBindingStatus]] is "initialized", throw a ReferenceError exception.
      if (envRec.$ThisBindingStatus === "initialized") {
        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);
      }

      // 4. Set envRec.[[ThisValue]] to V.
      envRec.$ThisValue = V;

      // 5. Set envRec.[[ThisBindingStatus]] to "initialized".
      envRec.$ThisBindingStatus = "initialized";

      // 6. Return V.
      return V;
    }

    // ECMA262 8.1.1.3.2

  }, {
    key: "HasThisBinding",
    value: function HasThisBinding() {
      // 1. Let envRec be the function Environment Record for which the method was invoked.
      var envRec = this;

      // 2. If envRec.[[ThisBindingStatus]] is "lexical", return false; otherwise, return true.
      return envRec.$ThisBindingStatus === "lexical" ? false : true;
    }

    // ECMA262 8.1.1.3.3

  }, {
    key: "HasSuperBinding",
    value: function HasSuperBinding() {
      // 1. Let envRec be the function Environment Record for which the method was invoked.
      var envRec = this;

      // 2. If envRec.[[ThisBindingStatus]] is "lexical", return false.
      if (envRec.$ThisBindingStatus === "lexical") return false;

      // 3. If envRec.[[HomeObject]] has the value undefined, return false; otherwise, return true.
      if (envRec.$HomeObject === undefined) {
        return false;
      } else {
        return true;
      }
    }

    // ECMA262 8.1.1.3.4

  }, {
    key: "GetThisBinding",
    value: function GetThisBinding() {
      var realm = this.realm;

      // 1. Let envRec be the function Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Assert: envRec.[[ThisBindingStatus]] is not "lexical".
      (0, _invariant2.default)(envRec.$ThisBindingStatus !== "lexical", "this binding status shouldn't be lexical");

      // 3. If envRec.[[ThisBindingStatus]] is "uninitialized", throw a ReferenceError exception.
      if (envRec.$ThisBindingStatus === "uninitialized") {
        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);
      }

      // 4. Return envRec.[[ThisValue]].
      return envRec.$ThisValue;
    }

    // ECMA262 8.1.1.3.5

  }, {
    key: "GetSuperBase",
    value: function GetSuperBase() {
      // 1. Let envRec be the function Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let home be the value of envRec.[[HomeObject]].
      var home = envRec.$HomeObject;

      // 3. If home has the value undefined, return undefined.
      if (home === undefined) return this.realm.intrinsics.undefined;

      // 4. Assert: Type(home) is Object.
      (0, _invariant2.default)(home instanceof _index.ObjectValue, "expected object value");

      // 5. Return ? home.[[GetPrototypeOf]]().
      return home.$GetPrototypeOf();
    }
  }]);

  return FunctionEnvironmentRecord;
}(DeclarativeEnvironmentRecord);

// ECMA262 8.1.1.4


var GlobalEnvironmentRecord = exports.GlobalEnvironmentRecord = function (_EnvironmentRecord3) {
  _inherits(GlobalEnvironmentRecord, _EnvironmentRecord3);

  function GlobalEnvironmentRecord() {
    _classCallCheck(this, GlobalEnvironmentRecord);

    return _possibleConstructorReturn(this, (GlobalEnvironmentRecord.__proto__ || Object.getPrototypeOf(GlobalEnvironmentRecord)).apply(this, arguments));
  }

  _createClass(GlobalEnvironmentRecord, [{
    key: "HasBinding",


    // ECMA262 8.1.1.4.1
    value: function HasBinding(N) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let DclRec be envRec.[[DeclarativeRecord]].
      var DclRec = envRec.$DeclarativeRecord;

      // 3. If DclRec.HasBinding(N) is true, return true.
      if (DclRec.HasBinding(N)) return true;

      // 4. Let ObjRec be envRec.[[ObjectRecord]].
      var ObjRec = envRec.$ObjectRecord;

      // 5. Return ? ObjRec.HasBinding(N).
      return ObjRec.HasBinding(N);
    }

    // ECMA262 8.1.1.4.2

  }, {
    key: "CreateMutableBinding",
    value: function CreateMutableBinding(N, D) {
      var realm = this.realm;

      // 1. Let envRec be the global Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let DclRec be envRec.[[DeclarativeRecord]].
      var DclRec = envRec.$DeclarativeRecord;

      // 3. If DclRec.HasBinding(N) is true, throw a TypeError exception.
      if (DclRec.HasBinding(N)) {
        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);
      }

      // 4. Return DclRec.CreateMutableBinding(N, D).
      return DclRec.CreateMutableBinding(N, D);
    }

    // ECMA262 8.1.1.4.3

  }, {
    key: "CreateImmutableBinding",
    value: function CreateImmutableBinding(N, S) {
      var realm = this.realm;

      // 1. Let envRec be the global Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let DclRec be envRec.[[DeclarativeRecord]].
      var DclRec = envRec.$DeclarativeRecord;

      // 3. If DclRec.HasBinding(N) is true, throw a TypeError exception.
      if (DclRec.HasBinding(N)) {
        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);
      }

      // 4. Return DclRec.CreateImmutableBinding(N, S).
      return DclRec.CreateImmutableBinding(N, S);
    }

    // ECMA262 8.1.1.4.4

  }, {
    key: "InitializeBinding",
    value: function InitializeBinding(N, V) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let DclRec be envRec.[[DeclarativeRecord]].
      var DclRec = envRec.$DeclarativeRecord;

      // 3. If DclRec.HasBinding(N) is true, then
      if (DclRec.HasBinding(N)) {
        // a. Return DclRec.InitializeBinding(N, V).
        return DclRec.InitializeBinding(N, V);
      }

      // 4. Assert: If the binding exists, it must be in the object Environment Record.

      // 5. Let ObjRec be envRec.[[ObjectRecord]].
      var ObjRec = envRec.$ObjectRecord;

      // 6. Return ? ObjRec.InitializeBinding(N, V).
      return ObjRec.InitializeBinding(N, V);
    }

    // ECMA262 8.1.1.4.5

  }, {
    key: "SetMutableBinding",
    value: function SetMutableBinding(N, V, S) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let DclRec be envRec.[[DeclarativeRecord]].
      var DclRec = envRec.$DeclarativeRecord;

      // 3. If DclRec.HasBinding(N) is true, then
      if (DclRec.HasBinding(N)) {
        // a. Return DclRec.SetMutableBinding(N, V, S).
        return DclRec.SetMutableBinding(N, V, S);
      }

      // 4. Let ObjRec be envRec.[[ObjectRecord]].
      var ObjRec = envRec.$ObjectRecord;

      // 5. Return ? ObjRec.SetMutableBinding(N, V, S).
      return ObjRec.SetMutableBinding(N, V, S);
    }

    // ECMA262 8.1.1.4.6

  }, {
    key: "GetBindingValue",
    value: function GetBindingValue(N, S) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let DclRec be envRec.[[DeclarativeRecord]].
      var DclRec = envRec.$DeclarativeRecord;

      // 3. If DclRec.HasBinding(N) is true, then
      if (DclRec.HasBinding(N)) {
        // a. Return DclRec.GetBindingValue(N, S).
        return DclRec.GetBindingValue(N, S);
      }

      // 4. Let ObjRec be envRec.[[ObjectRecord]].
      var ObjRec = envRec.$ObjectRecord;

      // 5. Return ? ObjRec.GetBindingValue(N, S).
      return ObjRec.GetBindingValue(N, S);
    }

    // ECMA262 8.1.1.4.7

  }, {
    key: "DeleteBinding",
    value: function DeleteBinding(N) {
      var realm = this.realm;

      // 1. Let envRec be the global Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let DclRec be envRec.[[DeclarativeRecord]].
      var DclRec = envRec.$DeclarativeRecord;

      // 3. If DclRec.HasBinding(N) is true, then
      if (DclRec.HasBinding(N)) {
        // a. Return DclRec.DeleteBinding(N).
        return DclRec.DeleteBinding(N);
      }

      // 4. Let ObjRec be envRec.[[ObjectRecord]].
      var ObjRec = envRec.$ObjectRecord;

      // 5. Let globalObject be the binding object for ObjRec.
      var globalObject = ObjRec.object;

      // 6. Let existingProp be ? HasOwnProperty(globalObject, N).
      var existingProp = (0, _index2.HasOwnProperty)(realm, globalObject, N);

      // 7. If existingProp is true, then
      if (existingProp) {
        // a. Let status be ? ObjRec.DeleteBinding(N).
        var status = ObjRec.DeleteBinding(N);

        // b. If status is true, then
        if (status) {
          // i. Let varNames be envRec.[[VarNames]].
          var varNames = envRec.$VarNames;

          // ii. If N is an element of varNames, remove that element from the varNames.
          if (varNames.indexOf(N) >= 0) {
            varNames.splice(varNames.indexOf(N), 1);
          }
        }

        // c. Return status.
        return status;
      }

      // 8. Return true.
      return true;
    }

    // ECMA262 8.1.1.4.8

  }, {
    key: "HasThisBinding",
    value: function HasThisBinding() {
      // 1. Return true.
      return true;
    }

    // ECMA262 8.1.1.4.9

  }, {
    key: "HasSuperBinding",
    value: function HasSuperBinding() {
      // 1. Return true.
      return true;
    }

    // ECMA262 8.1.1.4.10

  }, {
    key: "WithBaseObject",
    value: function WithBaseObject() {
      // 1. Return undefined.
      return this.realm.intrinsics.undefined;
    }

    // ECMA262 8.1.1.4.11

  }, {
    key: "GetThisBinding",
    value: function GetThisBinding() {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      var envRec = this;

      (0, _invariant2.default)(envRec.$GlobalThisValue);
      // 2. Return envRec.[[GlobalThisValue]].
      return envRec.$GlobalThisValue;
    }

    // ECMA262 8.1.1.4.12

  }, {
    key: "HasVarDeclaration",
    value: function HasVarDeclaration(N) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let varDeclaredNames be envRec.[[VarNames]].
      var varDeclaredNames = envRec.$VarNames;

      // 3. If varDeclaredNames contains the value of N, return true.
      if (varDeclaredNames.indexOf(N) >= 0) return true;

      // 4. Return false.
      return false;
    }

    // ECMA262 8.1.1.4.13

  }, {
    key: "HasLexicalDeclaration",
    value: function HasLexicalDeclaration(N) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let DclRec be envRec.[[DeclarativeRecord]].
      var DclRec = envRec.$DeclarativeRecord;

      // 3. Return DclRec.HasBinding(N).
      return DclRec.HasBinding(N);
    }

    // ECMA262 8.1.1.4.14

  }, {
    key: "HasRestrictedGlobalProperty",
    value: function HasRestrictedGlobalProperty(N) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let ObjRec be envRec.[[ObjectRecord]].
      var ObjRec = envRec.$ObjectRecord;

      // 3. Let globalObject be the binding object for ObjRec.
      var globalObject = ObjRec.object;

      // 4. Let existingProp be ? globalObject.[[GetOwnProperty]](N).
      var existingProp = globalObject.$GetOwnProperty(N);

      // 5. If existingProp is undefined, return false.
      if (!existingProp) return false;
      (0, _index2.ThrowIfMightHaveBeenDeleted)(existingProp.value);

      // 6. If existingProp.[[Configurable]] is true, return false.
      if (existingProp.configurable) return false;

      // 7. Return true.
      return true;
    }

    // ECMA262 8.1.1.4.15

  }, {
    key: "CanDeclareGlobalVar",
    value: function CanDeclareGlobalVar(N) {
      var realm = this.realm;

      // 1. Let envRec be the global Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let ObjRec be envRec.[[ObjectRecord]].
      var ObjRec = envRec.$ObjectRecord;

      // 3. Let globalObject be the binding object for ObjRec.
      var globalObject = ObjRec.object;

      // 4. Let hasProperty be ? HasOwnProperty(globalObject, N).
      var hasProperty = (0, _index2.HasOwnProperty)(realm, globalObject, N);

      // 5. If hasProperty is true, return true.
      if (hasProperty) return true;

      // 6. Return ? IsExtensible(globalObject).
      return (0, _index2.IsExtensible)(realm, globalObject);
    }

    // ECMA262 8.1.1.4.16

  }, {
    key: "CanDeclareGlobalFunction",
    value: function CanDeclareGlobalFunction(N) {
      var realm = this.realm;

      // 1. Let envRec be the global Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let ObjRec be envRec.[[ObjectRecord]].
      var ObjRec = envRec.$ObjectRecord;

      // 3. Let globalObject be the binding object for ObjRec.
      var globalObject = ObjRec.object;

      // 4. Let existingProp be ? globalObject.[[GetOwnProperty]](N).
      var existingProp = globalObject.$GetOwnProperty(N);

      // 5. If existingProp is undefined, return ? IsExtensible(globalObject).
      if (!existingProp) return (0, _index2.IsExtensible)(realm, globalObject);
      (0, _index2.ThrowIfMightHaveBeenDeleted)(existingProp.value);

      // 6. If existingProp.[[Configurable]] is true, return true.
      if (existingProp.configurable) return true;

      // 7. If IsDataDescriptor(existingProp) is true and existingProp has attribute values {[[Writable]]: true, [[Enumerable]]: true}, return true.
      if ((0, _index2.IsDataDescriptor)(realm, existingProp) && existingProp.writable && existingProp.enumerable) {
        return true;
      }

      // 8. Return false.
      return false;
    }

    // ECMA262 8.1.1.4.17

  }, {
    key: "CreateGlobalVarBinding",
    value: function CreateGlobalVarBinding(N, D) {
      var realm = this.realm;

      // 1. Let envRec be the global Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let ObjRec be envRec.[[ObjectRecord]].
      var ObjRec = envRec.$ObjectRecord;

      // 3. Let globalObject be the binding object for ObjRec.
      var globalObject = ObjRec.object;

      // 4. Let hasProperty be ? HasOwnProperty(globalObject, N).
      var hasProperty = (0, _index2.HasOwnProperty)(realm, globalObject, N);

      // 5. Let extensible be ? IsExtensible(globalObject).
      var extensible = (0, _index2.IsExtensible)(realm, globalObject);

      // 6. If hasProperty is false and extensible is true, then
      if (!hasProperty && extensible) {
        // a. Perform ? ObjRec.CreateMutableBinding(N, D).
        ObjRec.CreateMutableBinding(N, D);

        // b. Perform ? ObjRec.InitializeBinding(N, undefined).
        ObjRec.InitializeBinding(N, this.realm.intrinsics.undefined);
      }

      // 7. Let varDeclaredNames be envRec.[[VarNames]].
      var varDeclaredNames = envRec.$VarNames;

      // 8. If varDeclaredNames does not contain the value of N, then
      if (varDeclaredNames.indexOf(N) < 0) {
        // a. Append N to varDeclaredNames.
        varDeclaredNames.push(N);
      }

      // 9. Return NormalCompletion(empty).
    }

    // ECMA262 8.1.1.4.18

  }, {
    key: "CreateGlobalFunctionBinding",
    value: function CreateGlobalFunctionBinding(N, V, D) {
      // 1. Let envRec be the global Environment Record for which the method was invoked.
      var envRec = this;

      // 2. Let ObjRec be envRec.[[ObjectRecord]].
      var ObjRec = envRec.$ObjectRecord;

      // 3. Let globalObject be the binding object for ObjRec.
      var globalObject = ObjRec.object;

      // 4. Let existingProp be ? globalObject.[[GetOwnProperty]](N).
      var existingProp = globalObject.$GetOwnProperty(N);

      // 5. If existingProp is undefined or existingProp.[[Configurable]] is true, then
      var desc = void 0;
      if (!existingProp || existingProp.configurable) {
        // a. Let desc be the PropertyDescriptor{[[Value]]: V, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: D}.
        desc = { value: V, writable: true, enumerable: true, configurable: D };
      } else {
        // 6. Else,
        (0, _index2.ThrowIfMightHaveBeenDeleted)(existingProp.value);
        // a. Let desc be the PropertyDescriptor{[[Value]]: V }.
        desc = { value: V };
      }

      // 7. Perform ? DefinePropertyOrThrow(globalObject, N, desc).
      (0, _index2.DefinePropertyOrThrow)(this.realm, globalObject, N, desc);

      // TODO? 8. Record that the binding for N in ObjRec has been initialized.

      // 9. Perform ? Set(globalObject, N, V, false).
      (0, _index2.Set)(this.realm, globalObject, N, V, false);

      // 10. Let varDeclaredNames be envRec.[[VarNames]].
      var varDeclaredNames = envRec.$VarNames;

      // 11. If varDeclaredNames does not contain the value of N, then
      if (varDeclaredNames.indexOf(N) < 0) {
        // a. Append N to varDeclaredNames.
        varDeclaredNames.push(N);
      }

      // 12. Return NormalCompletion(empty).
    }
  }]);

  return GlobalEnvironmentRecord;
}(EnvironmentRecord);

// ECMA262 8.1.1.5


var ModuleEnvironmentRecord = exports.ModuleEnvironmentRecord = function (_DeclarativeEnvironme2) {
  _inherits(ModuleEnvironmentRecord, _DeclarativeEnvironme2);

  function ModuleEnvironmentRecord() {
    _classCallCheck(this, ModuleEnvironmentRecord);

    return _possibleConstructorReturn(this, (ModuleEnvironmentRecord.__proto__ || Object.getPrototypeOf(ModuleEnvironmentRecord)).apply(this, arguments));
  }

  _createClass(ModuleEnvironmentRecord, [{
    key: "BindThisValue",

    // ECMA262 8.1.1.3.1
    value: function BindThisValue(V) {
      throw new Error("TODO: implement modules");
    }

    // ECMA262 8.1.1.3.2

  }, {
    key: "HasThisBinding",
    value: function HasThisBinding() {
      throw new Error("TODO: implement modules");
    }

    // ECMA262 8.1.1.3.3

  }, {
    key: "HasSuperBinding",
    value: function HasSuperBinding() {
      throw new Error("TODO: implement modules");
    }

    // ECMA262 8.1.1.3.4

  }, {
    key: "GetThisBinding",
    value: function GetThisBinding() {
      throw new Error("TODO: implement modules");
    }

    // ECMA262 8.1.1.3.5

  }, {
    key: "GetSuperBase",
    value: function GetSuperBase() {
      throw new Error("TODO: implement modules");
    }
  }]);

  return ModuleEnvironmentRecord;
}(DeclarativeEnvironmentRecord);

// ECMA262 8.1


var LexicalEnvironment = exports.LexicalEnvironment = function () {
  function LexicalEnvironment(realm) {
    _classCallCheck(this, LexicalEnvironment);

    (0, _invariant2.default)(realm, "expected realm");
    this.realm = realm;
  }

  _createClass(LexicalEnvironment, [{
    key: "evaluateCompletion",
    value: function evaluateCompletion(ast, strictCode, metadata) {
      try {
        return this.evaluate(ast, strictCode, metadata);
      } catch (err) {
        if (err instanceof _completions.ComposedAbruptCompletion) return err.createIntrospectionErrorThrowCompletion();
        if (err instanceof _completions.JoinedAbruptCompletions || err instanceof _completions.PossiblyNormalCompletion) return _index.AbstractValue.createIntrospectionErrorThrowCompletion(err.joinCondition);
        if (err instanceof _completions.AbruptCompletion) return err;
        if (err instanceof Error)
          // rethrowing Error should preserve stack trace
          throw err;
        // let's wrap into a proper Error to create stack trace
        throw new Error(err);
      }
    }
  }, {
    key: "evaluateAbstractCompletion",
    value: function evaluateAbstractCompletion(ast, strictCode, metadata) {
      try {
        return this.evaluateAbstract(ast, strictCode, metadata);
      } catch (err) {
        if (err instanceof _completions.AbruptCompletion) return err;
        if (err instanceof Error)
          // rethrowing Error should preserve stack trace
          throw err;
        // let's wrap into a proper Error to create stack trace
        throw new Error(err);
      }
    }
  }, {
    key: "execute",
    value: function execute(code, filename) {
      var map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
      var sourceType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "script";
      var onParse = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

      var context = new _realm.ExecutionContext();
      context.lexicalEnvironment = this;
      context.variableEnvironment = this;
      context.realm = this.realm;

      this.realm.pushContext(context);

      var ast = void 0,
          res = void 0;
      try {
        try {
          ast = (0, _parse2.default)(this.realm, code, filename, sourceType);
        } catch (e) {
          if (e instanceof _completions.ThrowCompletion) return e;
          throw e;
        }
        if (onParse) onParse(ast);
        res = this.evaluateCompletion(ast, false);
        if (map.length > 0) this.fixup_source_locations(ast, map);
      } finally {
        this.realm.popContext(context);
      }
      if (res instanceof _completions.AbruptCompletion) return res;

      return (0, _index2.GetValue)(this.realm, res);
    }
  }, {
    key: "fixup_source_locations",
    value: function fixup_source_locations(ast, map) {
      var smc = new sourceMap.SourceMapConsumer(map);
      (0, _traverse2.default)(ast, function (node) {
        var loc = node.loc;
        if (loc == null || loc.start == null) return false;
        var new_pos = loc.start;
        var old_pos = smc.originalPositionFor({ line: new_pos.line, column: new_pos.column });
        if (old_pos.source == null) return false;
        new_pos.line = old_pos.line;
        new_pos.column = old_pos.column;
        loc.source = old_pos.source;
        return false;
      });
    }
  }, {
    key: "evaluate",
    value: function evaluate(ast, strictCode, metadata) {
      var res = this.evaluateAbstract(ast, strictCode, metadata);
      if (res instanceof _completions.PossiblyNormalCompletion) throw _index.AbstractValue.createIntrospectionErrorThrowCompletion(res.joinCondition);
      (0, _invariant2.default)(res instanceof _index.Value || res instanceof Reference, ast.type);
      return res;
    }
  }, {
    key: "evaluateAbstract",
    value: function evaluateAbstract(ast, strictCode, metadata) {
      this.realm.currentLocation = ast.loc;
      if (this.realm.timeout) this.realm.testTimeout();

      var evaluator = this.realm.evaluators[ast.type];
      if (evaluator) {
        return evaluator(ast, strictCode, this, this.realm, metadata);
      }

      var err = new TypeError("Unsupported node type " + ast.type);
      throw err;
    }
  }]);

  return LexicalEnvironment;
}();

//


var Reference = exports.Reference = function Reference(base, refName, strict, thisValue) {
  _classCallCheck(this, Reference);

  this.base = base;
  this.referencedName = refName;
  (0, _invariant2.default)(!(refName instanceof _index.AbstractValue) || !refName.mightNotBeString());
  this.strict = strict;
  this.thisValue = thisValue;
  (0, _invariant2.default)(thisValue === undefined || !(base instanceof EnvironmentRecord));
};
//# sourceMappingURL=environment.js.map