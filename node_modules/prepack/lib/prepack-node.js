"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _prepackStandalone = require("./prepack-standalone");

Object.keys(_prepackStandalone).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _prepackStandalone[key];
    }
  });
});
exports.prepackFile = prepackFile;
exports.prepackFileSync = prepackFileSync;

var _index = require("./serializer/index.js");

var _index2 = _interopRequireDefault(_index);

var _construct_realm = require("./construct_realm.js");

var _construct_realm2 = _interopRequireDefault(_construct_realm);

var _globals = require("./globals.js");

var _globals2 = _interopRequireDefault(_globals);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _options = require("./options");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

function prepackFile(filename) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _options.defaultOptions;
  var callback = arguments[2];

  var sourceMapFilename = options.inputSourceMapFilename || filename + ".map";
  _fs2.default.readFile(filename, "utf8", function (fileErr, code) {
    if (fileErr) {
      callback(fileErr);
      return;
    }
    _fs2.default.readFile(sourceMapFilename, "utf8", function (mapErr, sourceMap) {
      if (mapErr) {
        console.warn("No sourcemap found at " + sourceMapFilename + ".");
        sourceMap = "";
      }
      var serialized = void 0;
      try {
        var realm = (0, _construct_realm2.default)((0, _options.getRealmOptions)(options));
        (0, _globals2.default)(realm);
        var serializer = new _index2.default(realm, (0, _options.getSerializerOptions)(options));
        serialized = serializer.init(options.filename || filename, code, sourceMap, options.sourceMaps);
        if (!serialized) {
          throw new _prepackStandalone.InitializationError();
        }
      } catch (err) {
        callback(err);
        return;
      }
      callback(null, serialized);
    });
  });
}

function prepackFileSync(filename) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _options.defaultOptions;

  var code = _fs2.default.readFileSync(filename, "utf8");
  var sourceMap = "";
  var sourceMapFilename = options.inputSourceMapFilename || filename + ".map";
  try {
    sourceMap = _fs2.default.readFileSync(sourceMapFilename, "utf8");
  } catch (_e) {
    console.warn("No sourcemap found at " + sourceMapFilename + ".");
  }
  var realm = (0, _construct_realm2.default)((0, _options.getRealmOptions)(options));
  (0, _globals2.default)(realm);
  var serializer = new _index2.default(realm, (0, _options.getSerializerOptions)(options));
  var serialized = serializer.init(options.filename || filename, code, sourceMap, options.sourceMaps);
  if (!serialized) {
    throw new _prepackStandalone.InitializationError();
  }
  return serialized;
}
//# sourceMappingURL=prepack-node.js.map