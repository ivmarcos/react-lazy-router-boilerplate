{"version":3,"sources":["../../src/methods/properties.js"],"names":["OrdinarySet","FromPropertyDescriptor","OrdinaryDelete","DeletePropertyOrThrow","CompletePropertyDescriptor","IsCompatiblePropertyDescriptor","ValidateAndApplyPropertyDescriptor","OrdinaryDefineOwnProperty","ObjectDefineProperties","Set","DefinePropertyOrThrow","PutValue","ArraySetLength","OrdinaryGetOwnProperty","OrdinarySetPrototypeOf","EnumerateObjectProperties","ThrowIfMightHaveBeenDeleted","ThrowIfInternalSlotNotWritable","InternalDescriptorPropertyToValue","realm","value","undefined","intrinsics","InternalGetPropertiesKey","P","InternalGetPropertiesMap","O","properties","symbols","InternalSetProperty","desc","map","key","propertyBinding","get","descriptor","object","set","recordModifiedProperty","InternalUpdatedProperty","isIntrinsic","generator","$GlobalObject","emitGlobalDelete","emitPropertyDelete","configurable","enumerable","emitGlobalDeclaration","emitGlobalAssignment","emitPropertyAssignment","emitDefineProperty","parentPermitsChildPropertyCreation","ownDesc","$GetOwnProperty","ownDescValue","mightHaveBeenDeleted","parent","$GetPrototypeOf","throwIfNotConcrete","writable","V","Receiver","weakDeletion","$Set","createIntrospectionErrorThrowCompletion","existingDescriptor","existingDescValue","valueDesc","$Delete","$DefineOwnProperty","setter","Desc","obj","ObjectPrototype","getExtensible","size","success","createErrorThrowCompletion","TypeError","like","extensible","current","Object","keys","length","identical","field","dval","cval","property","Properties","props","$OwnPropertyKeys","descriptors","nextKey","propDesc","descObj","push","pair","Throw","W","promoteEmptyToUndefined","ReferenceError","base","globalObj","succeeded","$SetPartial","referencedName","SetMutableBinding","Error","A","DescValue","newLenDesc","assign","newLen","numberLen","RangeError","oldLenDesc","oldLen","newWritable","oldLenCopy","Array","from","x","parseInt","filter","sort","reverse","deleteSucceeded","existingBinding","isPartial","isSimple","D","X","kind","realmGenerator","derive","types","values","args","_buildNode","$Prototype","p","done","visited","global","index","iterator","defineNativeMethod","proto","add","has","isNewObject"],"mappings":"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","file":"properties.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { Descriptor, PropertyBinding, PropertyKeyValue } from \"../types.js\";\nimport { ArrayValue, UndefinedValue, NumberValue, SymbolValue, NullValue, BooleanValue, ObjectValue, StringValue, Value, ConcreteValue, AbstractValue, AbstractObjectValue } from \"../values/index.js\";\nimport { EnvironmentRecord, Reference } from \"../environment.js\";\nimport { CreateIterResultObject } from \"../methods/create.js\";\nimport invariant from \"../invariant.js\";\nimport {\n  ObjectCreate,\n  CreateDataProperty,\n  IsAccessorDescriptor,\n  IsPropertyKey,\n  IsUnresolvableReference,\n  IsStrictReference,\n  IsDataDescriptor,\n  IsGenericDescriptor,\n  GetGlobalObject,\n  GetBase,\n  GetReferencedName,\n  GetReferencedNamePartial,\n  GetThisValue,\n  HasPrimitiveBase,\n  Call,\n  ToObject,\n  ToObjectPartial,\n  ToPropertyDescriptor,\n  ToUint32,\n  ToNumber,\n  Get,\n  SameValue,\n  SameValuePartial,\n  IsPropertyReference,\n  HasSomeCompatibleType,\n} from \"../methods/index.js\";\n\nfunction InternalDescriptorPropertyToValue(realm: Realm, value: void | boolean | Value) {\n  if (value === undefined) return realm.intrinsics.undefined;\n  if (typeof value === \"boolean\") return new BooleanValue(realm, value);\n  invariant(value instanceof Value);\n  return value;\n}\n\nfunction InternalGetPropertiesKey(P: PropertyKeyValue): string | SymbolValue | void {\n  if (typeof P === \"string\") {\n    return P;\n  } else if (P instanceof StringValue) {\n    return P.value;\n  } else if (P instanceof SymbolValue) {\n    return P;\n  }\n  // otherwise, undefined\n}\n\nfunction InternalGetPropertiesMap(O: ObjectValue, P: PropertyKeyValue): Map<any, PropertyBinding> {\n  if (typeof P === \"string\" || P instanceof StringValue) {\n    return O.properties;\n  } else if (P instanceof SymbolValue) {\n    return O.symbols;\n  } else {\n    invariant(false);\n  }\n}\n\nfunction InternalSetProperty(realm: Realm, O: ObjectValue, P: PropertyKeyValue, desc: Descriptor) {\n  let map = InternalGetPropertiesMap(O, P);\n  let key = InternalGetPropertiesKey(P);\n  let propertyBinding = map.get(key);\n  if (propertyBinding === undefined) {\n    propertyBinding = { descriptor: undefined, object: O, key: key };\n    map.set(key, propertyBinding);\n  }\n  realm.recordModifiedProperty(propertyBinding);\n  propertyBinding.descriptor = desc;\n}\n\nfunction InternalUpdatedProperty(realm: Realm, O: ObjectValue, P: PropertyKeyValue) {\n  if (!O.isIntrinsic()) return;\n  let generator = realm.generator;\n  if (!generator) return;\n  if (P instanceof SymbolValue) return;\n  if (P instanceof StringValue) P = P.value;\n  let propertyBinding = InternalGetPropertiesMap(O, P).get(P);\n  let desc = propertyBinding === undefined ? undefined : propertyBinding.descriptor;\n  if (desc === undefined) {\n    if (O === realm.$GlobalObject) {\n      generator.emitGlobalDelete(P);\n    } else {\n      generator.emitPropertyDelete(O, P);\n    }\n  } else if (!desc.configurable && desc.enumerable && O === realm.$GlobalObject && desc.value !== undefined) {\n    generator.emitGlobalDeclaration(P, desc.value);\n  } else if (desc.configurable && desc.enumerable && desc.value !== undefined) {\n    if (O === realm.$GlobalObject) {\n      generator.emitGlobalAssignment(P, desc.value);\n    } else {\n      generator.emitPropertyAssignment(O, P, desc.value);\n    }\n  } else {\n    generator.emitDefineProperty(O, P, desc);\n  }\n}\n\n// Determines if an object with parent O may create its own property P.\nfunction parentPermitsChildPropertyCreation(realm: Realm, O: ObjectValue, P: PropertyKeyValue): boolean {\n  let ownDesc = O.$GetOwnProperty(P);\n  let ownDescValue = !ownDesc ? realm.intrinsics.undefined :\n    (ownDesc.value === undefined ? realm.intrinsics.undefined : ownDesc.value);\n\n  if (!ownDesc || ownDescValue.mightHaveBeenDeleted()) {\n    // O might not object, so first ask its parent\n    let parent = O.$GetPrototypeOf();\n    parent.throwIfNotConcrete(); //TODO: deal with abstract parents\n    if (!(parent instanceof NullValue)) {\n      if (!parentPermitsChildPropertyCreation(realm, parent, P)) return false;\n    }\n\n    // Parent is OK, so if O does not object return true\n    if (!ownDesc) return true; // O has no opinion of its ownDesc\n  }\n  invariant(ownDesc !== undefined);\n\n  // O might have a property P and so might object\n  if (IsDataDescriptor(realm, ownDesc)) {\n    if (ownDesc.writable) {\n      // The grand parent does not object so it is OK parent does not have P\n      // If parent does have P, it is also OK because it is a writable data property\n      return true;\n    }\n  }\n  // If parent does not have property P, this is too pessimistic, but that is\n  // the caller's problem.\n  return false;\n}\n\n// ECMA262 9.1.9.1\nexport function OrdinarySet(realm: Realm, O: ObjectValue, P: PropertyKeyValue, V: Value, Receiver: Value): boolean {\n  let weakDeletion = V.mightHaveBeenDeleted();\n\n  // 1. Assert: IsPropertyKey(P) is true.\n  invariant(IsPropertyKey(realm, P), \"expected property key\");\n\n  // 2. Let ownDesc be ? O.[[GetOwnProperty]](P).\n  let ownDesc = O.$GetOwnProperty(P);\n  let ownDescValue = !ownDesc ? realm.intrinsics.undefined :\n    (ownDesc.value === undefined ? realm.intrinsics.undefined : ownDesc.value);\n\n  // 3. If ownDesc is undefined (or might be), then\n  if (!ownDesc || ownDescValue.mightHaveBeenDeleted()) {\n    // a. Let parent be ? O.[[GetPrototypeOf]]().\n    let parent = O.$GetPrototypeOf();\n    parent.throwIfNotConcrete(); //TODO: deal with abstract parents\n\n    // b. If parent is not null, then\n    if (!(parent instanceof NullValue)) {\n      if (!ownDesc) {\n        // i. Return ? parent.[[Set]](P, V, Receiver).\n        return parent.$Set(P, V, Receiver);\n      }\n      // But since we don't know if O has its own property P, the parent might\n      // actually have a say. Give up, unless the parent would be OK with it.\n      if (!parentPermitsChildPropertyCreation(realm, parent, P)) {\n        invariant(ownDescValue instanceof AbstractValue);\n        throw AbstractValue.createIntrospectionErrorThrowCompletion(ownDescValue);\n      }\n      // Since the parent is OK with us creating a local property for O\n      // we can carry on as if there were no parent.\n    }\n\n    // i. Let ownDesc be the PropertyDescriptor{[[Value]]: undefined, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}.\n    if (!ownDesc)\n      ownDesc = {\n        value: realm.intrinsics.undefined,\n        writable: true,\n        enumerable: true,\n        configurable: true\n      };\n  }\n\n  // 4. If IsDataDescriptor(ownDesc) is true, then\n  if (IsDataDescriptor(realm, ownDesc)) {\n    // a. If ownDesc.[[Writable]] is false, return false.\n    if (!ownDesc.writable && !weakDeletion) {\n      // The write will fail if the property actually exists\n      if (ownDescValue.mightHaveBeenDeleted()) {\n        // But maybe it does not and thus would succeed.\n        // Since we don't know what will happen, give up for now.\n        invariant(ownDescValue instanceof AbstractValue);\n        throw AbstractValue.createIntrospectionErrorThrowCompletion(ownDescValue);\n      }\n      return false;\n    }\n\n    // b. If Type(Receiver) is not Object, return false.\n    Receiver = Receiver.throwIfNotConcrete();\n    if (!(Receiver instanceof ObjectValue))\n      return false;\n\n    // c. Let existingDescriptor be ? Receiver.[[GetOwnProperty]](P).\n    let existingDescriptor = Receiver.$GetOwnProperty(P);\n    let existingDescValue = !existingDescriptor ? realm.intrinsics.undefined :\n      (existingDescriptor.value === undefined ? realm.intrinsics.undefined : existingDescriptor.value);\n\n    // d. If existingDescriptor is not undefined, then\n    if (existingDescriptor !== undefined) {\n      // i. If IsAccessorDescriptor(existingDescriptor) is true, return false.\n      if (IsAccessorDescriptor(realm, existingDescriptor)) {\n        invariant(!existingDescValue.mightHaveBeenDeleted(), \"should not fail until weak deletes of accessors are suppported\");\n        return false;\n      }\n\n      // ii. If existingDescriptor.[[Writable]] is false, return false.\n      if (!existingDescriptor.writable && !(weakDeletion && existingDescriptor.configurable)) {\n        // If we are not sure the receiver actually has a property P we can't just return false here.\n        if (existingDescValue.mightHaveBeenDeleted()) {\n          invariant(existingDescValue instanceof AbstractValue);\n          throw AbstractValue.createIntrospectionErrorThrowCompletion(existingDescValue);\n        }\n        return false;\n      }\n\n      // iii. Let valueDesc be the PropertyDescriptor{[[Value]]: V}.\n      let valueDesc = { value: V };\n      if (weakDeletion) {\n        valueDesc = existingDescriptor;\n        valueDesc.value = V;\n      }\n\n      // iv. Return ? Receiver.[[DefineOwnProperty]](P, valueDesc).\n      if (weakDeletion || existingDescValue.mightHaveBeenDeleted()) {\n        // At this point we are not actually sure that Receiver actually has\n        // a property P, however, if it has, we are sure that its a data property,\n        // and that redefining the property with valueDesc will not change the\n        // attributes of the property, so we delete it to make things nice for $DefineOwnProperty.\n        Receiver.$Delete(P);\n      }\n      return Receiver.$DefineOwnProperty(P, valueDesc);\n    } else { // e. Else Receiver does not currently have a property P,\n\n      // i. Return ? CreateDataProperty(Receiver, P, V).\n      return CreateDataProperty(realm, Receiver, P, V);\n    }\n  }\n\n  // 5. Assert: IsAccessorDescriptor(ownDesc) is true.\n  invariant(IsAccessorDescriptor(realm, ownDesc), \"expected accessor\");\n\n  // 6. Let setter be ownDesc.[[Set]].\n  let setter = \"set\" in ownDesc ? ownDesc.set : undefined;\n\n  // 7. If setter is undefined, return false.\n  if (!setter || setter instanceof UndefinedValue)\n    return false;\n\n  // 8. Perform ? Call(setter, Receiver, « V »).\n  Call(realm, setter.throwIfNotConcrete(), Receiver, [V]);\n\n  // 9. Return true.\n  return true;\n}\n\n// ECMA262 6.2.4.4\nexport function FromPropertyDescriptor(realm: Realm, Desc: ?Descriptor): Value {\n  // 1. If Desc is undefined, return undefined.\n  if (!Desc) return realm.intrinsics.undefined;\n\n  // 2. Let obj be ObjectCreate(%ObjectPrototype%).\n  let obj = ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n\n  // 3. Assert: obj is an extensible ordinary object with no own properties.\n  invariant(obj.getExtensible(), \"expected an extensible object\");\n  invariant(!obj.properties.size, \"expected an object with no own properties\");\n\n  // 4. If Desc has a [[Value]] field, then\n  let success = true;\n  if (\"value\" in Desc) {\n    invariant(Desc.value !== undefined);\n    // a. Perform CreateDataProperty(obj, \"value\", Desc.[[Value]]).\n    success = CreateDataProperty(realm, obj, \"value\", Desc.value) && success;\n  }\n\n  // 5. If Desc has a [[Writable]] field, then\n  if (\"writable\" in Desc) {\n    invariant(Desc.writable !== undefined);\n    // a. Perform CreateDataProperty(obj, \"writable\", Desc.[[Writable]]).\n    success = CreateDataProperty(realm, obj, \"writable\", new BooleanValue(realm, Desc.writable)) && success;\n  }\n\n  // 6. If Desc has a [[Get]] field, then\n  if (\"get\" in Desc) {\n    invariant(Desc.get !== undefined);\n    // a. Perform CreateDataProperty(obj, \"get\", Desc.[[Get]]).\n    success = CreateDataProperty(realm, obj, \"get\", Desc.get) && success;\n  }\n\n  // 7. If Desc has a [[Set]] field, then\n  if (\"set\" in Desc) {\n    invariant(Desc.set !== undefined);\n    // a. Perform CreateDataProperty(obj, \"set\", Desc.[[Set]]).\n    success = CreateDataProperty(realm, obj, \"set\", Desc.set) && success;\n  }\n\n  // 8. If Desc has an [[Enumerable]] field, then\n  if (\"enumerable\" in Desc) {\n    invariant(Desc.enumerable !== undefined);\n    // a. Perform CreateDataProperty(obj, \"enumerable\", Desc.[[Enumerable]]).\n    success = CreateDataProperty(realm, obj, \"enumerable\", new BooleanValue(realm, Desc.enumerable)) && success;\n  }\n\n  // 9. If Desc has a [[Configurable]] field, then\n  if (\"configurable\" in Desc) {\n    invariant(Desc.configurable !== undefined);\n    // a. Perform CreateDataProperty(obj, \"configurable\", Desc.[[Configurable]]).\n    success = CreateDataProperty(realm, obj, \"configurable\", new BooleanValue(realm, Desc.configurable)) && success;\n  }\n\n  // 10. Assert: all of the above CreateDataProperty operations return true.\n  invariant(success, \"fails to create data property\");\n\n  // 11. Return obj.\n  return obj;\n}\n\n//\nexport function OrdinaryDelete(realm: Realm, O: ObjectValue, P: PropertyKeyValue): boolean {\n  // 1. Assert: IsPropertyKey(P) is true.\n  invariant(IsPropertyKey(realm, P), \"expected a property key\");\n\n  // 2. Let desc be ? O.[[GetOwnProperty]](P).\n  let desc = O.$GetOwnProperty(P);\n\n  // 3. If desc is undefined, return true.\n  if (!desc) return true;\n\n  // 4. If desc.[[Configurable]] is true, then\n  if (desc.configurable) {\n    // a. Remove the own property with name P from O.\n    let key = InternalGetPropertiesKey(P);\n    let map = InternalGetPropertiesMap(O, P);\n    let propertyBinding = map.get(key);\n    invariant(propertyBinding !== undefined);\n    realm.recordModifiedProperty(propertyBinding);\n    propertyBinding.descriptor = undefined;\n    InternalUpdatedProperty(realm, O, P);\n\n    // b. Return true.\n    return true;\n  }\n\n  // 5. Return false.\n  return false;\n}\n\n// ECMA262 7.3.8\nexport function DeletePropertyOrThrow(realm: Realm, O: ObjectValue, P: PropertyKeyValue): boolean {\n  // 1. Assert: Type(O) is Object.\n  invariant(O instanceof ObjectValue, \"expected an object\");\n\n  // 2. Assert: IsPropertyKey(P) is true.\n  invariant(IsPropertyKey(realm, P), \"expected a property key\");\n\n  // 3. Let success be ? O.[[Delete]](P).\n  let success = O.$Delete(P);\n\n  // 4. If success is false, throw a TypeError exception.\n  if (!success) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"couldn't delete property\");\n  }\n\n  // 5. Return success.\n  return success;\n}\n\n// ECMA262 6.2.4.6\nexport function CompletePropertyDescriptor(realm: Realm, Desc: Descriptor): Descriptor {\n  // 1. Assert: Desc is a Property Descriptor.\n\n  // 2. Let like be Record{[[Value]]: undefined, [[Writable]]: false, [[Get]]: undefined, [[Set]]: undefined, [[Enumerable]]: false, [[Configurable]]: false}.\n  let like = {\n    value: realm.intrinsics.undefined,\n    get: realm.intrinsics.undefined,\n    set: realm.intrinsics.undefined,\n    writable: false,\n    enumerable: false,\n    configurable: false,\n  };\n\n  // 3. If either IsGenericDescriptor(Desc) or IsDataDescriptor(Desc) is true, then\n  if (IsGenericDescriptor(realm, Desc) || IsDataDescriptor(realm, Desc)) {\n    // a. If Desc does not have a [[Value]] field, set Desc.[[Value]] to like.[[Value]].\n    if (!('value' in Desc)) Desc.value = like.value;\n    // b. If Desc does not have a [[Writable]] field, set Desc.[[Writable]] to like.[[Writable]].\n    if (!('writable' in Desc)) Desc.writable = like.writable;\n  } else { // 4. Else,\n    // a. If Desc does not have a [[Get]] field, set Desc.[[Get]] to like.[[Get]].\n    if (!('get' in Desc)) Desc.get = like.get;\n    // b. If Desc does not have a [[Set]] field, set Desc.[[Set]] to like.[[Set]].\n    if (!('set' in Desc)) Desc.set = like.set;\n  }\n\n  // 5. If Desc does not have an [[Enumerable]] field, set Desc.[[Enumerable]] to like.[[Enumerable]].\n  if (!('enumerable' in Desc)) Desc.enumerable = like.enumerable;\n\n  // 6. If Desc does not have a [[Configurable]] field, set Desc.[[Configurable]] to like.[[Configurable]].\n  if (!('configurable' in Desc)) Desc.configurable = like.configurable;\n\n  // 7. Return Desc.\n  return Desc;\n}\n\n// ECMA262 9.1.6.2\nexport function IsCompatiblePropertyDescriptor(realm: Realm, extensible: boolean, Desc: Descriptor, current: ?Descriptor): boolean {\n  // 1. Return ValidateAndApplyPropertyDescriptor(undefined, undefined, Extensible, Desc, Current).\n  return ValidateAndApplyPropertyDescriptor(realm, undefined, undefined, extensible, Desc, current);\n}\n\n// ECMA262 9.1.6.3\nexport function ValidateAndApplyPropertyDescriptor(realm: Realm, O: void | ObjectValue, P: void | PropertyKeyValue, extensible: boolean, Desc: Descriptor, current: ?Descriptor): boolean {\n  // 1. Assert: If O is not undefined, then IsPropertyKey(P) is true.\n  if (O !== undefined) {\n    invariant(P !== undefined);\n    invariant(IsPropertyKey(realm, P));\n  }\n\n  // 2. If current is undefined, then\n  if (!current) {\n    // a. If extensible is false, return false.\n    if (!extensible) return false;\n\n    // b. Assert: extensible is true.\n    invariant(extensible === true, \"expected extensible to be true\");\n\n    // c. If IsGenericDescriptor(Desc) is true or IsDataDescriptor(Desc) is true, then\n    if (IsGenericDescriptor(realm, Desc) || IsDataDescriptor(realm, Desc)) {\n      // i. If O is not undefined, create an own data property named P of object O whose [[Value]],\n      //    [[Writable]], [[Enumerable]] and [[Configurable]] attribute values are described by Desc. If the\n      //    value of an attribute field of Desc is absent, the attribute of the newly created property is set\n      //    to its default value.\n      if (O !== undefined) {\n        invariant(P !== undefined);\n        InternalSetProperty(realm, O, P, {\n          value: 'value' in Desc ? Desc.value : realm.intrinsics.undefined,\n          writable: 'writable' in Desc ? Desc.writable : false,\n          enumerable: 'enumerable' in Desc ? Desc.enumerable : false,\n          configurable: 'configurable' in Desc ? Desc.configurable : false\n        });\n        InternalUpdatedProperty(realm, O, P);\n      }\n    } else { // d. Else Desc must be an accessor Property Descriptor,\n      // i. If O is not undefined, create an own accessor property named P of object O whose [[Get]],\n      //    [[Set]], [[Enumerable]] and [[Configurable]] attribute values are described by Desc. If the value\n      //    of an attribute field of Desc is absent, the attribute of the newly created property is set to its\n      //    default value.\n      if (O !== undefined) {\n        invariant(P !== undefined);\n        InternalSetProperty(realm, O, P, {\n          get: 'get' in Desc ? Desc.get : realm.intrinsics.undefined,\n          set: 'set' in Desc ? Desc.set : realm.intrinsics.undefined,\n          enumerable: 'enumerable' in Desc ? Desc.enumerable : false,\n          configurable: 'configurable' in Desc ? Desc.configurable : false\n        });\n        InternalUpdatedProperty(realm, O, P);\n      }\n    }\n\n    // e. Return true.\n    return true;\n  }\n  ThrowIfMightHaveBeenDeleted(current.value);\n\n  // 3. Return true, if every field in Desc is absent.\n  if (!Object.keys(Desc).length) return true;\n\n  // 4. Return true, if every field in Desc also occurs in current and the value of every field in Desc is the\n  // same value as the corresponding field in current when compared using the SameValue algorithm.\n  let identical = true;\n  for (let field in Desc) {\n    if (!(field in current)) {\n      identical = false;\n    } else {\n      let dval = InternalDescriptorPropertyToValue(realm, Desc[field]);\n      let cval = InternalDescriptorPropertyToValue(realm, current[field]);\n      if (dval instanceof ConcreteValue && cval instanceof ConcreteValue)\n        identical = SameValue(realm, dval, cval);\n      else {\n        identical = dval === cval;\n        // This might be false now but true at runtime. This does not\n        // matter because the logic for non identical values will still\n        // do the right thing in the cases below that does not blow up\n        // when dealing with an abstract value.\n      }\n    }\n    if (!identical) break;\n  }\n  if (identical) {\n    return true;\n  }\n\n  // 5. If the [[Configurable]] field of current is false, then\n  if (!current.configurable) {\n    // a. Return false, if the [[Configurable]] field of Desc is true.\n    if (Desc.configurable) return false;\n\n    // b. Return false, if the [[Enumerable]] field of Desc is present and the [[Enumerable]] fields of current and Desc are the Boolean negation of each other.\n    if ('enumerable' in Desc && Desc.enumerable !== current.enumerable) {\n      return false;\n    }\n  }\n\n  // 6. If IsGenericDescriptor(Desc) is true, no further validation is required.\n  if (IsGenericDescriptor(realm, Desc)) {\n\n  } else if (IsDataDescriptor(realm, current) !== IsDataDescriptor(realm, Desc)) { // 7. Else if IsDataDescriptor(current) and IsDataDescriptor(Desc) have different results, then\n    // a. Return false, if the [[Configurable]] field of current is false.\n    if (!current.configurable) return false;\n\n    // b. If IsDataDescriptor(current) is true, then\n    if (IsDataDescriptor(realm, current)) {\n      // i. If O is not undefined, convert the property named P of object O from a data property to an accessor property. Preserve the existing values of the converted property's [[Configurable]] and [[Enumerable]] attributes and set the rest of the property's attributes to their default values.\n      if (O !== undefined) {\n        invariant(P !== undefined);\n        let key = InternalGetPropertiesKey(P);\n        let propertyBinding = InternalGetPropertiesMap(O, P).get(key);\n        invariant(propertyBinding !== undefined);\n        let desc = propertyBinding.descriptor;\n        if (desc !== undefined) {\n          delete desc.writable;\n          delete desc.value;\n          desc.get = realm.intrinsics.undefined;\n          desc.set = realm.intrinsics.undefined;\n        }\n      }\n    } else { // c. Else,\n      // i. If O is not undefined, convert the property named P of object O from an accessor property to a data property. Preserve the existing values of the converted property's [[Configurable]] and [[Enumerable]] attributes and set the rest of the property's attributes to their default values.\n      if (O !== undefined) {\n        invariant(P !== undefined);\n        let key = InternalGetPropertiesKey(P);\n        let propertyBinding = InternalGetPropertiesMap(O, P).get(key);\n        invariant(propertyBinding !== undefined);\n        let desc = propertyBinding.descriptor;\n        if (desc !== undefined) {\n          delete desc.get;\n          delete desc.set;\n          desc.writable = false;\n          desc.value = realm.intrinsics.undefined;\n        }\n      }\n    }\n  } else if (IsDataDescriptor(realm, current) && IsDataDescriptor(realm, Desc)) { // 8. Else if IsDataDescriptor(current) and IsDataDescriptor(Desc) are both true, then\n    // a. If the [[Configurable]] field of current is false, then\n    if (!current.configurable) {\n      // i. Return false, if the [[Writable]] field of current is false and the [[Writable]] field of Desc is true.\n      if (!current.writable && Desc.writable) return false;\n\n      // ii. If the [[Writable]] field of current is false, then\n      if (!current.writable) {\n        // 1. Return false, if the [[Value]] field of Desc is present and SameValue(Desc.[[Value]], current.[[Value]]) is false.\n        if (Desc.value && !SameValuePartial(realm, Desc.value, current.value || realm.intrinsics.undefined)) {\n          return false;\n        }\n      }\n    } else { // b. Else the [[Configurable]] field of current is true, so any change is acceptable.\n    }\n  } else { // 9. Else IsAccessorDescriptor(current) and IsAccessorDescriptor(Desc) are both true,\n    // a. If the [[Configurable]] field of current is false, then\n    if (!current.configurable) {\n      // i. Return false, if the [[Set]] field of Desc is present and SameValue(Desc.[[Set]], current.[[Set]]) is false.\n      if (Desc.set && !SameValuePartial(realm, Desc.set, current.set || realm.intrinsics.undefined)) return false;\n\n      // ii. Return false, if the [[Get]] field of Desc is present and SameValue(Desc.[[Get]], current.[[Get]]) is false.\n      if (Desc.get && !SameValuePartial(realm, Desc.get, current.get || realm.intrinsics.undefined)) return false;\n    }\n  }\n\n  // 10. If O is not undefined, then\n  if (O !== undefined) {\n    invariant(P !== undefined);\n    let key = InternalGetPropertiesKey(P);\n    let map = InternalGetPropertiesMap(O, P);\n    let propertyBinding = map.get(key);\n    let property;\n    if (propertyBinding === undefined) {\n      propertyBinding = { descriptor: undefined, object: O, key: key };\n      realm.recordModifiedProperty(propertyBinding);\n      propertyBinding.descriptor = property = current;\n      map.set(key, propertyBinding);\n    } else if (propertyBinding.descriptor === undefined) {\n      realm.recordModifiedProperty(propertyBinding);\n      property = propertyBinding.descriptor = current;\n    } else {\n      realm.recordModifiedProperty(propertyBinding);\n      property = propertyBinding.descriptor;\n      invariant(property !== undefined);\n    }\n\n    // a. For each field of Desc that is present, set the corresponding attribute of the property named P of\n    //    object O to the value of the field.\n    for (let field in Desc) property[field] = Desc[field];\n    InternalUpdatedProperty(realm, O, P);\n  }\n\n  // 11. Return true.\n  return true;\n}\n\n// ECMA262 9.1.6.1\nexport function OrdinaryDefineOwnProperty(realm: Realm, O: ObjectValue, P: PropertyKeyValue, Desc: Descriptor): boolean {\n  invariant(O instanceof ObjectValue);\n\n  // 1. Let current be ? O.[[GetOwnProperty]](P).\n  let current = O.$GetOwnProperty(P);\n\n  // 2. Let extensible be the value of the [[Extensible]] internal slot of O.\n  let extensible = O.getExtensible();\n\n  // 3. Return ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current).\n  return ValidateAndApplyPropertyDescriptor(realm, O, P, extensible, Desc, current);\n}\n\n// ECMA262 19.1.2.3.1\nexport function ObjectDefineProperties(realm: Realm, O: Value, Properties: Value): ObjectValue | AbstractObjectValue {\n  // 1. If Type(O) is not Object, throw a TypeError exception.\n  if (!(O instanceof ObjectValue || O instanceof AbstractObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 2. Let props be ? ToObject(Properties).\n  let props = ToObject(realm, Properties.throwIfNotConcrete());\n\n  // 3. Let keys be ? props.[[OwnPropertyKeys]]().\n  let keys = props.$OwnPropertyKeys();\n\n  // 4. Let descriptors be a new empty List.\n  let descriptors = [];\n\n  // 5. Repeat for each element nextKey of keys in List order,\n  for (let nextKey of keys) {\n    // a. Let propDesc be ? props.[[GetOwnProperty]](nextKey).\n    let propDesc = props.$GetOwnProperty(nextKey);\n\n    // b. If propDesc is not undefined and propDesc.[[Enumerable]] is true, then\n    if (propDesc && propDesc.enumerable) {\n      ThrowIfMightHaveBeenDeleted(propDesc.value);\n\n      // i. Let descObj be ? Get(props, nextKey).\n      let descObj = Get(realm, props, nextKey);\n\n      // ii. Let desc be ? ToPropertyDescriptor(descObj).\n      let desc = ToPropertyDescriptor(realm, descObj);\n\n      // iii. Append the pair (a two element List) consisting of nextKey and desc to the end of descriptors.\n      descriptors.push([nextKey, desc]);\n    }\n  }\n\n  // 6. For each pair from descriptors in list order,\n  for (let pair of descriptors) {\n    // a. Let P be the first element of pair.\n    let P = pair[0];\n\n    // b. Let desc be the second element of pair.\n    let desc = pair[1];\n\n    // c. Perform ? DefinePropertyOrThrow(O, P, desc).\n    DefinePropertyOrThrow(realm, O, P, desc);\n  }\n\n  // 7. Return O.\n  return O;\n}\n\n// ECMA262 7.3.3\nexport function Set(realm: Realm, O: ObjectValue | AbstractObjectValue, P: PropertyKeyValue, V: Value, Throw: boolean): boolean {\n  // 1. Assert: Type(O) is Object.\n  invariant(O instanceof ObjectValue || O instanceof AbstractObjectValue, \"expected object value\");\n\n  // 2. Assert: IsPropertyKey(P) is true.\n  invariant(IsPropertyKey(realm, P), \"expected property key\");\n\n  // 3. Assert: Type(Throw) is Boolean.\n  invariant(typeof Throw === \"boolean\", \"expected boolean\");\n\n  // 4. Let success be ? O.[[Set]](P, V, O).\n  let success = O.$Set(P, V, O);\n\n  // 5. If success is false and Throw is true, throw a TypeError exception.\n  if (success === false && Throw === true) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 6. Return success.\n  return success;\n}\n\n// ECMA262 7.3.7\nexport function DefinePropertyOrThrow(realm: Realm, O: ObjectValue | AbstractObjectValue, P: PropertyKeyValue, desc: Descriptor): boolean {\n  // 1. Assert: Type(O) is Object.\n  invariant(O instanceof ObjectValue || O instanceof AbstractObjectValue, \"expected object\");\n\n  // 2. Assert: IsPropertyKey(P) is true.\n  invariant(typeof P === \"string\" || IsPropertyKey(realm, P), \"expected property key\");\n\n  // 3. Let success be ? O.[[DefineOwnProperty]](P, desc).\n  let success = O.$DefineOwnProperty(P, desc);\n\n  // 4. If success is false, throw a TypeError exception.\n  if (success === false) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 5. Return success.\n  return success;\n}\n\n\n// ECMA262 6.2.3.2\nexport function PutValue(realm: Realm, V: Value | Reference, W: Value) {\n  W = W.promoteEmptyToUndefined();\n  // The following two steps are not necessary as we propagate completions with exceptions.\n  // 1. ReturnIfAbrupt(V).\n  // 2. ReturnIfAbrupt(W).\n\n  // 3. If Type(V) is not Reference, throw a ReferenceError exception.\n  if (!(V instanceof Reference)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.ReferenceError, \"can't put a value to a non-reference\");\n  }\n\n  // 4. Let base be GetBase(V).\n  let base = GetBase(realm, V);\n\n  // 5. If IsUnresolvableReference(V) is true, then\n  if (IsUnresolvableReference(realm, V)) {\n    // a. If IsStrictReference(V) is true, then\n    if (IsStrictReference(realm, V)) {\n      // i. Throw a ReferenceError exception.\n      throw realm.createErrorThrowCompletion(realm.intrinsics.ReferenceError);\n    }\n\n    // b. Let globalObj be GetGlobalObject().\n    let globalObj = GetGlobalObject(realm);\n\n    // c. Return ? Set(globalObj, GetReferencedName(V), W, false).\n    return Set(realm, globalObj, GetReferencedName(realm, V), W, false);\n  }\n\n  // 6. Else if IsPropertyReference(V) is true, then\n  if (IsPropertyReference(realm, V)) {\n    // a. If HasPrimitiveBase(V) is true, then\n    if (HasPrimitiveBase(realm, V)) {\n      // i. Assert: In realm case, base will never be null or undefined.\n      invariant(base instanceof Value && !HasSomeCompatibleType(realm, base, UndefinedValue, NullValue));\n\n      // ii. Set base to ToObject(base).\n      base = ToObjectPartial(realm, base);\n    }\n    invariant(base instanceof ObjectValue || base instanceof AbstractObjectValue);\n\n    // b. Let succeeded be ? base.[[Set]](GetReferencedName(V), W, GetThisValue(V)).\n    let succeeded = base.$SetPartial(GetReferencedNamePartial(realm, V), W, GetThisValue(realm, V));\n\n    // c. If succeeded is false and IsStrictReference(V) is true, throw a TypeError exception.\n    if (succeeded === false && IsStrictReference(realm, V)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // d. Return.\n    return;\n  }\n\n  // 7. Else base must be an Environment Record,\n  if (base instanceof EnvironmentRecord) {\n    // a. Return ? base.SetMutableBinding(GetReferencedName(V), W, IsStrictReference(V)) (see 8.1.1).\n    let referencedName = GetReferencedName(realm, V);\n    invariant(typeof referencedName === \"string\");\n    return base.SetMutableBinding(referencedName, W, IsStrictReference(realm, V));\n  }\n\n  throw new Error(\"unknown reference type\");\n}\n\n// ECMA262 9.4.2.4\nexport function ArraySetLength(realm: Realm, A: ArrayValue, Desc: Descriptor): boolean {\n  // 1. If the [[Value]] field of Desc is absent, then\n  let DescValue = Desc.value;\n  if (!DescValue) {\n    // a. Return OrdinaryDefineOwnProperty(A, \"length\", Desc).\n    return OrdinaryDefineOwnProperty(realm, A, \"length\", Desc);\n  }\n\n  // 2. Let newLenDesc be a copy of Desc.\n  let newLenDesc = Object.assign({}, Desc);\n\n  // 3. Let newLen be ? ToUint32(Desc.[[Value]]).\n  let newLen = ToUint32(realm, DescValue);\n\n  // 4. Let numberLen be ? ToNumber(Desc.[[Value]]).\n  let numberLen = ToNumber(realm, DescValue);\n\n  // 5. If newLen ≠ numberLen, throw a RangeError exception.\n  if (newLen !== numberLen) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError, \"should be a uint\");\n  }\n\n  // 6. Set newLenDesc.[[Value]] to newLen.\n  newLenDesc.value = new NumberValue(realm, newLen);\n\n  // 7. Let oldLenDesc be OrdinaryGetOwnProperty(A, \"length\").\n  let oldLenDesc = OrdinaryGetOwnProperty(realm, A, \"length\");\n\n  // 8. Assert: oldLenDesc will never be undefined or an accessor descriptor because Array objects are created\n  //    with a length data property that cannot be deleted or reconfigured.\n  invariant(oldLenDesc !== undefined &&\n    !IsAccessorDescriptor(realm, oldLenDesc), \"cannot be undefined or an accessor descriptor\");\n\n  // 9. Let oldLen be oldLenDesc.[[Value]].\n  let oldLen = oldLenDesc.value;\n  invariant(oldLen !== undefined);\n  oldLen = oldLen.throwIfNotConcrete();\n  invariant(oldLen instanceof NumberValue, \"should be a number\");\n  oldLen = (oldLen.value: number);\n\n  // 10. If newLen ≥ oldLen, then\n  if (newLen >= oldLen) {\n    // a. Return OrdinaryDefineOwnProperty(A, \"length\", newLenDesc).\n    return OrdinaryDefineOwnProperty(realm, A, \"length\", newLenDesc);\n  }\n\n  // 11. If oldLenDesc.[[Writable]] is false, return false.\n  if (!oldLenDesc.writable) return false;\n\n  // 12. If newLenDesc.[[Writable]] is absent or has the value true, let newWritable be true.\n  let newWritable;\n  if (!(\"writable\" in newLenDesc) || newLenDesc.writable === true) {\n    newWritable = true;\n  } else { // 13. Else,\n    // a. Need to defer setting the [[Writable]] attribute to false in case any elements cannot be deleted.\n\n    // b. Let newWritable be false.\n    newWritable = false;\n\n    // c. Set newLenDesc.[[Writable]] to true.\n    newLenDesc.writable = true;\n  }\n\n  // 14. Let succeeded be ! OrdinaryDefineOwnProperty(A, \"length\", newLenDesc).\n  let succeeded = OrdinaryDefineOwnProperty(realm, A, \"length\", newLenDesc);\n\n  // 15. If succeeded is false, return false.\n  if (succeeded === false) return false;\n\n  // Here we diverge from the spec: instead of traversing all indices from\n  // oldLen to newLen, only the indices that are actually present are touched.\n  let oldLenCopy = oldLen;\n  let keys = Array.from(A.properties.keys())\n      .map((x) => parseInt(x, 10))\n      .filter((x) => newLen <= x && x <= oldLenCopy)\n      .sort()\n      .reverse();\n\n  // 16. While newLen < oldLen repeat,\n  for (let key of keys) {\n    // a. Set oldLen to oldLen - 1.\n    oldLen = key;\n\n    // b. Let deleteSucceeded be ! A.[[Delete]](! ToString(oldLen)).\n    let deleteSucceeded = A.$Delete(oldLen + \"\");\n\n    // c. If deleteSucceeded is false, then\n    if (deleteSucceeded === false) {\n      // i. Set newLenDesc.[[Value]] to oldLen + 1.\n      newLenDesc.value = new NumberValue(realm, oldLen + 1);\n\n      // ii. If newWritable is false, set newLenDesc.[[Writable]] to false.\n      if (newWritable === false) newLenDesc.writable = false;\n\n      // iii. Let succeeded be ! OrdinaryDefineOwnProperty(A, \"length\", newLenDesc).\n      succeeded = OrdinaryDefineOwnProperty(realm, A, \"length\", newLenDesc);\n\n      // iv. Return false.\n      return false;\n    }\n  }\n\n  // 17. If newWritable is false, then\n  if (!newWritable) {\n    // a. Return OrdinaryDefineOwnProperty(A, \"length\", PropertyDescriptor{[[Writable]]: false}). This call will always return true.\n    return OrdinaryDefineOwnProperty(realm, A, \"length\", {\n      writable: false\n    });\n  }\n\n  // 18. Return true.\n  return true;\n}\n\n// ECMA262 9.1.5.1\nexport function OrdinaryGetOwnProperty(realm: Realm, O: ObjectValue, P: PropertyKeyValue): Descriptor | void {\n  // 1. Assert: IsPropertyKey(P) is true.\n  invariant(IsPropertyKey(realm, P), \"expected a property key\");\n\n  // 2. If O does not have an own property with key P, return undefined.\n  let existingBinding = InternalGetPropertiesMap(O, P).get(InternalGetPropertiesKey(P));\n  if (!existingBinding) {\n    if (O.isPartial() && !O.isSimple()) {\n      throw AbstractValue.createIntrospectionErrorThrowCompletion(O, P);\n    }\n    return undefined;\n  }\n  if (!existingBinding.descriptor) return undefined;\n\n  // 3. Let D be a newly created Property Descriptor with no fields.\n  let D = {};\n\n  // 4. Let X be O's own property whose key is P.\n  let X = existingBinding.descriptor;\n  invariant(X !== undefined);\n\n  // 5. If X is a data property, then\n  if (IsDataDescriptor(realm, X)) {\n    let value = X.value;\n    if (O.isPartial() && value instanceof AbstractValue && value.kind !== \"resolved\") {\n      let realmGenerator = realm.generator;\n      invariant(realmGenerator);\n      value = realmGenerator.derive(value.types, value.values, value.args, value._buildNode, \"resolved\");\n      InternalSetProperty(realm, O, P, {\n        value: value,\n        writable: 'writable' in X ? X.writable : false,\n        enumerable: 'enumerable' in X ? X.enumerable : false,\n        configurable: 'configurable' in X ? X.configurable : false\n      });\n    }\n\n    // a. Set D.[[Value]] to the value of X's [[Value]] attribute.\n    D.value = value;\n\n    // b. Set D.[[Writable]] to the value of X's [[Writable]] attribute.\n    D.writable = X.writable;\n  } else { // 6. Else X is an accessor property,\n    invariant(IsAccessorDescriptor(realm, X), \"expected accessor property\");\n\n    // a. Set D.[[Get]] to the value of X's [[Get]] attribute.\n    D.get = X.get;\n\n    // b. Set D.[[Set]] to the value of X's [[Set]] attribute.\n    D.set = X.set;\n  }\n\n  // 7. Set D.[[Enumerable]] to the value of X's [[Enumerable]] attribute.\n  D.enumerable = X.enumerable;\n\n  // 8. Set D.[[Configurable]] to the value of X's [[Configurable]] attribute.\n  D.configurable = X.configurable;\n\n  // 9. Return D.\n  return D;\n}\n\n// ECMA262 9.1.2.1\nexport function OrdinarySetPrototypeOf(realm: Realm, O: ObjectValue, V: ObjectValue | NullValue): boolean {\n  // 1. Assert: Either Type(V) is Object or Type(V) is Null.\n  invariant(V instanceof ObjectValue || V instanceof NullValue);\n\n  // 2. Let extensible be the value of the [[Extensible]] internal slot of O.\n  let extensible = O.getExtensible();\n\n  // 3. Let current be the value of the [[Prototype]] internal slot of O.\n  let current = O.$Prototype;\n\n  // 4. If SameValue(V, current) is true, return true.\n  if (SameValue(realm, V, current)) return true;\n\n  // 5. If extensible is false, return false.\n  if (!extensible) return false;\n\n  // 6. Let p be V.\n  let p = V;\n\n  // 7. Let done be false.\n  let done = false;\n\n  // 8. Repeat while done is false,\n  while (!done) {\n    // a. If p is null, let done be true.\n    if (p instanceof NullValue) {\n      done = true;\n    } else if (SameValue(realm, p, O)) { // b. Else if SameValue(p, O) is true, return false.\n      return false;\n    } else { // c. Else,\n      // TODO i. If the [[GetPrototypeOf]] internal method of p is not the ordinary object internal method defined in 9.1.1, let done be true.\n\n      // ii. Else, let p be the value of p's [[Prototype]] internal slot.\n      p = p.$Prototype;\n    }\n  }\n\n  // 9. Set the value of the [[Prototype]] internal slot of O to V.\n  O.$Prototype = V;\n\n  // 10. Return true.\n  return true;\n}\n\n// ECMA262 13.7.5.15\nexport function EnumerateObjectProperties(realm: Realm, O: ObjectValue) {\n  /*global global*/\n  let visited = new global.Set();\n  let obj = O;\n  let keys = O.$OwnPropertyKeys();\n  let index = 0;\n\n  let iterator = new ObjectValue(realm);\n  iterator.defineNativeMethod(\"next\", 0, () => {\n    while (true) {\n      if (index >= keys.length) {\n        let proto = obj.$GetPrototypeOf();\n        if (proto instanceof NullValue) {\n          return CreateIterResultObject(realm, realm.intrinsics.undefined, true);\n        }\n        obj = proto;\n        keys = obj.$OwnPropertyKeys();\n        index = 0;\n      }\n\n      let key = keys[index];\n\n      // Omit symbols.\n      if (!(key instanceof StringValue)) {\n        index += 1;\n        continue;\n      }\n\n      // Omit non-enumerable properties.\n      let desc = obj.$GetOwnProperty(key);\n      if (desc && !desc.enumerable) {\n        ThrowIfMightHaveBeenDeleted(desc.value);\n        index += 1;\n        visited.add(key.value);\n        continue;\n      }\n\n      // Omit duplicates.\n      if (visited.has(key.value)) {\n        index += 1;\n        continue;\n      }\n      visited.add(key.value);\n\n      // Yield the key.\n      return CreateIterResultObject(realm, key, false);\n    }\n  });\n  return iterator;\n}\n\nexport function ThrowIfMightHaveBeenDeleted(value: void | Value): void {\n  if (value === undefined) return;\n  if (!value.mightHaveBeenDeleted()) return;\n  invariant(value instanceof AbstractValue); // real empty values should never get here\n  throw AbstractValue.createIntrospectionErrorThrowCompletion(value);\n}\n\nexport function ThrowIfInternalSlotNotWritable<T: ObjectValue>(realm: Realm, object: T, key: string): T {\n  if (!realm.isNewObject(object)) throw AbstractValue.createIntrospectionErrorThrowCompletion(object, key);\n  return object;\n}\n"]}