{"version":3,"sources":["../../src/methods/create.js"],"names":["StringCreate","CreateHTML","MakeArgGetter","MakeArgSetter","CreateStringIterator","ArraySpeciesCreate","CreateIterResultObject","CreateArrayIterator","ArrayCreate","CreateArrayFromList","CreateUnmappedArgumentsObject","CreateMappedArgumentsObject","CreateDataProperty","CreateDataPropertyOrThrow","ObjectCreate","OrdinaryCreateFromConstructor","CreateListFromArrayLike","CreateDynamicFunction","realm","value","prototype","S","$StringData","$Prototype","setExtensible","length","writable","enumerable","configurable","string","tag","attribute","str","p1","V","escapedV","replace","p2","p3","p4","name","env","undefined","context","GetBindingValue","SetMutableBinding","iterator","intrinsics","StringIteratorPrototype","$IteratedString","$StringIteratorNextIndex","originalArray","Object","is","C","isArray","thisRealm","realmC","Array","SymbolSpecies","throwIfNotConcrete","createErrorThrowCompletion","TypeError","done","obj","ObjectPrototype","array","kind","ArrayIteratorPrototype","$IteratedObject","$ArrayIteratorNextIndex","$ArrayIterationKind","proto","Math","pow","RangeError","ArrayPrototype","A","elems","elem","arr","n","status","argumentsList","len","$ParameterMap","index","val","SymbolIterator","ArrayProto_values","get","ThrowTypeError","set","func","formals","param","type","map","parameterNames","push","numberOfParameters","mappedNames","indexOf","g","p","$DefineOwnProperty","O","P","newDesc","success","internalSlotsList","assign","constructor","intrinsicDefaultProto","elementTypes","list","indexName","next","newTarget","args","fallbackProto","argCount","bodyText","emptyString","firstArg","k","nextArg","nextArgString","ast","e","SyntaxError","program","body","functionDeclaration","params","strict","containsYield","node","F","realmF","$Realm","scope","$GlobalEnv","GeneratorPrototype","originalConstructor"],"mappings":"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","file":"create.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { EnvironmentRecord } from \"../environment.js\";\nimport type { PropertyKeyValue, IterationKind } from \"../types.js\";\nimport {\n  NativeFunctionValue,\n  NullValue,\n  BooleanValue,\n  ArrayValue,\n  ObjectValue,\n  Value,\n  StringValue,\n  NumberValue,\n  FunctionValue,\n  UndefinedValue,\n  StringExotic,\n  ArgumentsExotic,\n  AbstractObjectValue\n} from \"../values/index.js\";\nimport { GetPrototypeFromConstructor } from \"./get.js\";\nimport { DefinePropertyOrThrow, OrdinaryDefineOwnProperty } from \"./properties.js\";\nimport { IsConstructor, IsPropertyKey, IsArray } from \"./is.js\";\nimport { Type, SameValue, RequireObjectCoercible } from \"./abstract.js\";\nimport { ToStringPartial, ToLength } from \"./to.js\";\nimport { Get, GetFunctionRealm } from \"./get.js\";\nimport { Construct, MakeConstructor } from \"./construct.js\";\nimport { FunctionAllocate, FunctionInitialize, SetFunctionName } from \"./function.js\";\nimport IsStrict from \"../utils/strict.js\";\nimport invariant from \"../invariant.js\";\nimport parse from \"../utils/parse.js\";\nimport traverse from \"../traverse.js\";\nimport type { BabelNodeIdentifier, BabelNodeLVal, BabelNodeFunctionDeclaration } from \"babel-types\";\n\n// ECMA262 9.4.3.3\nexport function StringCreate(realm: Realm, value: StringValue, prototype: ObjectValue): ObjectValue {\n  // 1. Assert: Type(value) is String.\n  invariant(value instanceof StringValue, \"expected string value\");\n\n  // 2. Let S be a newly created String exotic object.\n  let S = new StringExotic(realm);\n\n  // 3. Set the [[StringData]] internal slot of S to value.\n  S.$StringData = value;\n\n  // 4. Set S's essential internal methods to the default ordinary object definitions specified in 9.1.\n\n  // 5. Set the [[GetOwnProperty]] internal method of S as specified in 9.4.3.1.\n\n  // 6. Set the [[OwnPropertyKeys]] internal method of S as specified in 9.4.3.2.\n\n  // 7. Set the [[Prototype]] internal slot of S to prototype.\n  S.$Prototype = prototype;\n\n  // 8. Set the [[Extensible]] internal slot of S to true.\n  S.setExtensible(true);\n\n  // 9. Let length be the number of code unit elements in value.\n  let length = value.value.length;\n\n  // 10. Perform ! DefinePropertyOrThrow(S, \"length\", PropertyDescriptor{[[Value]]: length, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }).\n  DefinePropertyOrThrow(realm, S, \"length\", {\n    value: new NumberValue(realm, length),\n    writable: false,\n    enumerable: false,\n    configurable: false\n  });\n\n  // 11. Return S.\n  return S;\n}\n\n// B.2.3.2.1\nexport function CreateHTML(realm: Realm, string: Value, tag: string, attribute: string, value: string | Value): StringValue {\n  // 1. Let str be ? RequireObjectCoercible(string).\n  let str = RequireObjectCoercible(realm, string);\n\n  // 2. Let S be ? ToString(str).\n  let S = ToStringPartial(realm, str);\n\n  // 3. Let p1 be the String value that is the concatenation of \"<\" and tag.\n  let p1 = `<${tag}`;\n\n  // 4. If attribute is not the empty String, then\n  if (attribute) {\n    // a. Let V be ? ToString(value).\n    let V = ToStringPartial(realm, value);\n\n    // b. Let escapedV be the String value that is the same as V except that each occurrence of the code unit\n    //    0x0022 (QUOTATION MARK) in V has been replaced with the six code unit sequence \"&quot;\".\n    let escapedV = V.replace(/\"/g, \"&quot;\");\n\n    // c. Let p1 be the String value that is the concatenation of the following String values:\n    // - The String value of p1\n    // - Code unit 0x0020 (SPACE)\n    // - The String value of attribute\n    // - Code unit 0x003D (EQUALS SIGN)\n    // - Code unit 0x0022 (QUOTATION MARK)\n    // - The String value of escapedV\n    // - Code unit 0x0022 (QUOTATION MARK)\n    p1 = `${p1} ${attribute}=\"${escapedV}\"`;\n  }\n\n  // 5. Let p2 be the String value that is the concatenation of p1 and \">\".\n  let p2 = `${p1}>`;\n\n  // 6. Let p3 be the String value that is the concatenation of p2 and S.\n  let p3 = `${p2}${S}`;\n\n  // 7. Let p4 be the String value that is the concatenation of p3, \"</\", tag, and \">\".\n  let p4 = `${p3}</${tag}>`;\n\n  // 8. Return p4.\n  return new StringValue(realm, p4);\n}\n\n// ECMA262 9.4.4.8.1\nexport function MakeArgGetter(realm: Realm, name: string, env: EnvironmentRecord): NativeFunctionValue {\n  return new NativeFunctionValue(realm, undefined, undefined, 0, (context) => {\n     return env.GetBindingValue(name, false);\n  }, false);\n}\n\n// ECMA262 9.4.4.8.1\nexport function MakeArgSetter(realm: Realm, name: string, env: EnvironmentRecord): NativeFunctionValue {\n  return new NativeFunctionValue(realm, undefined, undefined, 1, (context, [value]) => {\n     return env.SetMutableBinding(name, value, false);\n  }, false);\n}\n\n// ECMA262 21.1.5.1\nexport function CreateStringIterator(realm: Realm, string: StringValue): ObjectValue {\n  // 1. Assert: Type(string) is String.\n  invariant(string instanceof StringValue, \"expected string to be a string value\");\n\n  // 2. Let iterator be ObjectCreate(%StringIteratorPrototype%, « [[IteratedString]], [[StringIteratorNextIndex]] »).\n  let iterator = ObjectCreate(realm, realm.intrinsics.StringIteratorPrototype, {\n    $IteratedString: undefined,\n    $StringIteratorNextIndex: undefined\n  });\n\n  // 3. Set iterator's [[IteratedString]] internal slot to string.\n  iterator.$IteratedString = string;\n\n  // 4. Set iterator's [[StringIteratorNextIndex]] internal slot to 0.\n  iterator.$StringIteratorNextIndex = 0;\n\n  // 5. Return iterator.\n  return iterator;\n}\n\n// ECMA262 9.4.2.3\nexport function ArraySpeciesCreate(realm: Realm, originalArray: ObjectValue, length: number): ObjectValue {\n  // 1. Assert: length is an integer Number ≥ 0.\n  invariant(length >= 0, \"expected length >= 0\");\n\n  // 2. If length is -0, let length be +0.\n  if (Object.is(length, -0)) length = +0;\n\n  // 3. Let C be undefined.\n  let C = realm.intrinsics.undefined;\n\n  // 4. Let isArray be ? IsArray(originalArray).\n  let isArray = IsArray(realm, originalArray);\n\n  // 5. If isArray is true, then\n  if (isArray) {\n    // a. Let C be ? Get(originalArray, \"constructor\").\n    C = Get(realm, originalArray, \"constructor\");\n\n    // b. If IsConstructor(C) is true, then\n    if (IsConstructor(realm, C)) {\n      invariant(C instanceof ObjectValue);\n      // i. Let thisRealm be the current Realm Record.\n      let thisRealm = realm;\n\n      // ii. Let realmC be ? GetFunctionRealm(C).\n      let realmC = GetFunctionRealm(realm, C);\n\n      // iii. If thisRealm and realmC are not the same Realm Record, then\n      if (thisRealm !== realmC) {\n        // 1. If SameValue(C, realmC.[[Intrinsics]].[[%Array%]]) is true, let C be undefined.\n        if (SameValue(realm, C, realmC.intrinsics.Array)) {\n          C = realm.intrinsics.undefined;\n        }\n      }\n    }\n\n    // c. If Type(C) is Object, then\n    if (C instanceof ObjectValue || C instanceof AbstractObjectValue) {\n      // i. Let C be ? Get(C, @@species).\n      C = Get(realm, C, realm.intrinsics.SymbolSpecies);\n\n      // ii. If C is null, let C be undefined.\n      if (C instanceof NullValue) C = realm.intrinsics.undefined;\n      C.throwIfNotConcrete();\n    }\n  }\n\n  // 6. If C is undefined, return ? ArrayCreate(length).\n  if (C instanceof UndefinedValue) return ArrayCreate(realm, length);\n\n  // 7. If IsConstructor(C) is false, throw a TypeError exception.\n  if (!IsConstructor(realm, C)) {\n    C.throwIfNotConcrete();\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a constructor\");\n  }\n  invariant(C instanceof ObjectValue);\n\n  // 8. Return ? Construct(C, « length »).\n  return Construct(realm, C, [new NumberValue(realm, length)]);\n}\n\n// ECMA262 7.4.7\nexport function CreateIterResultObject(realm: Realm, value: Value, done: boolean): ObjectValue {\n  // 1. Assert: Type(done) is Boolean.\n  invariant(typeof done === \"boolean\", \"expected done to be a boolean\");\n\n  // 2. Let obj be ObjectCreate(%ObjectPrototype%).\n  let obj = ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n\n  // 3. Perform CreateDataProperty(obj, \"value\", value).\n  CreateDataProperty(realm, obj, \"value\", value);\n\n  // 4. Perform CreateDataProperty(obj, \"done\", done).\n  CreateDataProperty(realm, obj, \"done\", new BooleanValue(realm, done));\n\n  // 5. Return obj.\n  return obj;\n}\n\n// ECMA262 22.1.5.1\nexport function CreateArrayIterator(realm: Realm, array: ObjectValue, kind: IterationKind): ObjectValue {\n  // 1. Assert: Type(array) is Object.\n  invariant(array instanceof ObjectValue, \"expected object\");\n\n  // 2. Let iterator be ObjectCreate(%ArrayIteratorPrototype%, « [[IteratedObject]],\n  //    [[ArrayIteratorNextIndex]], [[ArrayIterationKind]] »).\n  let iterator = ObjectCreate(realm, realm.intrinsics.ArrayIteratorPrototype, {\n    $IteratedObject: undefined,\n    $ArrayIteratorNextIndex: undefined,\n    $ArrayIterationKind: undefined\n  });\n\n  // 3. Set iterator's [[IteratedObject]] internal slot to array.\n  iterator.$IteratedObject = array;\n\n  // 4. Set iterator's [[ArrayIteratorNextIndex]] internal slot to 0.\n  iterator.$ArrayIteratorNextIndex = new NumberValue(realm, 0);\n\n  // 5. Set iterator's [[ArrayIterationKind]] internal slot to kind.\n  iterator.$ArrayIterationKind = kind;\n\n  // 6. Return iterator.\n  return iterator;\n}\n\n// ECMA262 9.4.2.2\nexport function ArrayCreate(realm: Realm, length: number, proto?: ObjectValue): ArrayValue {\n  // 1. Assert: length is an integer Number ≥ 0.\n  invariant(length >= 0);\n\n  // 2. If length is -0, let length be +0.\n  if (Object.is(length, -0)) length = +0;\n\n  // 3. If length>232-1, throw a RangeError exception.\n  if (length > Math.pow(2, 32) - 1) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError, \"length>2^32-1\");\n  }\n\n  // 4. If the proto argument was not passed, let proto be the intrinsic object %ArrayPrototype%.\n  proto = proto || realm.intrinsics.ArrayPrototype;\n\n  // 5. Let A be a newly created Array exotic object.\n  let A = new ArrayValue(realm);\n\n  // 6. Set A's essential internal methods except for [[DefineOwnProperty]] to the default ordinary object definitions specified in 9.1.\n  // 7. Set the [[DefineOwnProperty]] internal method of A as specified in 9.4.2.1.\n\n  // 8. Set the [[Prototype]] internal slot of A to proto.\n  A.$Prototype = proto;\n\n  // 9. Set the [[Extensible]] internal slot of A to true.\n  A.setExtensible(true);\n\n  // 10. Perform ! OrdinaryDefineOwnProperty(A, \"length\", PropertyDescriptor{[[Value]]: length, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false}).\n  OrdinaryDefineOwnProperty(realm, A, \"length\", {\n    value: new NumberValue(realm, length),\n    writable: true,\n    enumerable: false,\n    configurable: false\n  });\n\n  // 11. Return A.\n  return A;\n}\n\n// ECMA262 7.3.16\nexport function CreateArrayFromList(realm: Realm, elems: Array<Value>): ArrayValue {\n  // 1. Assert: elements is a List whose elements are all ECMAScript language values.\n  for (let elem of elems) invariant(elem instanceof Value, \"value expected\");\n\n  // 2. Let array be ArrayCreate(0) (see 9.4.2.2).\n  let arr = ArrayCreate(realm, 0);\n\n  // 3. Let n be 0.\n  let n = 0;\n\n  // 4. For each element e of elements\n  for (let elem of elems) {\n    // a. Let status be CreateDataProperty(array, ! ToString(n), e).\n    let status = CreateDataProperty(realm, arr, new StringValue(realm, n + \"\"), elem);\n\n    // b. Assert: status is true.\n    invariant(status, \"couldn't create data property\");\n\n    // c. Increment n by 1.\n    n++;\n  }\n\n  // 5. Return array.\n  return arr;\n}\n\n// ECMA262 9.4.4.7\nexport function CreateUnmappedArgumentsObject(realm: Realm, argumentsList: Array<Value>): ObjectValue {\n  // 1. Let len be the number of elements in argumentsList.\n  let len = argumentsList.length;\n\n  // 2. Let obj be ObjectCreate(%ObjectPrototype%, « [[ParameterMap]] »).\n  let obj = ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n\n  // 3. Set obj's [[ParameterMap]] internal slot to undefined.\n  obj.$ParameterMap = obj; // The value is never used, but allows us to use undefined for \"not in\"\n\n  // 4. Perform DefinePropertyOrThrow(obj, \"length\", PropertyDescriptor{[[Value]]: len,\n  //    [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}).\n  DefinePropertyOrThrow(realm, obj, \"length\", {\n    value: new NumberValue(realm, len),\n    writable: true,\n    enumerable: false,\n    configurable: true\n  });\n\n  // 5. Let index be 0.\n  let index = 0;\n\n  // 6. Repeat while index < len,\n  while (index < len) {\n    // a. Let val be argumentsList[index].\n    let val = argumentsList[index];\n\n    // b. Perform CreateDataProperty(obj, ! ToString(index), val).\n    CreateDataProperty(realm, obj, new StringValue(realm, index + \"\"), val);\n\n    // c. Let index be index + 1.\n    index++;\n  }\n\n  // 7. Perform ! DefinePropertyOrThrow(obj, @@iterator, PropertyDescriptor {[[Value]]:\n  //    %ArrayProto_values%, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}).\n  DefinePropertyOrThrow(realm, obj, realm.intrinsics.SymbolIterator, {\n    value: realm.intrinsics.ArrayProto_values,\n    writable: true,\n    enumerable: false,\n    configurable: true\n  });\n\n  // 8. Perform ! DefinePropertyOrThrow(obj, \"callee\", PropertyDescriptor {[[Get]]:\n  // %ThrowTypeError%, [[Set]]: %ThrowTypeError%, [[Enumerable]]: false, [[Configurable]]: false}).\n  DefinePropertyOrThrow(realm, obj, \"callee\", {\n    get: realm.intrinsics.ThrowTypeError,\n    set: realm.intrinsics.ThrowTypeError,\n    enumerable: false,\n    configurable: false\n  });\n\n  // 10. Return obj.\n  return obj;\n}\n\n// ECMA262 9.4.4.8\nexport function CreateMappedArgumentsObject(realm: Realm, func: FunctionValue, formals: Array<BabelNodeLVal>, argumentsList: Array<Value>, env: EnvironmentRecord): ObjectValue {\n  // 1. Assert: formals does not contain a rest parameter, any binding patterns, or any\n  //    initializers. It may contain duplicate identifiers.\n  for (let param of formals) {\n    invariant(param.type === \"Identifier\", \"expected only simple params\");\n  }\n\n  // 2. Let len be the number of elements in argumentsList.\n  let len = argumentsList.length;\n\n  // 3. Let obj be a newly created arguments exotic object with a [[ParameterMap]] internal slot.\n  let obj = new ArgumentsExotic(realm);\n\n  // 4. Set the [[GetOwnProperty]] internal method of obj as specified in 9.4.4.1.\n\n  // 5. Set the [[DefineOwnProperty]] internal method of obj as specified in 9.4.4.2.\n\n  // 6. Set the [[Get]] internal method of obj as specified in 9.4.4.3.\n\n  // 7. Set the [[Set]] internal method of obj as specified in 9.4.4.4.\n\n  // 8. Set the [[Delete]] internal method of obj as specified in 9.4.4.6.\n\n  // 9. Set the remainder of obj's essential internal methods to the default ordinary\n  //    object definitions specified in 9.1.\n\n  // 10. Set the [[Prototype]] internal slot of obj to %ObjectPrototype%.\n  obj.$Prototype = realm.intrinsics.ObjectPrototype;\n\n  // 11. Set the [[Extensible]] internal slot of obj to true.\n  obj.setExtensible(true);\n\n  // 12. Let map be ObjectCreate(null).\n  let map = new ObjectValue(realm);\n\n  // 13. Set the [[ParameterMap]] internal slot of obj to map.\n  obj.$ParameterMap = map;\n\n  // 14. Let parameterNames be the BoundNames of formals.\n  let parameterNames = [];\n  for (let param of formals) {\n    parameterNames.push(((param: any): BabelNodeIdentifier).name);\n  }\n\n  // 15. Let numberOfParameters be the number of elements in parameterNames.\n  let numberOfParameters = parameterNames.length;\n\n  // 16. Let index be 0.\n  let index = 0;\n\n  // 17. Repeat while index < len,\n  while (index < len) {\n    // a. Let val be argumentsList[index].\n    let val = argumentsList[index];\n\n    // b. Perform CreateDataProperty(obj, ! ToString(index), val).\n    CreateDataProperty(realm, obj, new StringValue(realm, index + \"\"), val);\n\n    // c. Let index be index + 1.\n    index++;\n  }\n\n  // 18. Perform DefinePropertyOrThrow(obj, \"length\", PropertyDescriptor{[[Value]]: len,\n  //     [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}).\n  DefinePropertyOrThrow(realm, obj, \"length\", {\n    value: new NumberValue(realm, len),\n    writable: true,\n    enumerable: false,\n    configurable: true\n  });\n\n  // 19. Let mappedNames be an empty List.\n  let mappedNames = [];\n\n  // 20. Let index be numberOfParameters - 1.\n  index = numberOfParameters - 1;\n\n  // 21. Repeat while index ≥ 0,\n  while (index >= 0) {\n    // a. Let name be parameterNames[index].\n    let name = parameterNames[index];\n\n    // b. If name is not an element of mappedNames, then\n    if (mappedNames.indexOf(name) < 0) {\n      // i. Add name as an element of the list mappedNames.\n      mappedNames.push(name);\n\n      // ii. If index < len, then\n      if (index < len) {\n        // 1. Let g be MakeArgGetter(name, env).\n        let g = MakeArgGetter(realm, name, env);\n\n        // 2. Let p be MakeArgSetter(name, env).\n        let p = MakeArgSetter(realm, name, env);\n\n        // 3. Perform map.[[DefineOwnProperty]](! ToString(index), PropertyDescriptor{[[Set]]: p, [[Get]]: g,\n        //    [[Enumerable]]: false, [[Configurable]]: true}).\n        map.$DefineOwnProperty(new StringValue(realm, index + \"\"), {\n          set: p,\n          get: g,\n          enumerable: false,\n          configurable: true\n        });\n      }\n    }\n\n    // c. Let index be index - 1.\n    index--;\n  }\n\n  // 22. Perform ! DefinePropertyOrThrow(obj, @@iterator, PropertyDescriptor {[[Value]]:\n  //     %ArrayProto_values%, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}).\n  DefinePropertyOrThrow(realm, obj, realm.intrinsics.SymbolIterator, {\n    value: realm.intrinsics.ArrayProto_values,\n    writable: true,\n    enumerable: false,\n    configurable: true\n  });\n\n  // 23. Perform ! DefinePropertyOrThrow(obj, \"callee\", PropertyDescriptor {[[Value]]:\n  //     func, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}).\n  DefinePropertyOrThrow(realm, obj, \"callee\", {\n    value: func,\n    writable: true,\n    enumerable: false,\n    configurable: true\n  });\n\n  // 24. Return obj.\n  return obj;\n}\n\n// ECMA262 7.3.4\nexport function CreateDataProperty(realm: Realm, O: ObjectValue, P: PropertyKeyValue, V: Value): boolean {\n  // 1. Assert: Type(O) is Object.\n  invariant(O instanceof ObjectValue, \"Not an object value\");\n\n  // 2. Assert: IsPropertyKey(P) is true.\n  invariant(IsPropertyKey(realm, P), \"Not a property key\");\n\n  // 3. Let newDesc be the PropertyDescriptor{[[Value]]: V, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}.\n  let newDesc = {\n    value: V,\n    writable: true,\n    enumerable: true,\n    configurable: true\n  };\n\n  // 4. Return ? O.[[DefineOwnProperty]](P, newDesc).\n  return O.$DefineOwnProperty(P, newDesc);\n}\n\n// ECMA262 7.3.6\nexport function CreateDataPropertyOrThrow(realm: Realm, O: Value, P: PropertyKeyValue, V: Value): boolean {\n  // 1. Assert: Type(O) is Object.\n  invariant(O instanceof ObjectValue, \"Not an object value\");\n\n  // 2. Assert: IsPropertyKey(P) is true.\n  invariant(IsPropertyKey(realm, P), \"Not a property key\");\n\n  //3. Let success be ? CreateDataProperty(O, P, V).\n  let success = CreateDataProperty(realm, O, P, V);\n\n  // 4. If success is false, throw a TypeError exception.\n  if (success === false) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n  }\n\n  // 5. Return success.\n  return success;\n}\n\n// ECMA262 9.1.12\nexport function ObjectCreate(realm: Realm, proto: ObjectValue | NullValue, internalSlotsList?: { [key: string]: void }): ObjectValue {\n  // 1. If internalSlotsList was not provided, let internalSlotsList be an empty List.\n  internalSlotsList = internalSlotsList || {};\n\n  // 2. Let obj be a newly created object with an internal slot for each name in internalSlotsList.\n  let obj = new ObjectValue(realm);\n  Object.assign(obj, internalSlotsList);\n\n  // TODO 3. Set obj's essential internal methods to the default ordinary object definitions specified in 9.1.\n\n  // 4. Set the [[Prototype]] internal slot of obj to proto.\n  obj.$Prototype = proto;\n\n  // 5. Set the [[Extensible]] internal slot of obj to true.\n  obj.setExtensible(true);\n\n  // 6. Return obj.\n  return obj;\n}\n\n// ECMA262 9.1.13\nexport function OrdinaryCreateFromConstructor(realm: Realm, constructor: ObjectValue, intrinsicDefaultProto: string, internalSlotsList?: { [key: string]: void }): ObjectValue {\n  // 1. Assert: intrinsicDefaultProto is a String value that is this specification's name of an intrinsic\n  //    object. The corresponding object must be an intrinsic that is intended to be used as the [[Prototype]]\n  //    value of an object.\n  invariant(realm.intrinsics[intrinsicDefaultProto], \"not a valid proto ref\");\n\n  // 2. Let proto be ? GetPrototypeFromConstructor(constructor, intrinsicDefaultProto).\n  let proto = GetPrototypeFromConstructor(realm, constructor, intrinsicDefaultProto);\n\n  // 3. Return ObjectCreate(proto, internalSlotsList).\n  return ObjectCreate(realm, proto, internalSlotsList);\n}\n\n// ECMA262 7.3.17\nexport function CreateListFromArrayLike(realm: Realm, obj: Value, elementTypes?: Array<string>) {\n  // 1. If elementTypes was not passed, let elementTypes be « Undefined, Null, Boolean, String, Symbol, Number, Object ».\n  elementTypes = elementTypes || [\"Undefined\", \"Null\", \"Boolean\", \"String\", \"Symbol\", \"Number\", \"Object\"];\n\n  // 2. If Type(obj) is not Object, throw a TypeError exception.\n  if (!(obj instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Not an object\");\n  }\n\n  // 3. Let len be ? ToLength(? Get(obj, \"length\")).\n  let len = ToLength(realm, Get(realm, obj, \"length\"));\n\n  // 4. Let list be a new empty List.\n  let list: Array<Value> = [];\n\n  // 5. Let index be 0.\n  let index = 0;\n\n  // 6. Repeat while index < len\n  while (index < len) {\n    // a. Let indexName be ! ToString(index).\n    let indexName = index + \"\";\n\n    // b. Let next be ? Get(obj, indexName).\n    let next = Get(realm, obj, indexName);\n\n    // c. If Type(next) is not an element of elementTypes, throw a TypeError exception.\n    if (elementTypes.indexOf(Type(realm, next)) < 0) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"invalid element type\");\n    }\n\n    // d. Append next as the last element of list.\n    list.push(next);\n\n    // e. Set index to index + 1.\n    index++;\n  }\n\n  // 7. Return list.\n  return list;\n}\n\n// ECMA262 19.2.1.1.1\nexport function CreateDynamicFunction(realm: Realm, constructor: ObjectValue, newTarget: void | ObjectValue, kind: \"normal\" | \"generator\", args: Array<Value>): Value {\n  // 1. If newTarget is undefined, let newTarget be constructor.\n  newTarget = !newTarget ? constructor : newTarget;\n\n  let fallbackProto;\n  // 2. If kind is \"normal\", then\n  if (kind === \"normal\") {\n    // a. Let goal be the grammar symbol FunctionBody.\n\n    // b. Let parameterGoal be the grammar symbol FormalParameters.\n\n    // c. Let fallbackProto be \"%FunctionPrototype%\".\n    fallbackProto = \"FunctionPrototype\";\n  } else { // 3. Else,\n    // a. Let goal be the grammar symbol GeneratorBody.\n\n    // b. Let parameterGoal be the grammar symbol FormalParameters[Yield].\n\n    // c. Let fallbackProto be \"%Generator%\".\n    fallbackProto = \"Generator\";\n  }\n\n  // 4. Let argCount be the number of elements in args.\n  let argCount = args.length;\n\n  // 5. Let P be the empty String.\n  let P = \"\";\n\n  let bodyText;\n  // 6. If argCount = 0, let bodyText be the empty String.\n  if (argCount === 0) {\n    bodyText = realm.intrinsics.emptyString;\n  } else if (argCount === 1) { // 7. Else if argCount = 1, let bodyText be args[0].\n    bodyText = args[0];\n  } else { // 8. Else argCount > 1,\n    // a. Let firstArg be args[0].\n    let firstArg = args[0];\n\n    // b. Let P be ? ToString(firstArg).\n    P = ToStringPartial(realm, firstArg);\n\n    // c. Let k be 1.\n    let k = 1;\n\n    // d. Repeat, while k < argCount-1\n    while (k < argCount - 1) {\n      // i. Let nextArg be args[k].\n      let nextArg = args[k];\n\n      // ii. Let nextArgString be ? ToString(nextArg).\n      let nextArgString = ToStringPartial(realm, nextArg);\n\n      // iii. Let P be the result of concatenating the previous value of P, the String \",\" (a comma), and nextArgString.\n      P = P + \",\" + nextArgString;\n\n      // iv. Increase k by 1.\n      k += 1;\n    }\n\n    // e. Let bodyText be args[k].\n    bodyText = args[k];\n  }\n\n  // 9. Let bodyText be ? ToString(bodyText).\n  bodyText = ToStringPartial(realm, bodyText);\n\n  // 10. Let parameters be the result of parsing P, interpreted as UTF-16 encoded Unicode text as described in 6.1.4, using parameterGoal as the goal symbol. Throw a SyntaxError exception if the parse fails.\n  // 11. Let body be the result of parsing bodyText, interpreted as UTF-16 encoded Unicode text as described in 6.1.4, using goal as the goal symbol. Throw a SyntaxError exception if the parse fails.\n  let ast;\n  try {\n    ast = parse(realm, \"function\" + (kind === \"generator\" ? \"*\" : \"\") + \" _(\" + P + \"){\" + bodyText + \"}\", \"eval\");\n  } catch (e) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.SyntaxError, \"parse failed\");\n  }\n  let { program: { body: [functionDeclaration] } } = ast;\n  if (!functionDeclaration) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.SyntaxError, \"parse failed\");\n  }\n  invariant(functionDeclaration.type === \"FunctionDeclaration\");\n  let { params, body } = ((functionDeclaration: any): BabelNodeFunctionDeclaration);\n\n  // 12. If bodyText is strict mode code, then let strict be true, else let strict be false.\n  let strict = IsStrict(body);\n\n  // 13. If any static semantics errors are detected for parameters or body, throw a SyntaxError or a ReferenceError exception, depending on the type of the error. If strict is true, the Early Error rules for StrictFormalParameters:FormalParameters are applied. Parsing and early error detection may be interweaved in an implementation dependent manner.\n\n  // 14. If ContainsUseStrict of body is true and IsSimpleParameterList of parameters is false, throw a SyntaxError exception.\n\n  // 15. If any element of the BoundNames of parameters also occurs in the LexicallyDeclaredNames of body, throw a SyntaxError exception.\n\n  // 16. If body Contains SuperCall is true, throw a SyntaxError exception.\n\n  // 17. If parameters Contains SuperCall is true, throw a SyntaxError exception.\n\n  // 18. If body Contains SuperProperty is true, throw a SyntaxError exception.\n\n  // 19. If parameters Contains SuperProperty is true, throw a SyntaxError exception.\n\n  // 20. If kind is \"generator\", then\n  if (kind === \"generator\") {\n    // a. If parameters Contains YieldExpression is true, throw a SyntaxError exception.\n    let containsYield = false;\n    for (let param of params) {\n      traverse(param, (node) => {\n        if (node.type === \"YieldExpression\") {\n          containsYield = true;\n          return true;\n        }\n        if (node.type === \"Identifier\" && node.name === \"yield\") {\n          containsYield = true;\n          return true;\n        }\n        return false;\n      });\n    }\n    if (containsYield) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.SyntaxError, \"parse failed\");\n    }\n  }\n\n  // 21. If strict is true, then\n  if (strict === true) {\n    // a. If BoundNames of parameters contains any duplicate elements, throw a SyntaxError exception.\n  }\n\n  // 22. Let proto be ? GetPrototypeFromConstructor(newTarget, fallbackProto).\n  let proto = GetPrototypeFromConstructor(realm, newTarget, fallbackProto);\n\n  // 23. Let F be FunctionAllocate(proto, strict, kind).\n  let F = FunctionAllocate(realm, proto, strict, kind);\n\n  // 24. Let realmF be the value of F's [[Realm]] internal slot.\n  let realmF = F.$Realm;\n\n  // 25. Let scope be realmF.[[GlobalEnv]].\n  let scope = realmF.$GlobalEnv;\n\n  // 26. Perform FunctionInitialize(F, Normal, parameters, body, scope).\n  FunctionInitialize(realm, F, \"normal\", params, body, scope);\n\n  // 27. If kind is \"generator\", then\n  if (kind === \"generator\") {\n    // a. Let prototype be ObjectCreate(%GeneratorPrototype%).\n    let prototype = ObjectCreate(realm, realm.intrinsics.GeneratorPrototype);\n    prototype.originalConstructor = F;\n\n    // b. Perform DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor{[[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false}).\n    DefinePropertyOrThrow(realm, F, \"prototype\", {\n      value: prototype,\n      writable: true,\n      enumerable: false,\n      configurable: false\n    });\n  } else { // 28. Else, perform MakeConstructor(F).\n    MakeConstructor(realm, F);\n  }\n\n  // 29. Perform SetFunctionName(F, \"anonymous\").\n  SetFunctionName(realm, F, \"anonymous\");\n\n  // 30. Return F.\n  return F;\n}\n"]}