{"version":3,"sources":["../../src/methods/iterator.js"],"names":["GetIterator","IteratorStep","IteratorValue","IteratorComplete","IteratorNext","CreateMapIterator","CreateSetIterator","IteratorClose","IterableToList","realm","obj","intrinsics","undefined","method","SymbolIterator","iterator","createErrorThrowCompletion","TypeError","result","done","iterResult","value","map","kind","$MapData","MapIteratorPrototype","$Map","$MapNextIndex","$MapIterationKind","set","$SetData","SetIteratorPrototype","$IteratedSet","$SetNextIndex","$SetIterationKind","completion","ret","innerResult","throwIfNotConcrete","items","values","next","nextValue","push"],"mappings":"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","file":"iterator.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { CallableObjectValue } from \"../types.js\";\nimport { ThrowCompletion, AbruptCompletion } from \"../completions.js\";\nimport { NumberValue, ObjectValue, UndefinedValue, Value } from \"../values/index.js\";\nimport {\n  GetMethod,\n  Call,\n  Get,\n  ToBooleanPartial,\n  Invoke,\n  ObjectCreate,\n} from \"./index.js\";\nimport invariant from \"../invariant.js\";\nimport type { IterationKind } from \"../types.js\";\n\n// ECMA262 7.4.1\nexport function GetIterator(realm: Realm, obj: Value = realm.intrinsics.undefined, method?: Value): ObjectValue {\n  // 1. If method was not passed, then\n  if (!method) {\n    // a. Let method be ? GetMethod(obj, @@iterator).\n    method = GetMethod(realm, obj, realm.intrinsics.SymbolIterator);\n  }\n\n  // 2. Let iterator be ? Call(method, obj).\n  let iterator = Call(realm, method, obj);\n\n  // 3. If Type(iterator) is not Object, throw a TypeError exception.\n  if (!(iterator instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 4. Return iterator.\n  return iterator;\n}\n\n// ECMA262 7.4.5\nexport function IteratorStep(realm: Realm, iterator: Value): false | ObjectValue {\n  // 1. Let result be ? IteratorNext(iterator).\n  let result = IteratorNext(realm, iterator);\n\n  // 2. Let done be ? IteratorComplete(result).\n  let done = IteratorComplete(realm, result);\n\n  // 3. If done is true, return false.\n  if (done) return false;\n\n  // 4. Return result.\n  return result;\n}\n\n// ECMA262 7.4.4\nexport function IteratorValue(realm: Realm, iterResult: ObjectValue): Value {\n  // 1. Assert: Type(iterResult) is Object.\n  invariant(iterResult instanceof ObjectValue, \"expected obj\");\n\n  // 2. Return ? Get(iterResult, \"value\").\n  return Get(realm, iterResult, \"value\");\n}\n\n// ECMA262 7.4.2\nexport function IteratorComplete(realm: Realm, iterResult: ObjectValue): boolean {\n  // 1. Assert: Type(iterResult) is Object.\n  invariant(iterResult instanceof ObjectValue, \"expected obj\");\n\n  // 2. Return ToBoolean(? Get(iterResult, \"done\")).\n  return ToBooleanPartial(realm, Get(realm, iterResult, \"done\"));\n}\n\n// ECMA262 7.4.2\nexport function IteratorNext(realm: Realm, iterator: Value, value?: Value): ObjectValue {\n  // 1. If value was not passed, then\n  let result;\n  if (!value) {\n    // a. Let result be ? Invoke(iterator, \"next\", « »).\n    result = Invoke(realm, iterator, \"next\", []);\n  } else {  // 2. Else,\n    // a. Let result be ? Invoke(iterator, \"next\", « value »).\n    result = Invoke(realm, iterator, \"next\", [value]);\n  }\n\n  // 3. If Type(result) is not Object, throw a TypeError exception.\n  if (!(result instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 4. Return result.\n  return result;\n}\n\n// ECMA262 23.1.5.1\nexport function CreateMapIterator(realm: Realm, map: Value, kind: IterationKind): ObjectValue {\n  // 1. If Type(map) is not Object, throw a TypeError exception.\n  if (!(map instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 2. If map does not have a [[MapData]] internal slot, throw a TypeError exception.\n  if (!map.$MapData) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 3. Let iterator be ObjectCreate(%MapIteratorPrototype%, « [[Map]], [[MapNextIndex]], [[MapIterationKind]] »).\n  let iterator = ObjectCreate(realm, realm.intrinsics.MapIteratorPrototype, {\n    $Map: undefined,\n    $MapNextIndex: undefined,\n    $MapIterationKind: undefined\n  });\n\n  // 4. Set iterator's [[Map]] internal slot to map.\n  iterator.$Map = map;\n\n  // 5. Set iterator's [[MapNextIndex]] internal slot to 0.\n  iterator.$MapNextIndex = new NumberValue(realm, 0);\n\n  // 6. Set iterator's [[MapIterationKind]] internal slot to kind.\n  iterator.$MapIterationKind = kind;\n\n  // 7. Return iterator.\n  return iterator;\n}\n\n// ECMA262 23.2.5.1\nexport function CreateSetIterator(realm: Realm, set: Value, kind: IterationKind): ObjectValue {\n  // 1. If Type(set) is not Object, throw a TypeError exception.\n  if (!(set instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 2. If set does not have a [[SetData]] internal slot, throw a TypeError exception.\n  if (!set.$SetData) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 3. Let iterator be ObjectCreate(%SetIteratorPrototype%, « [[IteratedSet]], [[SetNextIndex]], [[SetIterationKind]] »).\n  let iterator = ObjectCreate(realm, realm.intrinsics.SetIteratorPrototype, {\n    $IteratedSet: undefined,\n    $SetNextIndex: undefined,\n    $SetIterationKind: undefined\n  });\n\n  // 4. Set iterator's [[IteratedSet]] internal slot to set.\n  iterator.$IteratedSet = set;\n\n  // 5. Set iterator's [[SetNextIndex]] internal slot to 0.\n  iterator.$SetNextIndex = 0;\n\n  // 6. Set iterator's [[SetIterationKind]] internal slot to kind.\n  iterator.$SetIterationKind = kind;\n\n  // 7. Return iterator.\n  return iterator;\n}\n\n// ECMA262 7.4.6\nexport function IteratorClose(realm: Realm, iterator: ObjectValue, completion: AbruptCompletion): AbruptCompletion {\n  // 1. Assert: Type(iterator) is Object.\n  invariant(iterator instanceof ObjectValue, \"expected object\");\n\n  // 2. Assert: completion is a Completion Record.\n  invariant(completion instanceof AbruptCompletion, \"expected completion record\");\n\n  // 3. Let return be ? GetMethod(iterator, \"return\").\n  let ret = GetMethod(realm, iterator, \"return\");\n\n  // 4. If return is undefined, return Completion(completion).\n  if (ret instanceof UndefinedValue) return completion;\n\n  // 5. Let innerResult be Call(return, iterator, « »).\n  let innerResult = Call(realm, ret.throwIfNotConcrete(), iterator, []);\n\n  // 6. If completion.[[Type]] is throw, return Completion(completion).\n  if (completion instanceof ThrowCompletion) return completion;\n\n  // 7. If innerResult.[[Type]] is throw, return Completion(innerResult).\n\n  // 8. If Type(innerResult.[[Value]]) is not Object, throw a TypeError exception.\n  if (!(innerResult instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 9. Return Completion(completion).\n  return completion;\n}\n\n// ECMA262 22.2.2.1.1\nexport function IterableToList(realm: Realm, items: Value, method: CallableObjectValue): Array<Value> {\n  // 1. Let iterator be ? GetIterator(items, method).\n  let iterator = GetIterator(realm, items, method);\n\n  // 2. Let values be a new empty List.\n  let values = [];\n\n  // 3. Let next be true.\n  let next = true;\n\n  // 4. Repeat, while next is not false\n  while (next !== false) {\n    // a. Let next be ? IteratorStep(iterator).\n    next = IteratorStep(realm, iterator);\n\n    // b. If next is not false, then\n    if (next !== false) {\n      // i. Let nextValue be ? IteratorValue(next).\n      let nextValue = IteratorValue(realm, next);\n\n      // ii. Append nextValue to the end of the List values.\n      values.push(nextValue);\n    }\n  }\n\n  // 5. Return values.\n  return values;\n}\n"]}