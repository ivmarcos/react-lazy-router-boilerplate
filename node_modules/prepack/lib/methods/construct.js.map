{"version":3,"sources":["../../src/methods/construct.js"],"names":["MakeConstructor","Construct","SpeciesConstructor","realm","F","writablePrototype","prototype","$Construct","undefined","getExtensible","intrinsics","ObjectPrototype","originalConstructor","value","writable","enumerable","configurable","argumentsList","newTarget","O","defaultConstructor","C","throwIfNotConcrete","createErrorThrowCompletion","TypeError","S","SymbolSpecies"],"mappings":";;;;;QAqBgBA,e,GAAAA,e;QA2CAC,S,GAAAA,S;QAmBAC,kB,GAAAA,kB;;AAvEhB;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA;AApBA;;;;;;;;;AAqBO,SAASF,eAAT,CAAyBG,KAAzB,EAAuCC,CAAvC,EAAyDC,iBAAzD,EAAsFC,SAAtF,EAA+H;AACpI;AACA,2BAAUF,iCAAV,EAAsC,yBAAtC;;AAEA;AACA,2BAAUA,EAAEG,UAAF,KAAiBC,SAA3B,EAAsC,oCAAtC;;AAEA;AACA,2BAAUJ,EAAEK,aAAF,EAAV,EAA6B,qEAA7B;;AAEA;AACA,MAAIJ,sBAAsB,IAAtB,IAA8BA,sBAAsBG,SAAxD,EAAmE;AACjEH,wBAAoB,IAApB;AACD;;AAED;AACA,MAAI,CAACC,SAAL,EAAgB;AACd;AACAA,gBAAY,0BAAaH,KAAb,EAAoBA,MAAMO,UAAN,CAAiBC,eAArC,CAAZ;AACAL,cAAUM,mBAAV,GAAgCR,CAAhC;;AAEA;AACA,2CAAsBD,KAAtB,EAA6BG,SAA7B,EAAwC,aAAxC,EAAuD;AACrDO,aAAOT,CAD8C;AAErDU,gBAAUT,iBAF2C;AAGrDU,kBAAY,KAHyC;AAIrDC,oBAAc;AAJuC,KAAvD;AAMD;;AAED;AACA,yCAAsBb,KAAtB,EAA6BC,CAA7B,EAAgC,WAAhC,EAA6C;AAC3CS,WAAOP,SADoC;AAE3CQ,cAAUT,iBAFiC;AAG3CU,gBAAY,KAH+B;AAI3CC,kBAAc;AAJ6B,GAA7C;;AAOA;AACA,SAAOb,MAAMO,UAAN,CAAiBF,SAAxB;AACD;;AAED;AACO,SAASP,SAAT,CAAmBE,KAAnB,EAAiCC,CAAjC,EAAiDa,aAAjD,EAA+EC,SAA/E,EAAqH;AAC1H;AACA,MAAI,CAACA,SAAL,EAAgBA,YAAYd,CAAZ;;AAEhB;AACA,MAAI,CAACa,aAAL,EAAoBA,gBAAgB,EAAhB;;AAEpB;AACA,2BAAU,uBAAcd,KAAd,EAAqBC,CAArB,CAAV,EAAmC,sBAAnC;;AAEA;AACA,2BAAU,uBAAcD,KAAd,EAAqBe,SAArB,CAAV,EAA2C,sBAA3C;;AAEA;AACA,2BAAUd,EAAEG,UAAF,KAAiBC,SAA3B,EAAsC,oCAAtC;AACA,SAAOJ,EAAEG,UAAF,CAAaU,aAAb,EAA4BC,SAA5B,CAAP;AACD;;AAED;AACO,SAAShB,kBAAT,CAA4BC,KAA5B,EAA0CgB,CAA1C,EAA0DC,kBAA1D,EAAwG;AAC7G;AACA,2BAAUD,+BAAV,EAAoC,mBAApC;;AAEA;AACA,MAAIE,IAAI,cAAIlB,KAAJ,EAAWgB,CAAX,EAAc,aAAd,CAAR;;AAEA;AACA,MAAIE,kCAAJ,EAAiC,OAAOD,kBAAP;;AAEjC;AACA,MAAI,EAAEC,mCAA4BA,uCAA9B,CAAJ,EAAqE;AACnEA,MAAEC,kBAAF;AACA,UAAMnB,MAAMoB,0BAAN,CAAiCpB,MAAMO,UAAN,CAAiBc,SAAlD,EAA6D,0BAA7D,CAAN;AACD;;AAED;AACA,MAAIC,IAAI,cAAItB,KAAJ,EAAWkB,CAAX,EAAclB,MAAMO,UAAN,CAAiBgB,aAA/B,CAAR;;AAEA;AACA,MAAI,gCAAsBvB,KAAtB,EAA6BsB,CAA7B,0CAAJ,EAAgE,OAAOL,kBAAP;;AAEhE;AACA,MAAI,uBAAcjB,KAAd,EAAqBsB,CAArB,CAAJ,EAA6B;AAC3B,6BAAUA,+BAAV;AACA,WAAOA,CAAP;AACD;;AAED;AACA,QAAMtB,MAAMoB,0BAAN,CAAiCpB,MAAMO,UAAN,CAAiBc,SAAlD,EAA6D,6BAA7D,CAAN;AACD","file":"construct.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport { FunctionValue, ObjectValue, UndefinedValue, NullValue, Value, AbstractObjectValue } from \"../values/index.js\";\nimport { IsConstructor } from \"./is.js\";\nimport { ObjectCreate } from \"./create.js\";\nimport { DefinePropertyOrThrow } from \"./properties.js\";\nimport { Get } from \"./get.js\";\nimport { HasSomeCompatibleType } from \"./has.js\";\nimport invariant from \"../invariant.js\";\n\n// ECMA262 9.2.8\nexport function MakeConstructor(realm: Realm, F: FunctionValue, writablePrototype?: boolean, prototype?: ObjectValue): UndefinedValue {\n  // 1. Assert: F is an ECMAScript function object.\n  invariant(F instanceof FunctionValue, \"expected function value\");\n\n  // 2. Assert: F has a [[Construct]] internal method.\n  invariant(F.$Construct !== undefined, \"expected construct internal method\");\n\n  // 3. Assert: F is an extensible object that does not have a prototype own property.\n  invariant(F.getExtensible(), \"expected extensible object that doesn't have prototype own property\");\n\n  // 4. If the writablePrototype argument was not provided, let writablePrototype be true.\n  if (writablePrototype === null || writablePrototype === undefined) {\n    writablePrototype = true;\n  }\n\n  // 5. If the prototype argument was not provided, then\n  if (!prototype) {\n    // a. Let prototype be ObjectCreate(%ObjectPrototype%).\n    prototype = ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n    prototype.originalConstructor = F;\n\n    // b. Perform ! DefinePropertyOrThrow(prototype, \"constructor\", PropertyDescriptor{[[Value]]: F, [[Writable]]: writablePrototype, [[Enumerable]]: false, [[Configurable]]: true }).\n    DefinePropertyOrThrow(realm, prototype, \"constructor\", {\n      value: F,\n      writable: writablePrototype,\n      enumerable: false,\n      configurable: true\n    });\n  }\n\n  // 6. Perform ! DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor{[[Value]]: prototype, [[Writable]]: writablePrototype, [[Enumerable]]: false, [[Configurable]]: false}).\n  DefinePropertyOrThrow(realm, F, \"prototype\", {\n    value: prototype,\n    writable: writablePrototype,\n    enumerable: false,\n    configurable: false\n  });\n\n  // 7. Return NormalCompletion(undefined).\n  return realm.intrinsics.undefined;\n}\n\n// ECMA262 7.3.13\nexport function Construct(realm: Realm, F: ObjectValue, argumentsList?: Array<Value>, newTarget?: ObjectValue): ObjectValue {\n  // If newTarget was not passed, let newTarget be F.\n  if (!newTarget) newTarget = F;\n\n  // If argumentsList was not passed, let argumentsList be a new empty List.\n  if (!argumentsList) argumentsList = [];\n\n  // Assert: IsConstructor(F) is true.\n  invariant(IsConstructor(realm, F), \"expected constructor\");\n\n  // Assert: IsConstructor(newTarget) is true.\n  invariant(IsConstructor(realm, newTarget), \"expected constructor\");\n\n  // Return ? F.[[Construct]](argumentsList, newTarget).\n  invariant(F.$Construct !== undefined, \"no construct method on realm value\");\n  return F.$Construct(argumentsList, newTarget);\n}\n\n// ECMA262 7.3.20\nexport function SpeciesConstructor(realm: Realm, O: ObjectValue, defaultConstructor: ObjectValue): ObjectValue {\n  // 1. Assert: Type(O) is Object.\n  invariant(O instanceof ObjectValue, \"Type(O) is Object\");\n\n  // 2. Let C be ? Get(O, \"constructor\").\n  let C = Get(realm, O, \"constructor\");\n\n  // 3. If C is undefined, return defaultConstructor.\n  if (C instanceof UndefinedValue) return defaultConstructor;\n\n  // 4. If Type(C) is not Object, throw a TypeError exception.\n  if (!(C instanceof ObjectValue || C instanceof AbstractObjectValue)) {\n    C.throwIfNotConcrete();\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(C) is not an object\");\n  }\n\n  // 5. Let S be ? Get(C, @@species).\n  let S = Get(realm, C, realm.intrinsics.SymbolSpecies);\n\n  // 6. If S is either undefined or null, return defaultConstructor.\n  if (HasSomeCompatibleType(realm, S, UndefinedValue, NullValue)) return defaultConstructor;\n\n  // 7. If IsConstructor(S) is true, return S.\n  if (IsConstructor(realm, S)) {\n    invariant(S instanceof ObjectValue);\n    return S;\n  }\n\n  // 8. Throw a TypeError exception.\n  throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Throw a TypeError exception\");\n}\n"]}