"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
opyright (c) 2017-present, Facebook, Inc.
ll rights reserved.

his source code is licensed under the BSD-style license found in the
file in the root directory of this source tree. An additional grant
of patent rights can be found in the PATENTS file in the same directory.


exports.default = function (ast, strictCode, env, realm) {
  var lref = env.evaluate(ast.left, strictCode);
  var lval = (0, _index3.GetValue)(realm, lref);

  if (lval instanceof _index.ConcreteValue) {
    var lbool = (0, _index3.ToBoolean)(realm, lval);

    if (ast.operator === "&&") {
      // ECMA262 12.13.3
      if (lbool === false) return lval;
    } else if (ast.operator === "||") {
      // ECMA262 12.13.3
      if (lbool === true) return lval;
    }

    var rref = env.evaluate(ast.right, strictCode);
    return (0, _index3.GetValue)(realm, rref);
  }
  (0, _invariant2.default)(lval instanceof _index.AbstractValue);

  if (_index.Value.isTypeCompatibleWith(lval.getType(), _index.ObjectValue)) {
    if (ast.operator === "&&") return env.evaluate(ast.right, strictCode);else {
      return lval;
    }
  }

  // Create empty effects for the case where ast.left is defined

  var _construct_empty_effe = (0, _realm.construct_empty_effects)(realm),
      _construct_empty_effe2 = _slicedToArray(_construct_empty_effe, 5),
      compl1 = _construct_empty_effe2[0],
      gen1 = _construct_empty_effe2[1],
      bindings1 = _construct_empty_effe2[2],
      properties1 = _construct_empty_effe2[3],
      createdObj1 = _construct_empty_effe2[4];

  // Evaluate ast.right in a sandbox to get its effects


  var _realm$partially_eval = realm.partially_evaluate_node(ast.right, strictCode, env),
      _realm$partially_eval2 = _slicedToArray(_realm$partially_eval, 5),
      compl2 = _realm$partially_eval2[0],
      gen2 = _realm$partially_eval2[1],
      bindings2 = _realm$partially_eval2[2],
      properties2 = _realm$partially_eval2[3],
      createdObj2 = _realm$partially_eval2[4];

  if (compl2 instanceof _completions.IntrospectionThrowCompletion) {
    realm.restoreBindings(bindings2);
    realm.restoreProperties(properties2);
    throw compl2;
  }
  // todo: don't just give up on abrupt completions, but try to join states
  // eg. foo || throwSomething()
  if (!(compl2 instanceof _index.Value)) throw _index.AbstractValue.createIntrospectionErrorThrowCompletion(lval);

  // Join the effects, creating an abstract view of what happened, regardless
  // of the actual value of ast.left.

  var _ref = ast.operator === "&&" ? (0, _index3.joinEffects)(realm, lval, [compl2, gen2, bindings2, properties2, createdObj2], [compl1, gen1, bindings1, properties1, createdObj1]) : (0, _index3.joinEffects)(realm, lval, [compl1, gen1, bindings1, properties1, createdObj1], [compl2, gen2, bindings2, properties2, createdObj2]),
      _ref2 = _slicedToArray(_ref, 5),
      completion = _ref2[0],
      generator = _ref2[1],
      bindings = _ref2[2],
      properties = _ref2[3],
      createdObjects = _ref2[4];

  // Apply the joined effects to the global state


  realm.restoreBindings(bindings);
  realm.restoreProperties(properties);

  // Add generated code for property modifications
  realm.appendGenerator(generator);

  // Ignore the joined completion
  completion;

  // Ignore created objects
  createdObjects;

  // And return an actual logicalExpression
  var types = _index2.TypesDomain.joinValues(lval, compl2);
  var values = _index2.ValuesDomain.joinValues(realm, lval, compl2);
  var result = realm.createAbstract(types, values, [lval, compl2], function (args) {
    return t.logicalExpression(ast.operator, args[0], args[1]);
  });
  result.values = _index2.ValuesDomain.joinValues(realm, lval, compl2);
  return result;
};

var _completions = require("../completions.js");

var _realm = require("../realm.js");

var _index = require("../values/index.js");

var _index2 = require("../domains/index.js");

var _index3 = require("../methods/index.js");

var _invariant = require("../invariant.js");

var _invariant2 = _interopRequireDefault(_invariant);

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//# sourceMappingURL=LogicalExpression.js.map