{"version":3,"sources":["../../src/evaluators/FunctionDeclaration.js"],"names":["ast","strictCode","env","realm","generator","strict","body","name","id","F","params","prototype","intrinsics","GeneratorPrototype","value","writable","configurable","__originalName"],"mappings":";;;;;;kBAwBe,UAAUA,GAAV,EAA6CC,UAA7C,EAAkEC,GAAlE,EAA2FC,KAA3F,EAA4H;AACzI,MAAIH,IAAII,SAAR,EAAmB;AACjB;AACA,QAAIC,SAASJ,cAAc,sBAASD,IAAIM,IAAb,CAA3B;;AAEA;AACA,QAAIC,aAAJ;AACA,QAAIP,IAAIQ,EAAR,EAAY;AACVD,aAAO,uBAAgBJ,KAAhB,EAAuBH,IAAIQ,EAAJ,CAAOD,IAA9B,CAAP;AACD,KAFD,MAEO;AACLA,aAAO,uBAAgBJ,KAAhB,EAAuB,SAAvB,CAAP;AACD;;AAED;AACA,QAAIM,IAAI,uCAAwBN,KAAxB,EAA+B,QAA/B,EAAyCH,IAAIU,MAA7C,EAAqDV,IAAIM,IAAzD,EAA+DJ,GAA/D,EAAoEG,MAApE,CAAR;;AAEA;AACA,QAAIM,YAAY,0BAAaR,KAAb,EAAoBA,MAAMS,UAAN,CAAiBC,kBAArC,CAAhB;;AAEA;AACA,2CAAsBV,KAAtB,EAA6BM,CAA7B,EAAgC,WAAhC,EAA6C;AAC3CK,aAAOH,SADoC;AAE3CI,gBAAU,IAFiC;AAG3CC,oBAAc;AAH6B,KAA7C;;AAMA;AACA,mCAAgBb,KAAhB,EAAuBM,CAAvB,EAA0BF,IAA1B;;AAEA;AACA,WAAOE,CAAP;AACD,GA9BD,MA8BO;AACL;AACA,QAAIJ,UAASJ,cAAc,sBAASD,IAAIM,IAAb,CAA3B;;AAEA;AACA,QAAIC,cAAJ;AACA,QAAIP,IAAIQ,EAAR,EAAY;AACVD,cAAO,uBAAgBJ,KAAhB,EAAuBH,IAAIQ,EAAJ,CAAOD,IAA9B,CAAP;AACD,KAFD,MAEO;AACLA,cAAO,uBAAgBJ,KAAhB,EAAuB,SAAvB,CAAP;AACD;;AAED;AACA,QAAIM,KAAI,8BAAeN,KAAf,EAAsB,QAAtB,EAAgCH,IAAIU,MAApC,EAA4CV,IAAIM,IAAhD,EAAsDJ,GAAtD,EAA2DG,OAA3D,CAAR;AACA,QAAIL,IAAIQ,EAAJ,IAAUR,IAAIQ,EAAJ,CAAOD,IAArB,EAA2BE,GAAEQ,cAAF,GAAmBjB,IAAIQ,EAAJ,CAAOD,IAA1B;;AAE3B;AACA,oCAAgBJ,KAAhB,EAAuBM,EAAvB;;AAEA;AACA,mCAAgBN,KAAhB,EAAuBM,EAAvB,EAA0BF,KAA1B;;AAEA;AACA,WAAOE,EAAP;AACD;AACF,C;;AAjED;;AACA;;AACA;;AACA;;AACA;;AACA","file":"FunctionDeclaration.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport type { Value } from \"../values/index.js\";\nimport type { Reference } from \"../environment.js\";\nimport { SetFunctionName, FunctionCreate, GeneratorFunctionCreate } from \"../methods/function.js\";\nimport { MakeConstructor } from \"../methods/construct.js\";\nimport { ObjectCreate } from \"../methods/create.js\";\nimport { DefinePropertyOrThrow } from \"../methods/properties.js\";\nimport { StringValue } from \"../values/index.js\";\nimport IsStrict from \"../utils/strict.js\";\nimport type { BabelNodeFunctionDeclaration } from \"babel-types\";\n\n// ECMA262 14.1.20\nexport default function (ast: BabelNodeFunctionDeclaration, strictCode: boolean, env: LexicalEnvironment, realm: Realm): Value | Reference {\n  if (ast.generator) {\n    // 1. If the function code for GeneratorDeclaration is strict mode code, let strict be true. Otherwise let strict be false.\n    let strict = strictCode || IsStrict(ast.body);\n\n    // 2. Let name be StringValue of BindingIdentifier.\n    let name;\n    if (ast.id) {\n      name = new StringValue(realm, ast.id.name);\n    } else {\n      name = new StringValue(realm, \"default\");\n    }\n\n    // 3. Let F be GeneratorFunctionCreate(Normal, FormalParameters, GeneratorBody, scope, strict).\n    let F = GeneratorFunctionCreate(realm, \"normal\", ast.params, ast.body, env, strict);\n\n    // 4. Let prototype be ObjectCreate(%GeneratorPrototype%).\n    let prototype = ObjectCreate(realm, realm.intrinsics.GeneratorPrototype);\n\n    // 5. Perform DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor{[[Value]]: prototype, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false}).\n    DefinePropertyOrThrow(realm, F, \"prototype\", {\n      value: prototype,\n      writable: true,\n      configurable: false\n    });\n\n    // 6. Perform SetFunctionName(F, name).\n    SetFunctionName(realm, F, name);\n\n    // 7 .Return F.\n    return F;\n  } else {\n    // 1. If the function code for FunctionDeclaration is strict mode code, let strict be true. Otherwise let strict be false.\n    let strict = strictCode || IsStrict(ast.body);\n\n    // 2. Let name be StringValue of BindingIdentifier.\n    let name;\n    if (ast.id) {\n      name = new StringValue(realm, ast.id.name);\n    } else {\n      name = new StringValue(realm, \"default\");\n    }\n\n    // 3. Let F be FunctionCreate(Normal, FormalParameters, FunctionBody, scope, strict).\n    let F = FunctionCreate(realm, \"normal\", ast.params, ast.body, env, strict);\n    if (ast.id && ast.id.name) F.__originalName = ast.id.name;\n\n    // 4. Perform MakeConstructor(F).\n    MakeConstructor(realm, F);\n\n    // 5. Perform SetFunctionName(F, name).\n    SetFunctionName(realm, F, name);\n\n    // 6. Return F.\n    return F;\n  }\n}\n"]}