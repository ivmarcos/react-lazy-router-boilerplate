"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (ast, strictCode, env, realm) {
  // 1. Let obj be ObjectCreate(%ObjectPrototype%).
  var obj = (0, _index2.ObjectCreate)(realm, realm.intrinsics.ObjectPrototype);

  // 2. Let status be the result of performing PropertyDefinitionEvaluation of PropertyDefinitionList with arguments obj and true.
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = ast.properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var prop = _step.value;

      if (prop.type === "ObjectProperty") {
        // 1. Let propKey be the result of evaluating PropertyName.
        var propKey = EvalPropertyName(prop, env, realm, strictCode);

        // 2. ReturnIfAbrupt(propKey).

        // 3. Let exprValueRef be the result of evaluating AssignmentExpression.
        var exprValueRef = env.evaluate(prop.value, strictCode);

        // 4. Let propValue be ? GetValue(exprValueRef).
        var propValue = (0, _index2.GetValue)(realm, exprValueRef);

        // 5. If IsAnonymousFunctionDefinition(AssignmentExpression) is true, then
        if ((0, _index2.IsAnonymousFunctionDefinition)(realm, prop.value)) {
          (0, _invariant2.default)(propValue instanceof _index.ObjectValue);

          // a. Let hasNameProperty be ? HasOwnProperty(propValue, "name").
          var hasNameProperty = (0, _index2.HasOwnProperty)(realm, propValue, "name");

          // b. If hasNameProperty is false, perform SetFunctionName(propValue, propKey).
          if (!hasNameProperty) (0, _index2.SetFunctionName)(realm, propValue, propKey);
        }

        // 6. Assert: enumerable is true.

        // 7. Return CreateDataPropertyOrThrow(object, propKey, propValue).
        (0, _index2.CreateDataPropertyOrThrow)(realm, obj, propKey, propValue);
      } else if (prop.type === "ObjectMethod") {
        if (prop.kind === "method") {
          // 1. Let methodDef be DefineMethod of MethodDefinition with argument object.
          var methodDef = void 0;
          {
            // 1. Let propKey be the result of evaluating PropertyName.
            var _propKey = EvalPropertyName(prop, env, realm, strictCode);

            // 2. ReturnIfAbrupt(propKey).

            // 3. If the function code for this MethodDefinition is strict mode code, let strict be true. Otherwise let strict be false.
            var strict = strictCode || (0, _strict4.default)(prop.body);

            // 4. Let scope be the running execution context's LexicalEnvironment.
            var scope = env;

            // 5. If functionPrototype was passed as a parameter, let kind be Normal; otherwise let kind be Method.
            var kind = "method";

            // 6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody, scope, strict). If functionPrototype was passed as a parameter, then pass its value as the prototype optional argument of FunctionCreate.
            var closure = (0, _index2.FunctionCreate)(realm, kind, prop.params, prop.body, scope, strict);

            // 7. Perform MakeMethod(closure, object).
            (0, _index2.MakeMethod)(realm, closure, obj);

            // 8. Return the Record{[[Key]]: propKey, [[Closure]]: closure}.
            methodDef = { $Key: _propKey, $Closure: closure };
          }

          // 2. ReturnIfAbrupt(methodDef).

          // 3. Perform SetFunctionName(methodDef.[[Closure]], methodDef.[[Key]]).
          (0, _index2.SetFunctionName)(realm, methodDef.$Closure, methodDef.$Key);

          // 4. Let desc be the PropertyDescriptor{[[Value]]: methodDef.[[Closure]], [[Writable]]: true, [[Enumerable]]: enumerable, [[Configurable]]: true}.
          var desc = {
            value: methodDef.$Closure,
            writable: true,
            enumerable: true,
            configurable: true
          };

          // 5. Return ? DefinePropertyOrThrow(object, methodDef.[[Key]], desc).
          (0, _index2.DefinePropertyOrThrow)(realm, obj, methodDef.$Key, desc);
        } else if (prop.kind === "get") {
          // 1. Let propKey be the result of evaluating PropertyName.
          var _propKey2 = EvalPropertyName(prop, env, realm, strictCode);

          // 2. ReturnIfAbrupt(propKey).

          // 3. If the function code for this MethodDefinition is strict mode code, let strict be true. Otherwise let strict be false.
          var _strict = strictCode || (0, _strict4.default)(prop.body);

          // 4. Let scope be the running execution context's LexicalEnvironment.
          var _scope = env;

          // 5. Let formalParameterList be the production FormalParameters:[empty] .
          var formalParameterList = [];

          // 6. Let closure be FunctionCreate(Method, formalParameterList, FunctionBody, scope, strict).
          var _closure = (0, _index2.FunctionCreate)(realm, "method", formalParameterList, prop.body, _scope, _strict);

          // 7. Perform MakeMethod(closure, object).
          (0, _index2.MakeMethod)(realm, _closure, obj);

          // 8. Perform SetFunctionName(closure, propKey, "get").
          (0, _index2.SetFunctionName)(realm, _closure, _propKey2, "get");

          // 9. Let desc be the PropertyDescriptor{[[Get]]: closure, [[Enumerable]]: enumerable, [[Configurable]]: true}.
          var _desc = {
            get: _closure,
            enumerable: true,
            configurable: true
          };

          // 10. Return ? DefinePropertyOrThrow(object, propKey, desc).
          (0, _index2.DefinePropertyOrThrow)(realm, obj, _propKey2, _desc);
        } else {
          // 1. Let propKey be the result of evaluating PropertyName.
          var _propKey3 = EvalPropertyName(prop, env, realm, strictCode);

          // 2. ReturnIfAbrupt(propKey).

          // 3. If the function code for this MethodDefinition is strict mode code, let strict be true. Otherwise let strict be false.
          var _strict2 = strictCode || (0, _strict4.default)(prop.body);

          // 4. Let scope be the running execution context's LexicalEnvironment.
          var _scope2 = env;

          // 5. Let closure be FunctionCreate(Method, PropertySetParameterList, FunctionBody, scope, strict).
          var _closure2 = (0, _index2.FunctionCreate)(realm, "method", prop.params, prop.body, _scope2, _strict2);

          // 6. Perform MakeMethod(closure, object).
          (0, _index2.MakeMethod)(realm, _closure2, obj);

          // 7. Perform SetFunctionName(closure, propKey, "set").
          (0, _index2.SetFunctionName)(realm, _closure2, _propKey3, "set");

          // 8. Let desc be the PropertyDescriptor{[[Set]]: closure, [[Enumerable]]: enumerable, [[Configurable]]: true}.
          var _desc2 = {
            set: _closure2,
            enumerable: true,
            configurable: true
          };

          // 9. Return ? DefinePropertyOrThrow(object, propKey, desc).
          (0, _index2.DefinePropertyOrThrow)(realm, obj, _propKey3, _desc2);
        }
      } else {
        throw new Error("unknown property node");
      }
    }

    // 3. ReturnIfAbrupt(status).

    // 4. Return obj.
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return obj;
};

var _index = require("../values/index.js");

var _index2 = require("../methods/index.js");

var _strict3 = require("../utils/strict.js");

var _strict4 = _interopRequireDefault(_strict3);

var _invariant = require("../invariant.js");

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Returns the result of evaluating PropertyName.
function EvalPropertyName(prop, env, realm, strictCode) {
  if (prop.computed) {
    var propertyKeyName = (0, _index2.GetValue)(realm, env.evaluate(prop.key, strictCode)).throwIfNotConcrete();
    return (0, _index2.ToPropertyKey)(realm, propertyKeyName);
  } else {
    if (prop.key.type === "Identifier") {
      return new _index.StringValue(realm, prop.key.name);
    } else {
      return (0, _index2.ToStringPartial)(realm, (0, _index2.GetValue)(realm, env.evaluate(prop.key, strictCode)));
    }
  }
}

// ECMA262 12.2.6.8
/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
//# sourceMappingURL=ObjectExpression.js.map