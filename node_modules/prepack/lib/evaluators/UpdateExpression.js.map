{"version":3,"sources":["../../src/evaluators/UpdateExpression.js"],"names":["ast","strictCode","env","realm","expr","evaluate","argument","oldExpr","throwIfNotConcrete","oldValue","prefix","operator","newValue","Error"],"mappings":";;;;;;kBAmBe,UAAUA,GAAV,EAA0CC,UAA1C,EAA+DC,GAA/D,EAAwFC,KAAxF,EAAyH;AACtI;;AAEA;AACA,MAAIC,OAAOF,IAAIG,QAAJ,CAAaL,IAAIM,QAAjB,EAA2BL,UAA3B,CAAX;;AAEA;AACA,MAAIM,UAAU,qBAASJ,KAAT,EAAgBC,IAAhB,EAAsBI,kBAAtB,EAAd;AACA,MAAIC,WAAW,qBAASN,KAAT,EAAgBI,OAAhB,CAAf;;AAEA,MAAIP,IAAIU,MAAR,EAAgB;AACd,QAAIV,IAAIW,QAAJ,KAAiB,IAArB,EAA2B;AACzB;;AAEA;AACA,UAAIC,WAAW,gBAAIT,KAAJ,EAAWM,QAAX,EAAqB,CAArB,CAAf;;AAEA;AACA,2BAASN,KAAT,EAAgBC,IAAhB,EAAsBQ,QAAtB;;AAEA;AACA,aAAOA,QAAP;AACD,KAXD,MAWO,IAAIZ,IAAIW,QAAJ,KAAiB,IAArB,EAA2B;AAChC;;AAEA;AACA,UAAIC,YAAW,gBAAIT,KAAJ,EAAWM,QAAX,EAAqB,CAAC,CAAtB,CAAf;;AAEA;AACA,2BAASN,KAAT,EAAgBC,IAAhB,EAAsBQ,SAAtB;;AAEA;AACA,aAAOA,SAAP;AACD;AACF,GAxBD,MAwBO;AACL,QAAIZ,IAAIW,QAAJ,KAAiB,IAArB,EAA2B;AACzB;;AAEA;AACA,UAAIC,aAAW,gBAAIT,KAAJ,EAAWM,QAAX,EAAqB,CAArB,CAAf;;AAEA;AACA,2BAASN,KAAT,EAAgBC,IAAhB,EAAsBQ,UAAtB;;AAEA;AACA,aAAO,wBAAgBT,KAAhB,EAAuBM,QAAvB,CAAP;AACD,KAXD,MAWO,IAAIT,IAAIW,QAAJ,KAAiB,IAArB,EAA2B;AAChC;;AAEA;AACA,UAAIC,aAAW,gBAAIT,KAAJ,EAAWM,QAAX,EAAqB,CAAC,CAAtB,CAAf;;AAEA;AACA,2BAASN,KAAT,EAAgBC,IAAhB,EAAsBQ,UAAtB;;AAEA;AACA,aAAO,wBAAgBT,KAAhB,EAAuBM,QAAvB,CAAP;AACD;AACF;;AAED,QAAM,IAAII,KAAJ,CAAU,eAAV,CAAN;AACD,C;;AAjED;;AACA","file":"UpdateExpression.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport type { Value } from \"../values/index.js\";\nimport type { Reference } from \"../environment.js\";\nimport { Add, GetValue, ToNumber, PutValue } from \"../methods/index.js\";\nimport { NumberValue } from \"../values/index.js\";\nimport type { BabelNodeUpdateExpression } from \"babel-types\";\n\nexport default function (ast: BabelNodeUpdateExpression, strictCode: boolean, env: LexicalEnvironment, realm: Realm): Value | Reference {\n  // ECMA262 12.4 Update Expressions\n\n  // Let expr be the result of evaluating UnaryExpression.\n  let expr = env.evaluate(ast.argument, strictCode);\n\n  // Let oldValue be ? ToNumber(? GetValue(expr)).\n  let oldExpr = GetValue(realm, expr).throwIfNotConcrete();\n  let oldValue = ToNumber(realm, oldExpr);\n\n  if (ast.prefix) {\n    if (ast.operator === \"++\") {\n      // ECMA262 12.4.6.1\n\n      // 3. Let newValue be the result of adding the value 1 to oldValue, using the same rules as for the + operator (see 12.8.5)\n      let newValue = Add(realm, oldValue, 1);\n\n      // 4. Perform ? PutValue(expr, newValue).\n      PutValue(realm, expr, newValue);\n\n      // 5. Return newValue.\n      return newValue;\n    } else if (ast.operator === \"--\") {\n      // ECMA262 12.4.7.1\n\n      // 3. Let newValue be the result of subtracting the value 1 from oldValue, using the same rules as for the - operator (see 12.8.5).\n      let newValue = Add(realm, oldValue, -1);\n\n      // 4. Perform ? PutValue(expr, newValue).\n      PutValue(realm, expr, newValue);\n\n      // 5. Return newValue.\n      return newValue;\n    }\n  } else {\n    if (ast.operator === \"++\") {\n      // ECMA262 12.4.4.1\n\n      // 3. Let newValue be the result of adding the value 1 to oldValue, using the same rules as for the + operator (see 12.8.5).\n      let newValue = Add(realm, oldValue, 1);\n\n      // 4. Perform ? PutValue(lhs, newValue).\n      PutValue(realm, expr, newValue);\n\n      // 5. Return oldValue.\n      return new NumberValue(realm, oldValue);\n    } else if (ast.operator === \"--\") {\n      // ECMA262 12.4.5.1\n\n      // 3. Let newValue be the result of subtracting the value 1 from oldValue, using the same rules as for the - operator (see 12.8.5).\n      let newValue = Add(realm, oldValue, -1);\n\n      // 4. Perform ? PutValue(lhs, newValue).\n      PutValue(realm, expr, newValue);\n\n      // 5. Return oldValue.\n      return new NumberValue(realm, oldValue);\n    }\n  }\n\n  throw new Error(\"unimplemented\");\n}\n"]}