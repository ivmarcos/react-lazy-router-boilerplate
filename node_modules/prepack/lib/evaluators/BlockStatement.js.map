{"version":3,"sources":["../../src/evaluators/BlockStatement.js"],"names":["ast","strictCode","env","realm","oldEnv","getRunningContext","lexicalEnvironment","blockEnv","body","blockValue","directives","directive","value"],"mappings":";;;;;;kBAqBe,UAAUA,GAAV,EAAwCC,UAAxC,EAA6DC,GAA7D,EAAsFC,KAAtF,EAA0I;AACvJ;AACA,MAAIC,SAASD,MAAME,iBAAN,GAA0BC,kBAAvC;;AAEA;AACA,MAAIC,WAAW,uCAA0BJ,KAA1B,EAAiCC,MAAjC,CAAf;;AAEA;AACA,6CAA8BD,KAA9B,EAAqCF,UAArC,EAAiDD,IAAIQ,IAArD,EAA2DD,QAA3D;;AAEA;AACAJ,QAAME,iBAAN,GAA0BC,kBAA1B,GAA+CC,QAA/C;;AAEA,MAAI;AACF;AACA,QAAIE,mBAAJ;;AAEA,QAAIT,IAAIU,UAAR,EAAoB;AAAA;AAAA;AAAA;;AAAA;AAClB,6BAAuBV,IAAIU,UAA3B,8HAAwC;AAAA,cAA/BC,SAA+B;;AACtCF,uBAAa,uBAAgBN,KAAhB,EAAuBQ,UAAUC,KAAV,CAAgBA,KAAvC,CAAb;AACD;AAHiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAInB;;AAED,WAAO,gCAAmBZ,IAAIQ,IAAvB,EAA6BC,UAA7B,EAAyCR,UAAzC,EAAqDM,QAArD,EAA+DJ,KAA/D,CAAP;AACD,GAXD,SAWU;AACR;AACAA,UAAME,iBAAN,GAA0BC,kBAA1B,GAA+CF,MAA/C;AACD;AACF,C;;AAlCD;;AACA;;AACA;;AACA","file":"BlockStatement.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { BabelNodeBlockStatement } from \"babel-types\";\nimport type { Realm } from \"../realm.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\n\nimport { NormalCompletion } from \"../completions.js\";\nimport { Reference } from \"../environment.js\";\nimport { StringValue, Value } from \"../values/index.js\";\nimport { EvaluateStatements, NewDeclarativeEnvironment, BlockDeclarationInstantiation } from \"../methods/index.js\";\n\n// ECMA262 13.2.13\nexport default function (ast: BabelNodeBlockStatement, strictCode: boolean, env: LexicalEnvironment, realm: Realm): NormalCompletion | Value | Reference {\n  // 1. Let oldEnv be the running execution context's LexicalEnvironment.\n  let oldEnv = realm.getRunningContext().lexicalEnvironment;\n\n  // 2. Let blockEnv be NewDeclarativeEnvironment(oldEnv).\n  let blockEnv = NewDeclarativeEnvironment(realm, oldEnv);\n\n  // 3. Perform BlockDeclarationInstantiation(StatementList, blockEnv).\n  BlockDeclarationInstantiation(realm, strictCode, ast.body, blockEnv);\n\n  // 4. Set the running execution context's LexicalEnvironment to blockEnv.\n  realm.getRunningContext().lexicalEnvironment = blockEnv;\n\n  try {\n    // 5. Let blockValue be the result of evaluating StatementList.\n    let blockValue: void | NormalCompletion | Value;\n\n    if (ast.directives) {\n      for (let directive of (ast.directives)) {\n        blockValue = new StringValue(realm, directive.value.value);\n      }\n    }\n\n    return EvaluateStatements(ast.body, blockValue, strictCode, blockEnv, realm);\n  } finally {\n    // 6. Set the running execution context's LexicalEnvironment to oldEnv.\n    realm.getRunningContext().lexicalEnvironment = oldEnv;\n  }\n}\n"]}