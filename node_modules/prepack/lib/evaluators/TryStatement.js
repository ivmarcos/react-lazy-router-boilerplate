"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (ast, strictCode, env, realm) {
  var completions = [];

  var blockRes = env.evaluateCompletion(ast.block, strictCode);

  // can't catch or run finally clauses on introspection errors
  if (blockRes instanceof _completions.IntrospectionThrowCompletion) throw blockRes;

  if (blockRes instanceof _completions.ThrowCompletion && ast.handler) {
    completions.unshift(env.evaluateCompletion(ast.handler, strictCode, blockRes));
  } else {
    completions.unshift(blockRes);
  }

  if (ast.finalizer) {
    completions.unshift(env.evaluateCompletion(ast.finalizer, strictCode));
  }

  // use the last completion record
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = completions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var completion = _step.value;

      if (completion && completion instanceof _completions.AbruptCompletion) throw completion;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (ast.finalizer) {
    completions.shift();
  }

  // otherwise use the last returned value
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = completions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _completion = _step2.value;

      if (_completion && _completion instanceof _index2.Value) return (0, _index.UpdateEmpty)(realm, _completion, realm.intrinsics.undefined);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  throw new Error("shouldn't meet this condition");
};

var _completions = require("../completions.js");

var _index = require("../methods/index.js");

var _index2 = require("../values/index.js");
//# sourceMappingURL=TryStatement.js.map