{"version":3,"sources":["../../src/evaluators/ConditionalExpression.js"],"names":["ast","strictCode","env","realm","exprRef","evaluate","test","exprValue","consequent","alternate","mightNotBeObject"],"mappings":";;;;;;kBAqBe,UACXA,GADW,EAC0BC,UAD1B,EAEXC,GAFW,EAEcC,KAFd,EAEkE;AAC/E,MAAIC,UAAUF,IAAIG,QAAJ,CAAaL,IAAIM,IAAjB,EAAuBL,UAAvB,CAAd;AACA,MAAIM,YAAY,sBAASJ,KAAT,EAAgBC,OAAhB,CAAhB;;AAEA,MAAIG,yCAAJ,EAAwC;AACtC,QAAI,uBAAUJ,KAAV,EAAiBI,SAAjB,CAAJ,EAAiC;AAC/B,aAAOL,IAAIG,QAAJ,CAAaL,IAAIQ,UAAjB,EAA6BP,UAA7B,CAAP;AACD,KAFD,MAEO;AACL,aAAOC,IAAIG,QAAJ,CAAaL,IAAIS,SAAjB,EAA4BR,UAA5B,CAAP;AACD;AACF;AACD,2BAAUM,yCAAV;;AAEA,MAAI,CAACA,UAAUG,gBAAV,EAAL,EACE,OAAOR,IAAIG,QAAJ,CAAaL,IAAIQ,UAAjB,EAA6BP,UAA7B,CAAP,CADF,KAGE,OAAO,kDAAgCM,SAAhC,EAA2CP,IAAIQ,UAA/C,EAA2DR,IAAIS,SAA/D,EAA0ER,UAA1E,EAAsFC,GAAtF,EAA2FC,KAA3F,CAAP;AACH,C;;AA3BD;;AAEA;;AACA;;AAEA","file":"ConditionalExpression.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { NormalCompletion } from \"../completions.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport { AbstractValue, ConcreteValue, Value } from \"../values/index.js\";\nimport type { Reference } from \"../environment.js\";\nimport { evaluateWithAbstractConditional } from \"./IfStatement.js\";\nimport { GetValue, ToBoolean } from \"../methods/index.js\";\nimport type { BabelNodeConditionalExpression } from \"babel-types\";\nimport invariant from \"../invariant.js\";\nimport type { Realm } from \"../realm.js\";\n\nexport default function (\n    ast: BabelNodeConditionalExpression, strictCode: boolean,\n    env: LexicalEnvironment, realm: Realm): NormalCompletion | Value | Reference {\n  let exprRef = env.evaluate(ast.test, strictCode);\n  let exprValue = GetValue(realm, exprRef);\n\n  if (exprValue instanceof ConcreteValue) {\n    if (ToBoolean(realm, exprValue)) {\n      return env.evaluate(ast.consequent, strictCode);\n    } else {\n      return env.evaluate(ast.alternate, strictCode);\n    }\n  }\n  invariant(exprValue instanceof AbstractValue);\n\n  if (!exprValue.mightNotBeObject())\n    return env.evaluate(ast.consequent, strictCode);\n  else\n    return evaluateWithAbstractConditional(exprValue, ast.consequent, ast.alternate, strictCode, env, realm);\n}\n"]}