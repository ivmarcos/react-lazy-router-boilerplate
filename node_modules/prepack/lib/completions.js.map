{"version":3,"sources":["../src/completions.js"],"names":["Completion","value","target","AbruptCompletion","NormalCompletion","ThrowCompletion","nativeStack","getType","$Realm","intrinsics","__IntrospectionError","IntrospectionThrowCompletion","Error","stack","ContinueCompletion","BreakCompletion","ReturnCompletion","ComposedAbruptCompletion","priorCompletion","subsequentCompletion","PossiblyNormalCompletion","createIntrospectionErrorThrowCompletion","joinCondition","JoinedAbruptCompletions","realm","consequent","consequentEffects","alternate","alternateEffects","empty","undefined"],"mappings":";;;;;;;;;AAWA;;AAEA;;;;;;;;;;0JAbA;;;;;;;;;IAeaA,U,WAAAA,U,GACX,oBAAYC,KAAZ,EAA0BC,MAA1B,EAA4C;AAAA;;AAC1C,OAAKD,KAAL,GAAcA,KAAd;AACA,OAAKC,MAAL,GAAcA,MAAd;AACD,C;AAKH;AACA;;;IACaC,gB,WAAAA,gB;;;;;;;;;;EAAyBH,U;AACtC;;;IACaI,gB,WAAAA,gB;;;;;;;;;;EAAyBJ,U;;IAEzBK,e,WAAAA,e;;;AACX,2BAAYJ,KAAZ,EAA0BK,WAA1B,EAAiD;AAAA;;AAAA,mIACzCL,KADyC;;AAE/C,6BAAUA,MAAMM,OAAN,OAAoBN,MAAMO,MAAN,CAAaC,UAAb,CAAwBC,oBAA5C,IACR,kBAAgBC,4BADlB;AAEA,WAAKL,WAAL,GAAmBA,eAAe,IAAIM,KAAJ,GAAYC,KAA9C;AAJ+C;AAKhD;;;EANkCV,gB;;IAUxBQ,4B,WAAAA,4B;;;;;;;;;;EAAqCN,e;;IAGrCS,kB,WAAAA,kB;;;;;;;;;;EAA2BX,gB;;IAC3BY,e,WAAAA,e;;;;;;;;;;EAAwBZ,gB;;IACxBa,gB,WAAAA,gB;;;;;;;;;;EAAyBb,gB;;IAEzBc,wB,WAAAA,wB;;;AACX,oCACIC,eADJ,EAEIC,oBAFJ,EAE4C;AAAA;;AAAA,qJACpCA,qBAAqBlB,KADe,EACRkB,qBAAqBjB,MADb;;AAE1C,WAAKgB,eAAL,GAAuBA,eAAvB;AACA,WAAKC,oBAAL,GAA4BA,oBAA5B;AAH0C;AAI3C;;;;8DAKuE;AACtE,UAAI,KAAKD,eAAL,YAAgCE,wBAApC,EACE,OAAO,qBAAcC,uCAAd,CAAsD,KAAKH,eAAL,CAAqBI,aAA3E,CAAP;AACF,+BAAU,KAAKH,oBAAL,YAAqCC,wBAA/C;AACA,aAAO,qBAAcC,uCAAd,CAAsD,KAAKF,oBAAL,CAA0BG,aAAhF,CAAP;AACD;;;;EAjB2CnB,gB;;IAoBjCoB,uB,WAAAA,uB;;;AACX,mCACIC,KADJ,EAEIF,aAFJ,EAGIG,UAHJ,EAIIC,iBAJJ,EAKIC,SALJ,EAMIC,gBANJ,EAM+B;AAAA;;AAAA,mJACvBJ,MAAMf,UAAN,CAAiBoB,KADM,EACCC,SADD;;AAE7B,WAAKR,aAAL,GAAqBA,aAArB;AACA,WAAKG,UAAL,GAAkBA,UAAlB;AACA,WAAKC,iBAAL,GAAyBA,iBAAzB;AACA,WAAKC,SAAL,GAAiBA,SAAjB;AACA,WAAKC,gBAAL,GAAwBA,gBAAxB;AAN6B;AAO9B;;;EAd0CzB,gB;;AAuB7C;AACA;AACA;;;IACaiB,wB,WAAAA,wB;;;AACX,oCACIE,aADJ,EAEIG,UAFJ,EAGIC,iBAHJ,EAIIC,SAJJ,EAKIC,gBALJ,EAK+B;AAAA;;AAC7B,6BAAUH,sBAAsBrB,gBAAtB,IAA0CqB,kCAA1C,IACPE,qBAAqBvB,gBADd,IACkCuB,iCAD5C;AAEA,6BAAUF,sBAAsBtB,gBAAtB,IAA0CwB,qBAAqBxB,gBAAzE;;AAH6B,sJAIvBwB,oCAA6BA,SAA7B,GAAyCA,UAAU1B,KAJ5B;;AAK7B,YAAKqB,aAAL,GAAqBA,aAArB;AACA,YAAKG,UAAL,GAAkBA,UAAlB;AACA,YAAKC,iBAAL,GAAyBA,iBAAzB;AACA,YAAKC,SAAL,GAAiBA,SAAjB;AACA,YAAKC,gBAAL,GAAwBA,gBAAxB;AAT6B;AAU9B;;;EAhB2CxB,gB","file":"completions.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { AbstractValue, Value } from \"./values/index.js\";\nimport type { Effects, Realm } from \"./realm.js\";\nimport invariant from \"./invariant.js\";\n\nexport class Completion {\n  constructor(value: Value, target?: ?string) {\n    this.value  = value;\n    this.target = target;\n  }\n\n  value: Value;\n  target: ?string;\n}\n// Abrupt completions are thrown as exeptions, to make it a easier\n// to quickly get to the matching high level construct.\nexport class AbruptCompletion extends Completion {}\n// Normal completions are returned just like spec completions\nexport class NormalCompletion extends Completion {}\n\nexport class ThrowCompletion extends AbruptCompletion {\n  constructor(value: Value, nativeStack?: ?string) {\n    super(value);\n    invariant(value.getType() !== value.$Realm.intrinsics.__IntrospectionError ||\n      this instanceof IntrospectionThrowCompletion);\n    this.nativeStack = nativeStack || new Error().stack;\n  }\n\n  nativeStack: string;\n}\nexport class IntrospectionThrowCompletion extends ThrowCompletion {\n  reason: void | \"readonly\";\n}\nexport class ContinueCompletion extends AbruptCompletion {}\nexport class BreakCompletion extends AbruptCompletion {}\nexport class ReturnCompletion extends AbruptCompletion {}\n\nexport class ComposedAbruptCompletion extends AbruptCompletion {\n  constructor(\n      priorCompletion: NormalCompletion,\n      subsequentCompletion: AbruptCompletion) {\n    super(subsequentCompletion.value, subsequentCompletion.target);\n    this.priorCompletion = priorCompletion;\n    this.subsequentCompletion = subsequentCompletion;\n  }\n\n  priorCompletion: NormalCompletion;\n  subsequentCompletion: AbruptCompletion;\n\n  createIntrospectionErrorThrowCompletion(): IntrospectionThrowCompletion {\n    if (this.priorCompletion instanceof PossiblyNormalCompletion)\n      return AbstractValue.createIntrospectionErrorThrowCompletion(this.priorCompletion.joinCondition);\n    invariant(this.subsequentCompletion instanceof PossiblyNormalCompletion);\n    return AbstractValue.createIntrospectionErrorThrowCompletion(this.subsequentCompletion.joinCondition);\n  }\n}\n\nexport class JoinedAbruptCompletions extends AbruptCompletion {\n  constructor(\n      realm: Realm,\n      joinCondition: AbstractValue,\n      consequent: AbruptCompletion,\n      consequentEffects: Effects,\n      alternate: AbruptCompletion,\n      alternateEffects: Effects) {\n    super(realm.intrinsics.empty, undefined);\n    this.joinCondition = joinCondition;\n    this.consequent = consequent;\n    this.consequentEffects = consequentEffects;\n    this.alternate = alternate;\n    this.alternateEffects = alternateEffects;\n  }\n\n  joinCondition: AbstractValue;\n  consequent: AbruptCompletion;\n  consequentEffects: Effects;\n  alternate: AbruptCompletion;\n  alternateEffects: Effects;\n}\n\n// Possibly normal completions have to be treated like normal completions\n// and are thus never thrown. At the end of a try block or loop body, however,\n// action must be taken to deal with the possibly abrupt case of the completion.\nexport class PossiblyNormalCompletion extends NormalCompletion {\n  constructor(\n      joinCondition: AbstractValue,\n      consequent: Completion | Value,\n      consequentEffects: Effects,\n      alternate: Completion | Value,\n      alternateEffects: Effects) {\n    invariant(consequent instanceof NormalCompletion || consequent instanceof Value ||\n       alternate instanceof NormalCompletion || alternate instanceof Value);\n    invariant(consequent instanceof AbruptCompletion || alternate instanceof AbruptCompletion);\n    super(alternate instanceof Value ? alternate : alternate.value);\n    this.joinCondition = joinCondition;\n    this.consequent = consequent;\n    this.consequentEffects = consequentEffects;\n    this.alternate = alternate;\n    this.alternateEffects = alternateEffects;\n  }\n\n  joinCondition: AbstractValue;\n  consequent: Completion | Value;\n  consequentEffects: Effects;\n  alternate: Completion | Value;\n  alternateEffects: Effects;\n}\n"]}