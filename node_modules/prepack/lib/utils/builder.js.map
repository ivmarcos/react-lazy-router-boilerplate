{"version":3,"sources":["../../src/utils/builder.js"],"names":["buildExpressionTemplate","code","template","obj","undefined","result","expression","Error"],"mappings":";;;;;kBAcwBA,uB;;AAHxB;;;;;;AAGe,SAASA,uBAAT,CAAiCC,IAAjC,EAA6E;AAC1F,MAAIC,iBAAJ;AACA,SAAO,UAAUC,GAAV,EAAyC;AAC9C,QAAID,aAAaE,SAAjB,EAA4BF,WAAW,6BAAcD,IAAd,CAAX;AAC5B,QAAII,SAASH,SAASC,GAAT,EAAcG,UAA3B;AACA,QAAID,WAAWD,SAAf,EAA0B,MAAM,IAAIG,KAAJ,CAAU,4CAA4CN,IAAtD,CAAN;AAC1B,WAAOI,MAAP;AACD,GALD;AAMD,C,CAtBD","file":"builder.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport buildTemplate from \"babel-template\";\nimport type { BabelNodeExpression } from \"babel-types\";\n\nexport default function buildExpressionTemplate(code: string): (any => BabelNodeExpression) {\n  let template;\n  return function (obj: any): BabelNodeExpression {\n    if (template === undefined) template = buildTemplate(code);\n    let result = template(obj).expression;\n    if (result === undefined) throw new Error(\"Code does not represent an expression: \" + code);\n    return result;\n  };\n}\n"]}