{"version":3,"sources":["../../src/utils/generator.js"],"names":["base62","t","Generator","realm","isPartial","realmPreludeGenerator","preludeGenerator","body","key","canBeIdentifier","index","Number","parseInt","toString","numericLiteral","keyIsAscii","test","isValidIdentifier","identifier","stringLiteral","length","value","declaredGlobals","add","emitGlobalAssignment","push","args","buildNode","valueNode","expressionStatement","assignmentExpression","globalReference","unaryExpression","object","propName","getAsPropertyNameExpression","objectNode","memberExpression","isIdentifier","desc","enumerable","configurable","writable","descValue","emitPropertyAssignment","Object","assign","$Realm","intrinsics","undefined","get","set","getNode","setNode","descProps","objectProperty","booleanLiteral","callExpression","memoizeReference","objectExpression","createCallee","values","method","emitCall","map","v","violationConditionFn","appendLastToInvariantFn","nodes","throwString","last","pop","binaryExpression","condition","throwblock","blockStatement","throwStatement","newExpression","ifStatement","types","kind","derive","buildNode_","Function","id","nameGenerator","generate","derivedIds","name","declaresDerivedId","variableDeclaration","variableDeclarator","res","createAbstract","type","getType","intrinsicName","typeofString","emitInvariant","logicalExpression","nullLiteral","node","context","bodyEntry","boundArg","i","serializeValue","reasons","announceDeclaredDerivedId","NameGenerator","forbiddenNames","debugNames","uniqueSuffix","prefix","uidCounter","debugSuffix","encode","replace","has","PreludeGenerator","prelude","Map","memoizedRefs","Set","usesThis","str","split","thisExpression","reduce","obj","prop","globalScope","keyNode","ref","convertStringToMember"],"mappings":"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","file":"generator.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport { AbstractValue, Value, FunctionValue, UndefinedValue, NullValue, StringValue, BooleanValue, NumberValue, SymbolValue, ObjectValue, ConcreteValue } from \"../values/index.js\";\nimport type { AbstractValueBuildNodeFunction } from \"../values/AbstractValue.js\";\nimport type { Descriptor } from \"../types.js\";\nimport { TypesDomain, ValuesDomain } from \"../domains/index.js\";\nimport * as base62 from \"base62\";\nimport * as t from \"babel-types\";\nimport invariant from \"../invariant.js\";\nimport type { BabelNodeExpression, BabelNodeIdentifier, BabelNodeStatement, BabelNodeMemberExpression, BabelNodeThisExpression } from \"babel-types\";\n\nexport type SerializationContext = {\n  reasons: Array<string>;\n  serializeValue: Value => BabelNodeExpression;\n  startBody: () => Array<BabelNodeStatement>;\n  endBody: Array<BabelNodeStatement> => void;\n  announceDeclaredDerivedId: BabelNodeIdentifier => void;\n}\n\nexport type GeneratorBuildNodeFunction = (Array<BabelNodeExpression>, SerializationContext) => BabelNodeStatement;\n\nexport type BodyEntry = {\n  declaresDerivedId?: BabelNodeIdentifier;\n  args: Array<Value>;\n  buildNode: GeneratorBuildNodeFunction;\n}\n\nexport class Generator {\n  constructor(realm: Realm) {\n    invariant(realm.isPartial);\n    let realmPreludeGenerator = realm.preludeGenerator;\n    invariant(realmPreludeGenerator);\n    this.preludeGenerator = realmPreludeGenerator;\n    this.realm = realm;\n    this.body = [];\n  }\n\n  realm: Realm;\n  body: Array<BodyEntry>;\n  preludeGenerator: PreludeGenerator;\n\n  getAsPropertyNameExpression(key: string, canBeIdentifier: boolean = true) {\n    // If key is a non-negative numeric string literal, parse it and set it as a numeric index instead.\n    let index = Number.parseInt(key, 10);\n    if (index >= 0 && index.toString() === key) {\n      return t.numericLiteral(index);\n    }\n\n    if (canBeIdentifier) {\n      // TODO: revert this when Unicode identifiers are supported by all targetted JavaScript engines\n      let keyIsAscii = /^[\\u0000-\\u007f]*$/.test(key);\n      if (t.isValidIdentifier(key) && keyIsAscii) return t.identifier(key);\n    }\n\n    return t.stringLiteral(key);\n  }\n\n  empty() {\n    return !this.body.length;\n  }\n\n  emitGlobalDeclaration(key: string, value: Value) {\n    this.preludeGenerator.declaredGlobals.add(key);\n    this.emitGlobalAssignment(key, value);\n  }\n\n  emitGlobalAssignment(key: string, value: Value) {\n    this.body.push({\n      args: [value],\n      buildNode: ([valueNode]) => t.expressionStatement(t.assignmentExpression(\n        \"=\",\n        this.preludeGenerator.globalReference(key, true),\n        valueNode))\n    });\n  }\n\n  emitGlobalDelete(key: string) {\n    this.body.push({\n      args: [],\n      buildNode: ([]) => t.expressionStatement(t.unaryExpression(\n        \"delete\",\n        this.preludeGenerator.globalReference(key, true)))\n    });\n  }\n\n  emitPropertyAssignment(object: Value, key: string, value: Value) {\n    let propName = this.getAsPropertyNameExpression(key);\n    this.body.push({\n      args: [object, value],\n      buildNode: ([objectNode, valueNode]) => t.expressionStatement(t.assignmentExpression(\n        \"=\",\n        t.memberExpression(objectNode, propName, !t.isIdentifier(propName)),\n        valueNode))\n    });\n  }\n\n  emitDefineProperty(object: Value, key: string, desc: Descriptor) {\n    if (desc.enumerable && desc.configurable && desc.writable && desc.value) {\n      let descValue = desc.value;\n      invariant(descValue instanceof Value);\n      this.emitPropertyAssignment(object, key, descValue);\n    } else {\n      desc = Object.assign({}, desc);\n      this.body.push({\n        args: [object, desc.value || object.$Realm.intrinsics.undefined, desc.get || object.$Realm.intrinsics.undefined, desc.set || object.$Realm.intrinsics.undefined],\n        buildNode: ([objectNode, valueNode, getNode, setNode]) => {\n          let descProps = [];\n          descProps.push(t.objectProperty(t.identifier(\"enumerable\"), t.booleanLiteral(!!desc.enumerable)));\n          descProps.push(t.objectProperty(t.identifier(\"configurable\"), t.booleanLiteral(!!desc.configurable)));\n          if (!desc.get && !desc.set) {\n            descProps.push(t.objectProperty(t.identifier(\"writable\"), t.booleanLiteral(!!desc.writable)));\n            descProps.push(t.objectProperty(t.identifier(\"value\"), valueNode));\n          } else {\n            descProps.push(t.objectProperty(t.identifier(\"get\"), getNode));\n            descProps.push(t.objectProperty(t.identifier(\"set\"), setNode));\n          }\n          return t.expressionStatement(t.callExpression(\n            this.preludeGenerator.memoizeReference(\"Object.defineProperty\"),\n            [objectNode, t.stringLiteral(key), t.objectExpression(descProps)]\n          ));\n        }\n      });\n    }\n  }\n\n  emitPropertyDelete(object: Value, key: string) {\n    let propName = this.getAsPropertyNameExpression(key);\n    this.body.push({\n      args: [object],\n      buildNode: ([objectNode]) => t.expressionStatement(t.unaryExpression(\n        \"delete\",\n        t.memberExpression(objectNode, propName, !t.isIdentifier(propName))))\n    });\n  }\n\n  emitCall(createCallee: () => BabelNodeExpression, args: Array<Value>) {\n    this.body.push({\n      args,\n      buildNode: values => t.expressionStatement(\n        t.callExpression(createCallee(), [...values]))\n    });\n  }\n\n  emitConsoleLog(method: \"log\" | \"warn\" | \"error\", args: Array<string | ConcreteValue>) {\n    this.emitCall(\n      () => t.memberExpression(t.identifier(\"console\"), t.identifier(method)),\n      args.map(v => typeof v === \"string\" ? new StringValue(this.realm, v) : v));\n  }\n\n  // Pushes \"if (violationConditionFn()) { throw new Error(\"invariant violation\"); }\"\n  emitInvariant(args: Array<Value>, violationConditionFn: (Array<BabelNodeExpression> => BabelNodeExpression), appendLastToInvariantFn?: (BabelNodeExpression => BabelNodeExpression)): void {\n    this.body.push({\n      args,\n      buildNode: (nodes: Array<BabelNodeExpression>) => {\n        let throwString = t.stringLiteral(\"Prepack model invariant violation\");\n        if (appendLastToInvariantFn) {\n          let last = nodes.pop();\n          throwString = t.binaryExpression(\"+\",\n            t.stringLiteral(\"Prepack model invariant violation: \"),\n            appendLastToInvariantFn(last));\n        }\n        let condition = violationConditionFn(nodes);\n        let throwblock = t.blockStatement([\n          t.throwStatement(\n            t.newExpression(\n              t.identifier(\"Error\"),\n              [throwString]))\n          ]);\n        return t.ifStatement(condition, throwblock);\n      } });\n  }\n\n  emitCallAndCaptureResult(types: TypesDomain, values: ValuesDomain, createCallee: () => BabelNodeExpression, args: Array<Value>, kind?: string): AbstractValue {\n    return this.derive(types, values, args,\n      nodes => t.callExpression(createCallee(), nodes));\n  }\n\n  derive(types: TypesDomain, values: ValuesDomain, args: Array<Value>, buildNode_: AbstractValueBuildNodeFunction | BabelNodeExpression, kind?: string): AbstractValue {\n    invariant(buildNode_ instanceof Function || args.length === 0);\n    let id = t.identifier(this.preludeGenerator.nameGenerator.generate(\"derived\"));\n    this.preludeGenerator.derivedIds.set(id.name, args);\n    this.body.push({\n      declaresDerivedId: id,\n      args,\n      buildNode: (nodes: Array<BabelNodeExpression>) => t.variableDeclaration(\"var\", [\n        t.variableDeclarator(id, (buildNode_: any) instanceof Function ? ((buildNode_: any): AbstractValueBuildNodeFunction)(nodes) : ((buildNode_: any): BabelNodeExpression))\n      ])\n    });\n    let res = this.realm.createAbstract(types, values, args, id, kind);\n    let type = types.getType();\n    res.intrinsicName = id.name;\n    let typeofString;\n    if (type === FunctionValue) typeofString = \"function\";\n    else if (type === UndefinedValue) invariant(false);\n    else if (type === NullValue) invariant(false);\n    else if (type === StringValue) typeofString = \"string\";\n    else if (type === BooleanValue) typeofString = \"boolean\";\n    else if (type === NumberValue) typeofString = \"number\";\n    else if (type === SymbolValue) typeofString = \"symbol\";\n    else if (type === ObjectValue) typeofString = \"object\";\n    if (typeofString !== undefined) {\n      // Verify that the types are as expected, a failure of this invariant\n      // should mean the model is wrong.\n      this.emitInvariant(\n        [res, res],\n        (nodes) => {\n          invariant(typeofString !== undefined);\n          let condition =\n            t.binaryExpression(\"!==\",\n              t.unaryExpression(\"typeof\", nodes[0]), t.stringLiteral(typeofString));\n          if (typeofString === \"object\") {\n            condition =\n              t.logicalExpression(\"&&\", condition,\n                t.binaryExpression(\"!==\",\n                  t.unaryExpression(\"typeof\", nodes[0]), t.stringLiteral(\"function\")));\n            condition =\n              t.logicalExpression(\"||\", condition,\n                t.binaryExpression(\"===\", nodes[0], t.nullLiteral()));\n          }\n          return condition;\n        },\n        (node) => node);\n    }\n\n    return res;\n  }\n\n  serialize(body: Array<BabelNodeStatement>, context: SerializationContext) {\n    for (let bodyEntry of this.body) {\n      let nodes = bodyEntry.args.map((boundArg, i) => context.serializeValue(boundArg, context.reasons));\n      body.push(bodyEntry.buildNode(nodes, context));\n      let id = bodyEntry.declaresDerivedId;\n      if (id !== undefined) context.announceDeclaredDerivedId(id);\n    }\n  }\n}\n\nexport class NameGenerator {\n  constructor(forbiddenNames: Set<string>, debugNames: boolean, uniqueSuffix: string, prefix: string) {\n    this.prefix = prefix;\n    this.uidCounter = 0;\n    this.debugNames = debugNames;\n    this.forbiddenNames = forbiddenNames;\n    this.uniqueSuffix = uniqueSuffix;\n  }\n  prefix: string;\n  uidCounter: number;\n  debugNames: boolean;\n  forbiddenNames: Set<string>;\n  uniqueSuffix: string;\n  generate(debugSuffix: ?string): string {\n    let id;\n    do {\n      id = this.prefix + base62.encode(this.uidCounter++);\n      if (this.uniqueSuffix.length > 0) id += this.uniqueSuffix;\n      if (this.debugNames) {\n        if (debugSuffix)\n          id += \"_\" + debugSuffix.replace(/[.,:]/g, \"_\");\n        else\n          id += \"_\";\n      }\n    } while (this.forbiddenNames.has(id));\n    return id;\n  }\n}\n\nexport class PreludeGenerator {\n  constructor(debugNames: ?boolean, uniqueSuffix: ?string) {\n    this.prelude = [];\n    this.derivedIds = new Map();\n    this.memoizedRefs = new Map();\n    this.nameGenerator = new NameGenerator(new Set(), !!debugNames, uniqueSuffix || \"\", \"_$\");\n    this.usesThis = false;\n    this.declaredGlobals = new Set();\n  }\n\n  prelude: Array<BabelNodeStatement>;\n  derivedIds: Map<string, Array<Value>>;\n  memoizedRefs: Map<string, BabelNodeIdentifier | BabelNodeMemberExpression | BabelNodeThisExpression>;\n  nameGenerator: NameGenerator;\n  usesThis: boolean;\n  declaredGlobals: Set<string>;\n\n  createNameGenerator(prefix: string): NameGenerator {\n    return new NameGenerator(this.nameGenerator.forbiddenNames, this.nameGenerator.debugNames, this.nameGenerator.uniqueSuffix, prefix);\n  }\n\n  convertStringToMember(str: string): BabelNodeIdentifier | BabelNodeMemberExpression | BabelNodeThisExpression {\n    return str\n      .split(\".\")\n      .map((name) => {\n        if (name === \"::global\") {\n          this.usesThis = true;\n          return t.thisExpression();\n        } else {\n          return t.identifier(name);\n        }\n      })\n      .reduce((obj, prop) => t.memberExpression(obj, prop));\n  }\n\n  globalReference(key: string, globalScope: boolean = false) {\n    if (globalScope && t.isValidIdentifier(key)) return t.identifier(key);\n    let keyNode = t.isValidIdentifier(key) ? t.identifier(key) : t.stringLiteral(key);\n    return t.memberExpression(this.memoizeReference(\"::global\"), keyNode, !t.isIdentifier(keyNode));\n  }\n\n  memoizeReference(key: string): BabelNodeIdentifier | BabelNodeMemberExpression | BabelNodeThisExpression {\n    let ref = this.memoizedRefs.get(key);\n    if (ref) return ref;\n\n    ref = t.identifier(this.nameGenerator.generate(key));\n    this.prelude.push(t.variableDeclaration(\"var\", [\n      t.variableDeclarator(ref, this.convertStringToMember(key))\n    ]));\n    this.memoizedRefs.set(key, ref);\n    return ref;\n  }\n}\n"]}