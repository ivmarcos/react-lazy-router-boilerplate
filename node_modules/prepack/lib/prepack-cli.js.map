{"version":3,"sources":["../src/prepack-cli.js"],"names":["HELP_STR","map","v","join","args","Array","from","process","argv","splice","inputFilename","outputFilename","compatibility","mathRandomSeed","inputSourceMap","outputSourceMap","flags","speculate","trace","debugNames","singlePass","logStatistics","logModules","delayUnsupportedRequires","internalDebug","length","arg","shift","startsWith","slice","includes","console","error","exit","log","serialized","inputSourceMapFilename","sourceMaps","code","filename","writeFileSync","JSON","stringify","x"],"mappings":"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","file":"prepack-cli.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { prepackFileSync, InitializationError } from \"./prepack-node.js\";\nimport { CompatibilityValues, type Compatibility } from './types.js';\nimport fs from \"fs\";\n\nlet HELP_STR = `\n  input    The name of the file to run Prepack over (for web please provide the single js bundle file)\n  --out    The name of the output file\n  --compatibility    The target environment for Prepack [${CompatibilityValues.map(v => `\"${v}\"`).join(', ')}]\n  --mathRandomSeed    If you want Prepack to evaluate Math.random() calls, please provide a seed.\n  --srcmapIn    The input sourcemap filename. If present, Prepack will output a sourcemap that maps from the original file (pre-input sourcemap) to Prepack's output\n  --srcmapOut    The output sourcemap filename.\n  --debugNames    Changes the output of Prepack so that for named functions and variables that get emitted into Prepack's output, the original name is appended as a suffix to Prepack's generated identifier.\n  --singlePass    Perform only one serialization pass. Disables some optimizations on Prepack's output. This will speed up Prepacking but result in code with less inlining.\n  --speculate    Enable speculative initialization of modules (for the module system Prepack has builtin knowledge about). Prepack will try to execute all factory functions it is able to.\n  --trace    Traces the order of module initialization.\n`;\nlet args = Array.from(process.argv);\nargs.splice(0, 2);\nlet inputFilename;\nlet outputFilename;\nlet compatibility: Compatibility;\nlet mathRandomSeed;\nlet inputSourceMap;\nlet outputSourceMap;\nlet flags = {\n  speculate: false,\n  trace: false,\n  debugNames: false,\n  singlePass: false,\n  logStatistics: false,\n  logModules: false,\n  delayUnsupportedRequires: false,\n  internalDebug: false,\n};\n\nwhile (args.length) {\n  let arg = args[0]; args.shift();\n  if (!arg.startsWith(\"--\")) {\n    inputFilename = arg;\n  } else {\n    arg = arg.slice(2);\n    switch (arg) {\n      case \"out\":\n        arg = args[0]; args.shift();\n        outputFilename = arg;\n        break;\n      case \"compatibility\":\n        arg = args[0]; args.shift();\n        if (!CompatibilityValues.includes(arg)) {\n          console.error(`Unsupported compatibility: ${arg}`);\n          process.exit(1);\n        }\n        compatibility = (arg: any);\n        break;\n      case \"mathRandomSeed\":\n        mathRandomSeed = args[0]; args.shift();\n        break;\n      case \"srcmapIn\":\n        inputSourceMap = args[0]; args.shift();\n        break;\n      case \"srcmapOut\":\n        outputSourceMap = args[0]; args.shift();\n        break;\n      case \"help\":\n        console.log(\"Usage: prepack.js [ --out output.js ] [ --compatibility jsc ] [ --mathRandomSeed seedvalue ] [ --srcmapIn inputMap ] [ --srcmapOut outputMap ] [ --speculate ] [ --trace ] [ -- | input.js ] [ --singlePass ] [ --debugNames ]\" + \"\\n\" + HELP_STR);\n        break;\n      default:\n        if (arg in flags) {\n          flags[arg] = true;\n        } else {\n          console.error(`Unknown option: ${arg}`);\n          process.exit(1);\n        }\n    }\n  }\n}\n\nif (!inputFilename) {\n  console.error(\"Missing input file.\");\n  process.exit(1);\n} else {\n  try {\n    let serialized = prepackFileSync(inputFilename, {\n      compatibility,\n      mathRandomSeed,\n      inputSourceMapFilename: inputSourceMap,\n      sourceMaps: !!outputSourceMap,\n      ...flags\n    });\n\n    let code = serialized.code;\n\n    if (code.length >= 1000 || outputFilename) {\n      let filename = outputFilename || (inputFilename + \"-processed.js\");\n      console.log(`Prepacked source code written to ${filename}.`);\n      fs.writeFileSync(filename, code);\n    }\n\n    if (code.length <= 1000 && !outputFilename) {\n      console.log(\"+++++++++++++++++ Prepacked source code\");\n      console.log(code);\n      console.log(\"=================\");\n    }\n\n    if (outputSourceMap) {\n      fs.writeFileSync(outputSourceMap, serialized.map ? JSON.stringify(serialized.map) : '');\n    }\n  } catch (x) {\n    if (x instanceof InitializationError) {\n      // Ignore InitializationError since they have already logged\n      // their errors to the console, but exit with an error code.\n      process.exit(1);\n    }\n    // For any other type of error, rethrow.\n    throw x;\n  }\n}\n"]}