{"version":3,"sources":["../../../src/intrinsics/ecma262/WeakSetPrototype.js"],"names":["realm","obj","defineNativeMethod","context","value","S","throwIfNotConcrete","createErrorThrowCompletion","intrinsics","TypeError","$WeakSetData","entries","e","undefined","push","false","i","length","true","defineNativeProperty","SymbolToStringTag","writable"],"mappings":"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","file":"WeakSetPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { StringValue, ObjectValue } from \"../../values/index.js\";\nimport { SameValuePartial, ThrowIfInternalSlotNotWritable } from \"../../methods/index.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function (realm: Realm, obj: ObjectValue): void {\n  // ECMA262 23.4.3.1\n  obj.defineNativeMethod(\"add\", 1, (context, [value]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(S) is not Object\");\n    }\n\n    // 3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError exception.\n    if (!S.$WeakSetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"S does not have a [[WeakSetData]] internal slot\");\n    }\n\n    // 4. If Type(value) is not Object, throw a TypeError exception.\n    value = value.throwIfNotConcrete();\n    if (!(value instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(value) is not Object\");\n    }\n\n    // 5. Let entries be the List that is S.[[WeakSetData]].\n    let entries = S.$WeakSetData;\n    invariant(entries != null);\n\n    // 6. Repeat for each e that is an element of entries,\n    for (let e of entries) {\n      // a. If e is not empty and SameValue(e, value) is true, then\n      if (e !== undefined && SameValuePartial(realm, e, value) === true) {\n        // i. Return S.\n        return S;\n      }\n    }\n\n    // 7. Append value as the last element of entries.\n    ThrowIfInternalSlotNotWritable(realm, S, \"$WeakSetData\");\n    entries.push(value);\n\n    // 8. Return S.\n    return S;\n  });\n\n  // ECMA262 23.4.3.3\n  obj.defineNativeMethod(\"delete\", 1, (context, [value]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(S) is not Object\");\n    }\n\n    // 3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError exception.\n    if (!S.$WeakSetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"S does not have a [[WeakSetData]] internal slot\");\n    }\n\n    // 4. If Type(value) is not Object, throw a TypeError exception.\n    value = value.throwIfNotConcrete();\n    if (!(value instanceof ObjectValue)) return realm.intrinsics.false;\n\n    // 5. Let entries be the List that is S.[[WeakSetData]].\n    let entries = S.$WeakSetData;\n    invariant(entries != null);\n\n    // 6. Repeat for each e that is an element of entries,\n    for (let i = 0; i < entries.length; ++i) {\n      let e = entries[i];\n\n      // a. If e is not empty and SameValue(e, value) is true, then\n      if (e !== undefined && SameValuePartial(realm, e, value) === true) {\n        ThrowIfInternalSlotNotWritable(realm, S, \"$WeakSetData\");\n\n        // i. Replace the element of entries whose value is e with an element whose value is empty.\n        entries[i] = undefined;\n\n        // ii. Return true.\n        return realm.intrinsics.true;\n      }\n    }\n\n    // 7. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.4.3.3\n  obj.defineNativeMethod(\"has\", 1, (context, [value]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(S) is not Object\");\n    }\n\n    // 3. If S does not have a [[WeakSetData]] internal slot, throw a TypeError exception.\n    if (!S.$WeakSetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"S does not have a [[WeakSetData]] internal slot\");\n    }\n\n    // 4. Let entries be the List that is S.[[WeakSetData]].\n    let entries = S.$WeakSetData;\n\n    // 5. If Type(value) is not Object, return false.\n    value = value.throwIfNotConcrete();\n    if (!(value instanceof ObjectValue)) return realm.intrinsics.false;\n\n    // 6. Repeat for each e that is an element of entries,\n    for (let e of entries) {\n      // a. If e is not empty and SameValue(e, value) is true, return true.\n      if (e !== undefined && SameValuePartial(realm, e, value) === true) return realm.intrinsics.true;\n    }\n\n    // 7. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.4.3.5\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"WeakSet\"), { writable: false });\n}\n"]}