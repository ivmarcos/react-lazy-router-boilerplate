{"version":3,"sources":["../../../src/intrinsics/ecma262/StringPrototype.js"],"names":["realm","obj","$StringData","intrinsics","emptyString","defineNativeProperty","zero","defineNativeMethod","context","pos","O","S","throwIfNotConcrete","position","size","length","charAt","NaN","charCodeAt","isCompatibleWith","MOBILE_JSC_VERSION","undefined","codePointAt","args","argCount","R","next","shift","nextString","searchString","endPosition","isRegExp","createErrorThrowCompletion","TypeError","searchStr","len","end","Math","min","max","searchLength","start","false","substr","true","searchLen","k","found","j","indexOf","numPos","isNaN","Infinity","lastIndexOf","that","That","localeCompare","regexp","matcher","SymbolMatch","mightBeUndefined","rx","form","f","RangeError","normalize","maxLength","fillString","intMaxLength","stringLength","filler","fillLen","truncatedStringFiller","repeat","ceil","count","n","isFinite","T","searchValue","replaceValue","replStr","replacer","SymbolReplace","string","functionalReplace","replaceValueString","search","matched","replValue","captures","tailPos","newString","searcher","SymbolSearch","intStart","intEnd","from","to","span","separator","limit","splitter","SymbolSplit","A","lengthA","lim","pow","s","p","z","q","e","substring","finalStart","finalEnd","frm","slice","toCase","type","locales","serialize","isPartial","createIntrospectionErrorThrowCompletion","trim","SymbolIterator","resultLength","name","color","url"],"mappings":"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","file":"StringPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../../realm.js\";\nimport { AbstractValue, UndefinedValue, NumberValue, ObjectValue, StringValue, NullValue } from \"../../values/index.js\";\nimport { IsCallable, IsRegExp } from \"../../methods/is.js\";\nimport { GetMethod, GetSubstitution } from \"../../methods/get.js\";\nimport { Call, Invoke } from \"../../methods/call.js\";\nimport { CreateStringIterator, CreateDataProperty, ArrayCreate, CreateHTML } from \"../../methods/create.js\";\nimport { RegExpCreate } from \"../../methods/regexp.js\";\nimport { ToString, ToStringPartial, thisStringValue, ToInteger, ToUint32, ToNumber, ToLength } from \"../../methods/to.js\";\nimport { SplitMatch, RequireObjectCoercible } from \"../../methods/abstract.js\";\nimport { HasSomeCompatibleType } from \"../../methods/has.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function (realm: Realm, obj: ObjectValue): ObjectValue {\n  // ECMA262 21.1.3\n  obj.$StringData = realm.intrinsics.emptyString;\n\n  // ECMA262 21.1.3\n  obj.defineNativeProperty(\"length\", realm.intrinsics.zero);\n\n  // ECMA262 21.1.3.1\n  obj.defineNativeMethod(\"charAt\", 1, (context, [pos]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let position be ? ToInteger(pos).\n    let position = ToInteger(realm, pos);\n\n    // 4. Let size be the number of elements in S.\n    let size = S.length;\n\n    // 5. If position < 0 or position ≥ size, return the empty String.\n    if (position < 0 || position >= size) return realm.intrinsics.emptyString;\n\n    // 6. Return a String of length 1, containing one code unit from S, namely the code unit at index position.\n    return new StringValue(realm, S.charAt(position));\n  });\n\n  // ECMA262 21.1.3.2\n  obj.defineNativeMethod(\"charCodeAt\", 1, (context, [pos]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let position be ? ToInteger(pos).\n    let position = ToInteger(realm, pos);\n\n    // 4. Let size be the number of elements in S.\n    let size = S.length;\n\n    // 5. If position < 0 or position ≥ size, return NaN.\n    if (position < 0 || position >= size) return realm.intrinsics.NaN;\n\n    // 6. Return a value of Number type, whose value is the code unit value of the element at index position\n    //    in the String S.\n    return new NumberValue(realm, S.charCodeAt(position));\n  });\n\n  // ECMA262 21.1.3.3\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n  obj.defineNativeMethod(\"codePointAt\", 1, (context, [pos]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let position be ? ToInteger(pos).\n    let position = ToInteger(realm, pos);\n\n    // 4. Let size be the number of elements in S.\n    let size = S.length;\n\n    // 5. If position < 0 or position ≥ size, return undefined.\n    if (position < 0 || position >= size) return realm.intrinsics.undefined;\n\n    // 6. Let first be the code unit value of the element at index position in the String S.\n    // 7. If first < 0xD800 or first > 0xDBFF or position+1 = size, return first.\n    // 8. Let second be the code unit value of the element at index position+1 in the String S.\n    // 9. If second < 0xDC00 or second > 0xDFFF, return first.\n    // 10. Return UTF16Decode(first, second).\n    return new NumberValue(realm, S.codePointAt(position));\n  });\n\n  // ECMA262 21.1.3.4\n  obj.defineNativeMethod(\"concat\", 1, (context, args, argCount) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let args be a List whose elements are the arguments passed to this function.\n    args = argCount === 0 ? [] : args;\n\n    // 4. Let R be S.\n    let R = S;\n\n    // 5. Repeat, while args is not empty\n    while (args.length) {\n      // a. Remove the first element from args and let next be the value of that element.\n      let next = args.shift();\n\n      // b. Let nextString be ? ToString(next).\n      let nextString = ToStringPartial(realm, next);\n\n      // c. Let R be the String value consisting of the code units of the previous value of R followed by the code units of nextString.\n      R = R + nextString;\n    }\n\n    // 6. Return R.\n    return new StringValue(realm, R);\n  });\n\n  // ECMA262 21.1.3.6\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n  obj.defineNativeMethod(\"endsWith\", 1, (context, [searchString, endPosition]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let isRegExp be ? IsRegExp(searchString).\n    let isRegExp = IsRegExp(realm, searchString);\n\n    // 4. If isRegExp is true, throw a TypeError exception.\n    if (isRegExp) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError,\n        \"String.prototype\");\n    }\n\n    // 5. Let searchStr be ? ToString(searchString).\n    let searchStr = ToStringPartial(realm, searchString);\n\n    // 6. Let len be the number of elements in S.\n    let len = S.length;\n\n    // 7. If endPosition is undefined, let pos be len, else let pos be ? ToInteger(endPosition).)\n    let pos;\n    if (!endPosition || endPosition instanceof UndefinedValue) {\n      pos = len;\n    } else {\n      pos = ToInteger(realm, endPosition.throwIfNotConcrete());\n    }\n\n    // 8. Let end be min(max(pos, 0), len).\n    let end = Math.min(Math.max(pos, 0), len);\n\n    // 9. Let searchLength be the number of elements in searchStr.\n    let searchLength = searchStr.length;\n\n    // 10. Let start be end - searchLength.\n    let start = end - searchLength;\n\n    // 11. If start is less than 0, return false.\n    if (start < 0) return realm.intrinsics.false;\n\n    // 12. If the sequence of elements of S starting at start of length searchLength is the same as the full\n    //     element sequence of searchStr, return true.\n    if (S.substr(start, searchLength) === searchStr) return realm.intrinsics.true;\n\n    // 13. Otherwise, return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 21.1.3.7\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n  obj.defineNativeMethod(\"includes\", 1, (context, [searchString, position]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let isRegExp be ? IsRegExp(searchString).\n    let isRegExp = IsRegExp(realm, searchString);\n\n    // 4. If isRegExp is true, throw a TypeError exception.\n    if (isRegExp) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError,\n        \"String.prototype\");\n    }\n\n    // 5. Let searchStr be ? ToString(searchString).\n    let searchStr = ToStringPartial(realm, searchString);\n\n    // 6. Let pos be ? ToInteger(position). (If position is undefined, this step produces the value 0.)\n    let pos = ToInteger(realm, position || realm.intrinsics.undefined);\n\n    // 7. Let len be the number of elements in S.\n    let len = S.length;\n\n    // 8. Let start be min(max(pos, 0), len).\n    let start = Math.min(Math.max(pos, 0), len);\n\n    // 9. Let searchLen be the number of elements in searchStr.\n    let searchLen = searchStr.length;\n\n    // 10. If there exists any integer k not smaller than start such that k + searchLen is not greater than\n    //     len, and for all nonnegative integers j less than searchLen, the code unit at index k+j of S is the\n    //     same as the code unit at index j of searchStr, return true; but if there is no such integer k,\n    //     return false.\n    if (searchLen === 0) {\n      return realm.intrinsics.true;\n    } else {\n      for (let k = start; k + searchLen <= len; ++k) {\n        let found = true;\n        for (let j = 0; j < searchLen; ++j) {\n          if (S.charCodeAt(k + j) !== searchStr.charCodeAt(j)) {\n            found = false;\n          }\n        }\n        if (found) return realm.intrinsics.true;\n      }\n      return realm.intrinsics.false;\n    }\n  });\n\n  // ECMA262 21.1.3.8\n  obj.defineNativeMethod(\"indexOf\", 1, (context, [searchString, position]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let searchStr be ? ToString(searchString).\n    let searchStr = ToStringPartial(realm, searchString);\n\n    // 4. Let pos be ? ToInteger(position). (If position is undefined, this step produces the value 0.)\n    let pos = position ? ToInteger(realm, position) : 0;\n\n    // 5. Let len be the number of elements in S.\n    // 6. Let start be min(max(pos, 0), len).\n    // 7. Let searchLen be the number of elements in searchStr.\n    // 8. Return the smallest possible integer k not smaller than start such that k+searchLen is not greater\n    //    than len, and for all nonnegative integers j less than searchLen, the code unit at index k+j of S is\n    //    the same as the code unit at index j of searchStr; but if there is no such integer k, return the\n    //    value -1.\n    return new NumberValue(realm, S.indexOf(searchStr, pos));\n  });\n\n  // ECMA262 21.1.3.9\n  obj.defineNativeMethod(\"lastIndexOf\", 1, (context, [searchString, position]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let searchStr be ? ToString(searchString).\n    let searchStr = ToStringPartial(realm, searchString);\n\n    // 4. Let numPos be ? ToNumber(position). (If position is undefined, this step produces the value NaN.)\n    let numPos = ToNumber(realm, position || realm.intrinsics.undefined);\n\n    // 5. If numPos is NaN, let pos be +∞; otherwise, let pos be ToInteger(numPos).\n    let pos;\n    if (isNaN(numPos)) {\n      pos = Infinity;\n    } else {\n      pos = ToInteger(realm, numPos);\n    }\n\n    // 6. Let len be the number of elements in S.\n    // 7. Let start be min(max(pos, 0), len).\n    // 8. Let searchLen be the number of elements in searchStr.\n    // 9. Return the largest possible nonnegative integer k not larger than start such that k+searchLen is not\n    //    greater than len, and for all nonnegative integers j less than searchLen, the code unit at index k+j\n    //    of S is the same as the code unit at index j of searchStr; but if there is no such integer k, return\n    //    the value -1.\n    return new NumberValue(realm, S.lastIndexOf(searchStr, pos));\n  });\n\n  // ECMA262 21.1.3.10\n  obj.defineNativeMethod(\"localeCompare\", 1, (context, [that]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let That be ? ToString(that).\n    let That = ToStringPartial(realm, that);\n\n    return new NumberValue(realm, S.localeCompare(That));\n  });\n\n  // ECMA262 21.1.3.11\n  obj.defineNativeMethod(\"match\", 1, (context, [regexp]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. If regexp is neither undefined nor null, then\n    if (!HasSomeCompatibleType(realm, regexp, UndefinedValue, NullValue)) {\n      // a. Let matcher be ? GetMethod(regexp, @@match).\n      let matcher = GetMethod(realm, regexp, realm.intrinsics.SymbolMatch);\n\n      // b. If matcher is not undefined, then\n      if (!matcher.mightBeUndefined()) {\n        // i. Return ? Call(matcher, regexp, « O »).\n        return Call(realm, matcher, regexp, [O]);\n      }\n      matcher.throwIfNotConcrete();\n    }\n\n    // 3. Let S be ? ToString(O).\n    let S = new StringValue(realm, ToStringPartial(realm, O));\n\n    // 4. Let rx be ? RegExpCreate(regexp, undefined).\n    let rx = RegExpCreate(realm, regexp, undefined);\n\n    // 5. Return ? Invoke(rx, @@match, « S »).\n    return Invoke(realm, rx, realm.intrinsics.SymbolMatch, [S]);\n  });\n\n  // ECMA262 21.1.3.12\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n  obj.defineNativeMethod(\"normalize\", 0, (context, [form]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. If form is not provided or form is undefined, let form be \"NFC\".\n    if (!form || form instanceof UndefinedValue) form = new StringValue(realm, \"NFC\");\n\n    // 4. Let f be ? ToString(form).\n    let f = ToStringPartial(realm, form);\n\n    // 5. If f is not one of \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", throw a RangeError exception.\n    if (f !== \"NFC\" && f !== \"NFD\" && f !== \"NFKC\" && f !== \"NFKD\") {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError);\n    }\n\n    // 6. Let ns be the String value that is the result of normalizing S into the normalization form named by\n    //    f as specified in http://www.unicode.org/reports/tr15/tr15-29.html.\n    // 7. Return ns.\n    return new StringValue(realm, S.normalize(f));\n  });\n\n  // ECMA262 21.1.3.13\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n  obj.defineNativeMethod(\"padEnd\", 1, (context, [maxLength, fillString]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let intMaxLength be ? ToLength(maxLength).\n    let intMaxLength = ToLength(realm, maxLength);\n\n    // 4. Let stringLength be the number of elements in S.\n    let stringLength = S.length;\n\n    // 5. If intMaxLength is not greater than stringLength, return S.\n    if (intMaxLength <= stringLength) return new StringValue(realm, S);\n\n    let filler;\n    // 6. If fillString is undefined, let filler be a String consisting solely of the code unit 0x0020 (SPACE).\n    if (!fillString || fillString instanceof UndefinedValue) filler = \" \";\n    // 7. Else, let filler be ? ToString(fillString).\n    else filler = ToStringPartial(realm, fillString);\n\n    // 8. If filler is the empty String, return S.\n    if (filler === \"\") return new StringValue(realm, S);\n\n    // 9. Let fillLen be intMaxLength - stringLength.\n    let fillLen = intMaxLength - stringLength;\n\n    // 10. Let truncatedStringFiller be a new String value consisting of repeated concatenations of filler truncated to length fillLen.\n    let truncatedStringFiller = filler.repeat(Math.ceil(fillLen / filler.length)).substr(0, fillLen);\n\n    // 11. Return a new String value computed by the concatenation of S and truncatedStringFiller.\n    return new StringValue(realm, S + truncatedStringFiller);\n  });\n\n  // ECMA262 21.1.3.14\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n  obj.defineNativeMethod(\"padStart\", 1, (context, [maxLength, fillString]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let intMaxLength be ? ToLength(maxLength).\n    let intMaxLength = ToLength(realm, maxLength);\n\n    // 4. Let stringLength be the number of elements in S.\n    let stringLength = S.length;\n\n    // 5. If intMaxLength is not greater than stringLength, return S.\n    if (intMaxLength <= stringLength) return new StringValue(realm, S);\n\n    let filler;\n    // 6. If fillString is undefined, let filler be a String consisting solely of the code unit 0x0020 (SPACE).\n    if (!fillString || fillString instanceof UndefinedValue) filler = \" \";\n    // 7. Else, let filler be ? ToString(fillString).\n    else filler = ToStringPartial(realm, fillString);\n\n    // 8. If filler is the empty String, return S.\n    if (filler === \"\") return new StringValue(realm, S);\n\n    // 9. Let fillLen be intMaxLength - stringLength.\n    let fillLen = intMaxLength - stringLength;\n\n    // 10. Let truncatedStringFiller be a new String value consisting of repeated concatenations of filler truncated to length fillLen.\n    let truncatedStringFiller = filler.repeat(Math.ceil(fillLen / filler.length)).substr(0, fillLen);\n\n    // 11. Return a new String value computed by the concatenation of truncatedStringFiller and S.\n    return new StringValue(realm, truncatedStringFiller + S);\n  });\n\n  // ECMA262 21.1.3.13\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n  obj.defineNativeMethod(\"repeat\", 1, (context, [count]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let n be ? ToInteger(count).\n    let n = ToInteger(realm, count);\n\n    // 4. If n < 0, throw a RangeError exception.\n    if (n < 0) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError);\n    }\n\n    // 5. If n is +∞, throw a RangeError exception.\n    if (!isFinite(n)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError);\n    }\n\n    // 6. Let T be a String value that is made from n copies of S appended together. If n is 0, T is the empty String.\n    let T = \"\";\n    if (S) while (n--) T += S;\n\n    // 7. Return T.\n    return new StringValue(realm, T);\n  });\n\n  // ECMA262 21.1.3.14\n  obj.defineNativeMethod(\"replace\", 2, (context, [searchValue, replaceValue]) => {\n    let replStr;\n\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. If searchValue is neither undefined nor null, then\n    if (!HasSomeCompatibleType(realm, searchValue, NullValue, UndefinedValue)) {\n      // a. Let replacer be ? GetMethod(searchValue, @@replace).\n      let replacer = GetMethod(realm, searchValue, realm.intrinsics.SymbolReplace);\n\n      // b. If replacer is not undefined, then\n      if (!(replacer instanceof UndefinedValue)) {\n        // i. Return ? Call(replacer, searchValue, « O, replaceValue »).\n        return Call(realm, replacer, searchValue, [O, replaceValue]);\n      }\n    }\n\n    // 3. Let string be ? ToString(O).\n    let string = ToString(realm, O.throwIfNotConcrete());\n\n    // 4. Let searchString be ? ToString(searchValue).\n    let searchString = ToStringPartial(realm, searchValue);\n\n    // 5. Let functionalReplace be IsCallable(replaceValue).\n    let functionalReplace = IsCallable(realm, replaceValue);\n\n    let replaceValueString;\n    // 6. If functionalReplace is false, then\n    if (functionalReplace === false) {\n      // a. Let replaceValue be ? ToString(replaceValue).\n      replaceValueString = ToStringPartial(realm, replaceValue);\n    }\n\n    // 7. Search string for the first occurrence of searchString and\n    //    let pos be the index within string of the first code unit of the matched substring and\n    let pos = string.search(searchString);\n\n    //    let matched be searchString.\n    let matched = searchString;\n\n    //    If no occurrences of searchString were found, return string.\n    if (pos < 0) return new StringValue(realm, string);\n\n    // 8. If functionalReplace is true, then\n    if (functionalReplace === true) {\n      // a. Let replValue be ? Call(replaceValue, undefined, « matched, pos, string »).\n      let replValue = Call(realm, replaceValue, realm.intrinsics.undefined, [new StringValue(realm, matched), new NumberValue(realm, pos), new StringValue(realm, string)]);\n\n      // b. Let replStr be ? ToString(replValue).\n      replStr = ToStringPartial(realm, replValue);\n    } else { // 9. Else,\n      // a. Let captures be an empty List.\n      let captures = [];\n\n      // b. Let replStr be GetSubstitution(matched, string, pos, captures, replaceValue).\n      invariant(typeof replaceValueString === \"string\");\n      replStr = ToString(realm, GetSubstitution(realm, matched, string, pos, captures, replaceValueString));\n    }\n\n    // 10. Let tailPos be pos + the number of code units in matched.\n    let tailPos = pos + matched.length;\n\n    // 11. Let newString be the String formed by concatenating the first pos code units of string,\n    //     replStr, and the trailing substring of string starting at index tailPos. If pos is 0,\n    //     the first element of the concatenation will be the empty String.\n    let newString = string.substr(0, pos) + replStr + string.substr(tailPos);\n\n    // 12. Return newString.\n    return new StringValue(realm, newString);\n  });\n\n  // ECMA262 21.1.3.15\n  obj.defineNativeMethod(\"search\", 1, (context, [regexp]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. If regexp is neither undefined nor null, then\n    if (!HasSomeCompatibleType(realm, regexp, UndefinedValue, NullValue)) {\n      // a. Let searcher be ? GetMethod(regexp, @@search).\n      let searcher = GetMethod(realm, regexp, realm.intrinsics.SymbolSearch);\n\n      // b. If searcher is not undefined, then\n      if (!(searcher instanceof UndefinedValue)) {\n        // i. Return ? Call(searcher, regexp, « O »).\n        return Call(realm, searcher, regexp, [O]);\n      }\n    }\n\n    // 3. Let string be ? ToString(O).\n    let string = ToStringPartial(realm, O);\n\n    // 4. Let rx be ? RegExpCreate(regexp, undefined).\n    let rx = RegExpCreate(realm, regexp, undefined);\n\n    // 5. Return ? Invoke(rx, @@search, « string »).\n    return Invoke(realm, rx, realm.intrinsics.SymbolSearch, [new StringValue(realm, string)]);\n  });\n\n  // ECMA262 21.1.3.16\n  obj.defineNativeMethod(\"slice\", 2, (context, [start, end]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let len be the number of elements in S.\n    let len = S.length;\n\n    // 4. Let intStart be ? ToInteger(start).\n    let intStart = ToInteger(realm, start);\n\n    // 5. If end is undefined, let intEnd be len; else let intEnd be ? ToInteger(end).\n    let intEnd = !end || end instanceof UndefinedValue ? len : ToInteger(realm, end.throwIfNotConcrete());\n\n    // 6. If intStart < 0, let from be max(len + intStart, 0); otherwise let from be min(intStart, len).\n    let from = intStart < 0 ? Math.max(len + intStart, 0) : Math.min(intStart, len);\n\n    // 7. If intEnd < 0, let to be max(len + intEnd, 0); otherwise let to be min(intEnd, len).\n    let to = intEnd < 0 ? Math.max(len + intEnd, 0) : Math.min(intEnd, len);\n\n    // 8. Let span be max(to - from, 0).\n    let span = Math.max(to - from, 0);\n\n    // 9. Return a String value containing span consecutive elements from S beginning with the element at index from.\n    return new StringValue(realm, S.substr(from, span));\n  });\n\n  // ECMA262 21.1.3.17\n  obj.defineNativeMethod(\"split\", 2, (context, [separator, limit]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. If separator is neither undefined nor null, then\n    if (!HasSomeCompatibleType(realm, separator, UndefinedValue, NullValue)) {\n      // a. Let splitter be ? GetMethod(separator, @@split).\n      let splitter = GetMethod(realm, separator, realm.intrinsics.SymbolSplit);\n\n      // b. If splitter is not undefined, then\n      if (!(splitter instanceof UndefinedValue)) {\n        // i. Return ? Call(splitter, separator, « O, limit »).\n        return Call(realm, splitter, separator, [O, limit]);\n      }\n    }\n\n    // 3. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 4. Let A be ArrayCreate(0).\n    let A = ArrayCreate(realm, 0);\n\n    // 5. Let lengthA be 0.\n    let lengthA = 0;\n\n    // 6. If limit is undefined, let lim be 232-1; else let lim be ? ToUint32(limit).\n    let lim = !limit || limit instanceof UndefinedValue ? Math.pow(2, 32) - 1 : ToUint32(realm, limit.throwIfNotConcrete());\n\n    // 7. Let s be the number of elements in S.\n    let s = S.length;\n\n    // 8. Let p be 0.\n    let p = 0;\n\n    // 9. Let R be ? ToString(separator).\n    let R = ToStringPartial(realm, separator);\n\n    // 10. If lim = 0, return A.\n    if (lim === 0) return A;\n\n    // 11. If separator is undefined, then\n    if (!separator || separator instanceof UndefinedValue) {\n      // a. Perform ! CreateDataProperty(A, \"0\", S).\n      CreateDataProperty(realm, A, \"0\", new StringValue(realm, S));\n\n      // b. Return A.\n      return A;\n    }\n\n    // 12. If s = 0, then\n    if (s === 0) {\n      // a. Let z be SplitMatch(S, 0, R).\n      let z = SplitMatch(realm, S, 0, R);\n\n      // b. If z is not false, return A.\n      if (z !== false) return A;\n\n      // c. Perform ! CreateDataProperty(A, \"0\", S).\n      CreateDataProperty(realm, A, \"0\", new StringValue(realm, S));\n      // d. Return A.\n      return A;\n    }\n\n    // 13. Let q be p.\n    let q = p;\n\n    // 14. Repeat, while q ≠ s\n    while (q !== s) {\n      // a. Let e be SplitMatch(S, q, R).\n      let e = SplitMatch(realm, S, q, R);\n\n      // b. If e is false, let q be q+1.\n      if (e === false) {\n        q++;\n      } else { // c. Else e is an integer index ≤ s,\n        // i. If e = p, let q be q+1.\n        if (e === p) {\n          q++;\n        } else { // ii. Else e ≠ p,\n          // 1. Let T be a String value equal to the substring of S consisting of the code units at indices p (inclusive) through q (exclusive).\n          let T = S.substring(p, q);\n\n          // 2. Perform ! CreateDataProperty(A, ! ToString(lengthA), T).\n          CreateDataProperty(realm, A, new StringValue(realm, lengthA + \"\"), new StringValue(realm, T));\n\n          // 3. Increment lengthA by 1.\n          lengthA++;\n\n          // 4. If lengthA = lim, return A.\n          if (lengthA === lim) return A;\n\n          // 5. Let p be e.\n          p = e;\n\n          // 6. Let q be p.\n          q = p;\n        }\n      }\n    }\n\n    // 15. Let T be a String value equal to the substring of S consisting of the code units at indices p (inclusive) through s (exclusive).\n    let T = S.substring(p, s);\n\n    // 16. Perform ! CreateDataProperty(A, ! ToString(lengthA), T).\n    CreateDataProperty(realm, A, new StringValue(realm, lengthA + \"\"), new StringValue(realm, T));\n\n    // 17. Return A.\n    return A;\n  });\n\n  // ECMA262 21.1.3.18\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n  obj.defineNativeMethod(\"startsWith\", 1, (context, [searchString, position]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let isRegExp be ? IsRegExp(searchString).\n    let isRegExp = IsRegExp(realm, searchString);\n\n    // 4. If isRegExp is true, throw a TypeError exception.\n    if (isRegExp) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError,\n        \"String.prototype\");\n    }\n\n    // 5. Let searchStr be ? ToString(searchString).\n    let searchStr = ToStringPartial(realm, searchString);\n\n    // 6. Let pos be ? ToInteger(position). (If position is undefined, this step produces the value 0.)\n    let pos = ToInteger(realm, position || realm.intrinsics.undefined);\n\n    // 7. Let len be the number of elements in S.\n    let len = S.length;\n\n    // 8. Let start be min(max(pos, 0), len).\n    let start = Math.min(Math.max(pos, 0), len);\n\n    // 9. Let searchLength be the number of elements in searchStr.\n    let searchLength = searchStr.length;\n\n    // 10. If searchLength+start is greater than len, return false.\n    if (searchLength + start > len) return realm.intrinsics.false;\n\n    // 11. If the sequence of elements of S starting at start of length searchLength is the same as the full element sequence of searchStr, return true.\n    if (S.substr(start, searchLength) === searchStr) return realm.intrinsics.true;\n\n    // 12. Otherwise, return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 21.1.3.19\n  obj.defineNativeMethod(\"substring\", 2, (context, [start, end]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let len be the number of elements in S.\n    let len = S.length;\n\n    // 4. Let intStart be ? ToInteger(start).\n    let intStart = ToInteger(realm, start);\n\n    // 5. If end is undefined, let intEnd be len; else let intEnd be ? ToInteger(end).\n    let intEnd = !end || end instanceof UndefinedValue ? len : ToInteger(realm, end.throwIfNotConcrete());\n\n    // 6. Let finalStart be min(max(intStart, 0), len).\n    let finalStart = Math.min(Math.max(intStart, 0), len);\n\n    // 7. Let finalEnd be min(max(intEnd, 0), len).\n    let finalEnd = Math.min(Math.max(intEnd, 0), len);\n\n    // 8. Let from be min(finalStart, finalEnd).\n    let frm = Math.min(finalStart, finalEnd);\n\n    // 9. Let to be max(finalStart, finalEnd).\n    let to = Math.max(finalStart, finalEnd);\n\n    // 10. Return a String whose length is to - from, containing code units from S, namely the code units with indices from through to - 1, in ascending order.\n    return new StringValue(realm, S.slice(frm, to));\n  });\n\n  type toCaseTypes = \"LocaleLower\" | \"LocaleUpper\" | \"Lower\" | \"Upper\";\n  function toCase(type: toCaseTypes, context, locales) {\n    // 1. Let O be RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ToString(O)\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    if (realm.isCompatibleWith(realm.MOBILE_JSC_VERSION)) {\n      locales = undefined;\n    } else {\n      // TODO filter locales for only serialisable values\n      if (locales) locales = locales.serialize();\n    }\n\n    if (realm.isPartial && (type === \"LocaleUpper\" || type === \"LocaleLower\")) {\n      // The locale is environment-dependent\n      throw AbstractValue.createIntrospectionErrorThrowCompletion(O);\n    }\n\n    // Omit the rest of the arguments. Just use the native impl.\n    return new StringValue(realm, (S: any)[`to${type}Case`](locales));\n  }\n\n  // ECMA-262 21.1.3.20\n  // ECMA-402 13.1.2\n  obj.defineNativeMethod(\"toLocaleLowerCase\", 0, (context, [locales]) => {\n    return toCase(\"LocaleLower\", context, locales);\n  });\n\n  // ECMA-262 21.1.3.21\n  // ECMA-402 13.1.3\n  obj.defineNativeMethod(\"toLocaleUpperCase\", 0, (context, [locales]) => {\n    return toCase(\"LocaleUpper\", context, locales);\n  });\n\n  // ECMA262 21.1.3.22\n  obj.defineNativeMethod(\"toLowerCase\", 0, (context) => {\n    return toCase(\"Lower\", context);\n  });\n\n  // ECMA262 21.1.3.23\n  obj.defineNativeMethod(\"toString\", 0, (context) => {\n    // 1. Return ? thisStringValue(this value).\n    return thisStringValue(realm, context);\n  });\n\n  // ECMA262 21.1.3.24\n  obj.defineNativeMethod(\"toUpperCase\", 0, (context) => {\n    return toCase(\"Upper\", context);\n  });\n\n  // ECMA262 21.1.3.25\n  obj.defineNativeMethod(\"trim\", 0, (context) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let T be a String value that is a copy of S with both leading and trailing white space removed. The definition of white space is the union of WhiteSpace and LineTerminator. When determining whether a Unicode code point is in Unicode general category “Zs”, code unit sequences are interpreted as UTF-16 encoded code point sequences as specified in 6.1.4.\n    let T = S.trim();\n\n    // 4. Return T.\n    return new StringValue(realm, T);\n  });\n\n  // ECMA262 21.1.3.26\n  obj.defineNativeMethod(\"valueOf\", 0, (context) => {\n    // 1. Return ? thisStringValue(this value).\n    return thisStringValue(realm, context);\n  });\n\n  // ECMA262 21.1.3.27\n  obj.defineNativeMethod(realm.intrinsics.SymbolIterator, 0, (context) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Return CreateStringIterator(S).\n    return CreateStringIterator(realm, new StringValue(realm, S));\n  });\n\n  // B.2.3.1\n  obj.defineNativeMethod(\"substr\", 2, (context, [start, length]) => {\n    // 1. Let O be RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ToString(O).\n    let S = ToStringPartial(realm, O);\n\n    // 3. ReturnIfAbrupt(S).\n\n    // 4. Let intStart be ToInteger(start).\n    let intStart = ToInteger(realm, start);\n\n    // 5. ReturnIfAbrupt(intStart).\n\n    // 6. If length is undefined, let end be +∞; otherwise let end be ToInteger(length).\n    let end;\n    if (!length || length instanceof UndefinedValue) {\n      end = Infinity;\n    } else {\n      end = ToInteger(realm, length.throwIfNotConcrete());\n    }\n\n    // 7. ReturnIfAbrupt(end).\n\n    // 8. Let size be the number of code units in S.\n    let size = S.length;\n\n    // 9. If intStart < 0, let intStart be max(size + intStart,0).\n    if (intStart < 0) intStart = Math.max(size + intStart, 0);\n\n    // 10. Let resultLength be min(max(end,0), size – intStart).\n    let resultLength = Math.min(Math.max(end, 0), size - intStart);\n\n    // 11. If resultLength ≤ 0, return the empty String \"\".\n    if (resultLength <= 0) return realm.intrinsics.emptyString;\n\n    // 12. Return a String containing resultLength consecutive code units from S beginning with the code unit at index intStart.\n    return new StringValue(realm, S.slice(intStart, intStart + resultLength));\n  });\n\n  // B.2.3.2\n  obj.defineNativeMethod(\"anchor\", 1, (context, [name]) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. // 2. Return ? CreateHTML(S, \"a\", \"name\", name).\n    return CreateHTML(realm, S, \"a\", \"name\", name);\n  });\n\n  // B.2.3.3\n  obj.defineNativeMethod(\"big\", 0, (context) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"big\", \"\", \"\").\n    return CreateHTML(realm, S, \"big\", \"\", \"\");\n  });\n\n  // B.2.3.4\n  obj.defineNativeMethod(\"blink\", 0, (context) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"blink\", \"\", \"\").\n    return CreateHTML(realm, S, \"blink\", \"\", \"\");\n  });\n\n  // B.2.3.5\n  obj.defineNativeMethod(\"bold\", 0, (context) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"b\", \"\", \"\").\n    return CreateHTML(realm, S, \"b\", \"\", \"\");\n  });\n\n  // B.2.3.6\n  obj.defineNativeMethod(\"fixed\", 0, (context) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"tt\", \"\", \"\").\n    return CreateHTML(realm, S, \"tt\", \"\", \"\");\n  });\n\n  // B.2.3.7\n  obj.defineNativeMethod(\"fontcolor\", 1, (context, [color]) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"font\", \"color\", color).\n    return CreateHTML(realm, S, \"font\", \"color\", color);\n  });\n\n  // B.2.3.8\n  obj.defineNativeMethod(\"fontsize\", 1, (context, [size]) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"font\", \"size\", size).\n    return CreateHTML(realm, S, \"font\", \"size\", size);\n  });\n\n  // B.2.3.9\n  obj.defineNativeMethod(\"italics\", 0, (context) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"i\", \"\", \"\").\n    return CreateHTML(realm, S, \"i\", \"\", \"\");\n  });\n\n  // B.2.3.10\n  obj.defineNativeMethod(\"link\", 1, (context, [url]) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"a\", \"href\", url).\n    return CreateHTML(realm, S, \"a\", \"href\", url);\n  });\n\n  // B.2.3.11\n  obj.defineNativeMethod(\"small\", 0, (context) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"small\", \"\", \"\").\n    return CreateHTML(realm, S, \"small\", \"\", \"\");\n  });\n\n  // B.2.3.12\n  obj.defineNativeMethod(\"strike\", 0, (context) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"strike\", \"\", \"\").\n    return CreateHTML(realm, S, \"strike\", \"\", \"\");\n  });\n\n  // B.2.3.13\n  obj.defineNativeMethod(\"sub\", 0, (context) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"sub\", \"\", \"\").\n    return CreateHTML(realm, S, \"sub\", \"\", \"\");\n  });\n\n  // B.2.3.14\n  obj.defineNativeMethod(\"sup\", 0, (context) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"sup\", \"\", \"\").\n    return CreateHTML(realm, S, \"sup\", \"\", \"\");\n  });\n\n  return obj;\n}\n"]}