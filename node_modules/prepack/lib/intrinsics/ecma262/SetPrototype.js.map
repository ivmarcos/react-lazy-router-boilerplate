{"version":3,"sources":["../../../src/intrinsics/ecma262/SetPrototype.js"],"names":["realm","obj","defineNativeMethod","context","value","S","throwIfNotConcrete","createErrorThrowCompletion","intrinsics","TypeError","$SetData","entries","e","Object","is","zero","push","undefined","i","length","true","false","callbackfn","thisArg","T","$DefineOwnProperty","get","count","configurable","valuesPropertyDescriptor","$GetOwnProperty","defineNativeProperty","SymbolIterator","SymbolToStringTag","writable"],"mappings":"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","file":"SetPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue, ObjectValue, StringValue, NumberValue } from \"../../values/index.js\";\nimport {\n  Call,\n  CreateSetIterator,\n  IsCallable,\n  SameValueZeroPartial,\n  ThrowIfMightHaveBeenDeleted,\n  ThrowIfInternalSlotNotWritable,\n} from \"../../methods/index.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function (realm: Realm, obj: ObjectValue): void {\n  // ECMA262 23.2.3.1\n  obj.defineNativeMethod(\"add\", 1, (context, [value]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n    if (!S.$SetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of S's [[SetData]] internal slot.\n    let entries = S.$SetData;\n\n    // 5. Repeat for each e that is an element of entries,\n    for (let e of entries) {\n      // a. If e is not empty and SameValueZero(e, value) is true, then\n      if (e && SameValueZeroPartial(realm, e, value)) {\n        // i. Return S.\n        return S;\n      }\n    }\n\n    // 6. If value is -0, let value be +0.\n    value = value.throwIfNotConcrete();\n    if (value instanceof NumberValue && Object.is(value.value, -0)) {\n      value = realm.intrinsics.zero;\n    }\n\n    // 7. Append value as the last element of entries.\n    ThrowIfInternalSlotNotWritable(realm, S, \"$SetData\");\n    entries.push(value);\n\n    // 8. Return S.\n    return S;\n  });\n\n  // ECMA262 23.2.3.2\n  obj.defineNativeMethod(\"clear\", 0, (context) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n    if (!S.$SetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // All of these steps can be replace with just reseting [[SetData]]\n    // 4. Let entries be the List that is the value of S's [[SetData]] internal slot.\n    // 5. Repeat for each e that is an element of entries,\n    // 5.a Replace the element of entries whose value is e with an element whose value is empty.\n    ThrowIfInternalSlotNotWritable(realm, S, \"$SetData\").$SetData = [];\n\n    // 6. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 23.2.3.4\n  obj.defineNativeMethod(\"delete\", 1, (context, [value]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n    if (!S.$SetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of S's [[SetData]] internal slot.\n    let entries = S.$SetData;\n    invariant(entries !== undefined);\n\n    // 5. Repeat for each e that is an element of entries,\n    for (let i = 0; i < entries.length; i++) {\n      let e = entries[i];\n\n      // a. If e is not empty and SameValueZero(e, value) is true, then\n      if (e !== undefined && SameValueZeroPartial(realm, e, value)) {\n        // i. Replace the element of entries whose value is e with an element whose value is empty.\n        ThrowIfInternalSlotNotWritable(realm, S, \"$SetData\");\n        entries[i] = undefined;\n\n        // ii. Return true.\n        return realm.intrinsics.true;\n      }\n    }\n\n    // 6. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.2.3.5\n  obj.defineNativeMethod(\"entries\", 0, (context) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateSetIterator(S, \"key+value\").\n    return CreateSetIterator(realm, S, \"key+value\");\n  });\n\n  // ECMA262 23.2.3.6\n  obj.defineNativeMethod(\"forEach\", 1, (context, [callbackfn, thisArg]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n    if (!S.$SetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg || realm.intrinsics.undefined;\n\n    // 6. Let entries be the List that is the value of S's [[SetData]] internal slot.\n    let entries = S.$SetData;\n    invariant(entries);\n\n    // 7. Repeat for each e that is an element of entries, in original insertion order\n    for (let e of entries) {\n      // a. If e is not empty, then\n      if (e) {\n        // i. Perform ? Call(callbackfn, T, « e, e, S »).\n        Call(realm, callbackfn, T, [e, e, S]);\n      }\n    }\n\n    // 8. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 23.2.3.7\n  obj.defineNativeMethod(\"has\", 1, (context, [value]) => {\n    // 1. Let S be the this value.\n    let S = context.throwIfNotConcrete();\n\n    // 2. If Type(S) is not Object, throw a TypeError exception.\n    if (!(S instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n    if (!S.$SetData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of S's [[SetData]] internal slot.\n    let entries = S.$SetData;\n\n    // 5. Repeat for each e that is an element of entries,\n    for (let e of entries) {\n      // a. If e is not empty and SameValueZero(e, value) is true, return true.\n      if (e && SameValueZeroPartial(realm, e, value)) return realm.intrinsics.true;\n    }\n\n    // 6. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.2.3.9 get Set.prototype.size\n  obj.$DefineOwnProperty(\"size\", {\n    get: new NativeFunctionValue(realm, \"TODO\", \"get size\", 0, (context) => {\n      // 1. Let S be the this value.\n      let S = context.throwIfNotConcrete();\n\n      // 2. If Type(S) is not Object, throw a TypeError exception.\n      if (!(S instanceof ObjectValue)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 3. If S does not have a [[SetData]] internal slot, throw a TypeError exception.\n      if (!S.$SetData) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 4. Let entries be the List that is the value of S's [[SetData]] internal slot.\n      let entries = S.$SetData;\n\n      // 5. Let count be 0.\n      let count = 0;\n\n      // 6. For each e that is an element of entries\n      for (let e of entries) {\n        // a. If e is not empty, set count to count+1.\n        if (e) count++;\n      }\n\n      // 7. Return count.\n      return new NumberValue(realm, count);\n    }),\n    configurable: true\n  });\n\n  // ECMA262 23.2.3.10\n  obj.defineNativeMethod(\"values\", 0, (context) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateSetIterator(S, \"value\").\n    return CreateSetIterator(realm, S, \"value\");\n  });\n\n  // ECMA262 23.2.3.8\n  let valuesPropertyDescriptor = obj.$GetOwnProperty(\"values\");\n  invariant(valuesPropertyDescriptor);\n  ThrowIfMightHaveBeenDeleted(valuesPropertyDescriptor.value);\n  obj.defineNativeProperty(\"keys\", undefined, valuesPropertyDescriptor);\n\n  // ECMA262 23.2.3.11\n  obj.defineNativeProperty(realm.intrinsics.SymbolIterator, undefined, valuesPropertyDescriptor);\n\n  // ECMA262 23.2.3.12 Set.prototype [ @@toStringTag ]\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"Set\"), { writable: false });\n}\n"]}