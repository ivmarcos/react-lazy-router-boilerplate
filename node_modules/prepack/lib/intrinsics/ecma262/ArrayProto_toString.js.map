{"version":3,"sources":["../../../src/intrinsics/ecma262/ArrayProto_toString.js"],"names":["realm","context","array","func","intrinsics","ObjectProto_toString"],"mappings":";;;;;;kBAkBe,UAAUA,KAAV,EAA6C;AAC1D;AACA,SAAO,+BAAwBA,KAAxB,EAA+B,0BAA/B,EAA2D,UAA3D,EAAuE,CAAvE,EAA0E,UAACC,OAAD,EAAa;AAC5F;AACA,QAAIC,QAAQ,6BAAgBF,KAAhB,EAAuBC,OAAvB,CAAZ;;AAEA;AACA,QAAIE,OAAO,cAAIH,KAAJ,EAAWE,KAAX,EAAkB,MAAlB,CAAX;;AAEA;AACA,QAAI,CAAC,oBAAWF,KAAX,EAAkBG,IAAlB,CAAL,EACCA,OAAOH,MAAMI,UAAN,CAAiBC,oBAAxB;;AAED;AACA,WAAO,gBAAKL,KAAL,EAAYG,IAAZ,EAAkBD,KAAlB,CAAP;AACD,GAbM,EAaJ,KAbI,CAAP;AAcD,C;;AAtBD;;AACA;;AACA;;AACA;;AACA","file":"ArrayProto_toString.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { ToObjectPartial } from \"../../methods/index.js\";\nimport { Get } from \"../../methods/get.js\";\nimport { Call } from \"../../methods/call.js\";\nimport { IsCallable } from \"../../methods/is.js\";\n\nexport default function (realm: Realm): NativeFunctionValue {\n  // ECMA262 22.1.3.30\n  return new NativeFunctionValue(realm, \"Array.prototype.toString\", \"toString\", 0, (context) => {\n    // 1. Let array be ? ToObject(this value).\n    let array = ToObjectPartial(realm, context);\n\n    // 2. Let func be ? Get(array, \"join\").\n    let func = Get(realm, array, \"join\");\n\n    // 3. If IsCallable(func) is false, let func be the intrinsic function %ObjProto_toString%.\n    if (!IsCallable(realm, func))\n     func = realm.intrinsics.ObjectProto_toString;\n\n    // 4. Return ? Call(func, array).\n    return Call(realm, func, array);\n  }, false);\n}\n"]}