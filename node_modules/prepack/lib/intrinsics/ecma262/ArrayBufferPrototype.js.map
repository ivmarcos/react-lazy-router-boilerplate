{"version":3,"sources":["../../../src/intrinsics/ecma262/ArrayBufferPrototype.js"],"names":["realm","obj","defineNativeGetter","context","O","throwIfNotConcrete","createErrorThrowCompletion","intrinsics","TypeError","length","$ArrayBufferByteLength","defineNativeMethod","start","end","len","relativeStart","first","Math","max","min","relativeEnd","final","newLen","ctor","ArrayBuffer","New","fromBuf","$ArrayBufferData","toBuf","defineNativeProperty","SymbolToStringTag","writable"],"mappings":"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","file":"ArrayBufferPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, StringValue, NumberValue, UndefinedValue } from \"../../values/index.js\";\nimport { Construct, SpeciesConstructor, IsDetachedBuffer, ToInteger, SameValue, CopyDataBlockBytes } from \"../../methods/index.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function (realm: Realm, obj: ObjectValue): void {\n  // ECMA262 24.1.4.1\n  obj.defineNativeGetter(\"byteLength\", (context) => {\n    // 1. Let O be the this value.\n    let O = context.throwIfNotConcrete();\n\n    // 2. If Type(O) is not Object, throw a TypeError exception.\n    if (!(O instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(O) is not Object\");\n    }\n\n    // 3. If O does not have an [[ArrayBufferData]] internal slot, throw a TypeError exception.\n    if (!('$ArrayBufferData' in O)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"O does not have an [[ArrayBufferData]] internal slot\");\n    }\n\n    // 4. If IsDetachedBuffer(O) is true, throw a TypeError exception.\n    if (IsDetachedBuffer(realm, O) === true) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(O) is true\");\n    }\n\n    // 5. Let length be O.[[ArrayBufferByteLength]].\n    let length = O.$ArrayBufferByteLength;\n    invariant(typeof length === \"number\");\n\n    // 6. Return length.\n    return new NumberValue(realm, length);\n  });\n\n  // ECMA262 24.1.4.3\n  obj.defineNativeMethod(\"slice\", 2, (context, [start, end]) => {\n    // 1. Let O be the this value.\n    let O = context.throwIfNotConcrete();\n\n    // 2. If Type(O) is not Object, throw a TypeError exception.\n    if (!(O instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(O) is not Object\");\n    }\n\n    // 3. If O does not have an [[ArrayBufferData]] internal slot, throw a TypeError exception.\n    if (!('$ArrayBufferData' in O)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"O does not have an [[ArrayBufferData]] internal slot\");\n    }\n\n    // 4. If IsDetachedBuffer(O) is true, throw a TypeError exception.\n    if (IsDetachedBuffer(realm, O) === true) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(O) is true\");\n    }\n\n    // 5. Let len be O.[[ArrayBufferByteLength]].\n    let len = O.$ArrayBufferByteLength;\n    invariant(typeof len === \"number\");\n\n    // 6. Let relativeStart be ? ToInteger(start).\n    let relativeStart = ToInteger(realm, start);\n\n    // 7. If relativeStart < 0, let first be max((len + relativeStart), 0); else let first be min(relativeStart, len).\n    let first = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);\n\n    // 8. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToInteger(end).\n    let relativeEnd = !end || end instanceof UndefinedValue ? len : ToInteger(realm, end.throwIfNotConcrete());\n\n    // 9. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let final be min(relativeEnd, len).\n    let final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);\n\n    // 10. Let newLen be max(final-first, 0).\n    let newLen = Math.max(final - first, 0);\n\n    // 11. Let ctor be ? SpeciesConstructor(O, %ArrayBuffer%).\n    let ctor = SpeciesConstructor(realm, O, realm.intrinsics.ArrayBuffer);\n\n    // 12. Let New be ? Construct(ctor, « newLen »).\n    let New = Construct(realm, ctor, [new NumberValue(realm, newLen)]);\n\n    // 13. If New does not have an [[ArrayBufferData]] internal slot, throw a TypeError exception.\n    if (!('$ArrayBufferData' in New)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"new does not have an [[ArrayBufferData]] internal slot\");\n    }\n\n    // 14. If IsDetachedBuffer(New) is true, throw a TypeError exception.\n    if (IsDetachedBuffer(realm, New) === true) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(new) is true\");\n    }\n\n    // 15. If SameValue(New, O) is true, throw a TypeError exception.\n    if (SameValue(realm, New, O) === true) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"SameValue(new, O) is true\");\n    }\n\n    // 16. If new.[[ArrayBufferByteLength]] < newLen, throw a TypeError exception.\n    if (typeof New.$ArrayBufferByteLength !== \"number\" || New.$ArrayBufferByteLength < newLen) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"new.[[ArrayBufferByteLength]] < newLen\");\n    }\n\n    // 17. NOTE: Side-effects of the above steps may have detached O.\n\n    // 18. If IsDetachedBuffer(O) is true, throw a TypeError exception.\n    if (IsDetachedBuffer(realm, O) === true) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(O) is true\");\n    }\n\n    // 19. Let fromBuf be O.[[ArrayBufferData]].\n    let fromBuf = O.$ArrayBufferData; invariant(fromBuf);\n\n    // 20. Let toBuf be New.[[ArrayBufferData]].\n    let toBuf = New.$ArrayBufferData; invariant(toBuf);\n\n    // 21. Perform CopyDataBlockBytes(toBuf, 0, fromBuf, first, newLen).\n    CopyDataBlockBytes(realm, toBuf, 0, fromBuf, first, newLen);\n\n    // 22. Return New.\n    return New;\n  });\n\n  // ECMA262 24.1.4.4\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"ArrayBuffer\"), { writable: false });\n}\n"]}