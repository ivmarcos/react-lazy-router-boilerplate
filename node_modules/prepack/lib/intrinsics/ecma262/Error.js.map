{"version":3,"sources":["../../../src/intrinsics/ecma262/Error.js"],"names":["realm","build","describeLocation","callerFn","env","loc","locString","displayName","name","$Get","mightBeUndefined","throwIfNotConcrete","$NewTarget","start","line","column","source","undefined","buildStack","context","$ErrorData","stack","contextStack","intrinsics","lines","header","msg","executionContext","caller","function","lexicalEnvironment","unshift","join","inheritError","func","argLength","NewTarget","message","newTarget","O","slice","locationData","stackDesc","value","enumerable","configurable","writable","msgDesc","$Prototype","Error"],"mappings":"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","file":"Error.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport type { LexicalEnvironment } from \"../../environment.js\";\nimport { ObjectValue, FunctionValue, NativeFunctionValue, StringValue } from \"../../values/index.js\";\nimport { OrdinaryCreateFromConstructor, ToStringPartial, Get, DefinePropertyOrThrow } from \"../../methods/index.js\";\nimport invariant from \"../../invariant.js\";\nimport type { BabelNodeSourceLocation } from \"babel-types\";\n\nexport default function (realm: Realm): NativeFunctionValue {\n  return build(\"Error\", realm, false);\n}\n\nexport function describeLocation(realm: Realm, callerFn: ?FunctionValue, env: ?LexicalEnvironment, loc: ?BabelNodeSourceLocation): void | string {\n  let locString = \"\";\n  let displayName = \"\";\n\n  if (callerFn) {\n    if (callerFn instanceof NativeFunctionValue) {\n      locString = \"native\";\n    }\n\n    let name = callerFn.$Get(\"name\", callerFn);\n    if (!name.mightBeUndefined())\n      displayName = ToStringPartial(realm, name);\n    else\n      name.throwIfNotConcrete();\n\n    if (env && env.$NewTarget) displayName = `new ${displayName}`;\n  }\n\n  if (!locString) {\n    if (loc) {\n      locString = `${loc.start.line}:${loc.start.column + 1}`;\n      if (loc.source) locString = `${loc.source}:${locString}`;\n    } else {\n      locString = (loc ? loc.source : undefined) || \"unknown\";\n      if (!displayName) return undefined;\n    }\n  }\n\n  if (displayName) {\n    return `at ${displayName} (${locString})`;\n  } else {\n    return `at ${locString}`;\n  }\n}\n\nfunction buildStack(realm: Realm, context: ObjectValue) {\n  invariant(context.$ErrorData);\n\n  let stack = context.$ErrorData.contextStack;\n  if (!stack) return realm.intrinsics.undefined;\n\n  let lines = [];\n  let header = \"\";\n\n  header += ToStringPartial(realm, Get(realm, context, \"name\"));\n\n  let msg = Get(realm, context, \"message\");\n  if (!msg.mightBeUndefined()) {\n    msg = ToStringPartial(realm, msg);\n    if (msg) header += `: ${msg}`;\n  } else {\n    msg.throwIfNotConcrete();\n  }\n\n  for (let executionContext of stack) {\n    let caller = executionContext.caller;\n    let locString = describeLocation(realm, caller ? caller.function : undefined, caller ? caller.lexicalEnvironment : undefined, executionContext.loc);\n    if (locString !== undefined) lines.unshift(locString);\n  }\n\n  return new StringValue(realm, `${header}\\n    ${lines.join(\"\\n    \")}`);\n}\n\nexport function build(name: string, realm: Realm, inheritError?: boolean = true): NativeFunctionValue {\n  let func = new NativeFunctionValue(realm, name, name, 1, (context, [message], argLength, NewTarget) => {\n    // 1. If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.\n    let newTarget = NewTarget || func;\n\n    // 2. Let O be ? OrdinaryCreateFromConstructor(newTarget, \"%ErrorPrototype%\", « [[ErrorData]] »).\n    let O = OrdinaryCreateFromConstructor(realm, newTarget, `${name}Prototype`, { $ErrorData: undefined });\n    O.$ErrorData = {\n      contextStack: realm.contextStack.slice(1),\n      locationData: undefined\n    };\n\n    // Build a text description of the stack.\n    let stackDesc = {\n      value: buildStack(realm, O),\n      enumerable: false,\n      configurable: true,\n      writable: true\n    };\n    DefinePropertyOrThrow(realm, O, \"stack\", stackDesc);\n\n    // 3. If message is not undefined, then\n    if (!message.mightBeUndefined()) {\n      // a. Let msg be ? ToString(message).\n      let msg = ToStringPartial(realm, message);\n\n      // b. Let msgDesc be the PropertyDescriptor{[[Value]]: msg, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}.\n      let msgDesc = {\n        value: new StringValue(realm, msg),\n        writable: true,\n        enumerable: false,\n        configurable: true\n      };\n\n      // c. Perform ! DefinePropertyOrThrow(O, \"message\", msgDesc).\n      DefinePropertyOrThrow(realm, O, \"message\", msgDesc);\n    } else {\n      message.throwIfNotConcrete();\n    }\n\n    // 4. Return O.\n    return O;\n  });\n\n  if (inheritError) {\n    func.$Prototype = realm.intrinsics.Error;\n  }\n\n  return func;\n}\n"]}