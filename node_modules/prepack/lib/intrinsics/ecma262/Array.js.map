{"version":3,"sources":["../../../src/intrinsics/ecma262/Array.js"],"names":["realm","func","context","argCount","NewTarget","items","numberOfArgs","newTarget","undefined","proto","array","len","intLen","mightBeNumber","defineStatus","throwIfNotConcreteNumber","value","createErrorThrowCompletion","intrinsics","RangeError","k","Pk","itemK","length","throwIfNotConcrete","defineNativeMethod","arg","isCompatibleWith","MOBILE_JSC_VERSION","C","A","kValue","mapfn","thisArg","mapping","T","mightBeUndefined","TypeError","usingIterator","SymbolIterator","iterator","Math","pow","error","next","nextValue","mappedValue","mappedValueCompletion","completion","arrayLike","defineNativeGetter","SymbolSpecies"],"mappings":"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","file":"Array.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { AbruptCompletion } from \"../../completions.js\";\nimport {\n    AbstractValue,\n    BooleanValue,\n    NumberValue,\n    UndefinedValue,\n    StringValue,\n    ObjectValue,\n} from \"../../values/index.js\";\nimport {\n    ArrayCreate,\n    Construct,\n    Call,\n    CreateDataProperty,\n    CreateDataPropertyOrThrow,\n    Get,\n    GetPrototypeFromConstructor,\n    GetMethod,\n    IsArray,\n    IsConstructor,\n    IsCallable,\n    Set,\n} from \"../../methods/index.js\";\nimport { ToString, ToUint32, ToObject, ToLength } from \"../../methods/to.js\";\nimport { GetIterator, IteratorClose, IteratorStep, IteratorValue } from \"../../methods/iterator.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function (realm: Realm): NativeFunctionValue {\n  let func = new NativeFunctionValue(realm, \"Array\", \"Array\", 1, (context, [...items], argCount, NewTarget) => {\n    if (argCount === 0) {\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs = 0.\n      invariant(numberOfArgs === 0, \"numberOfArgs = 0\");\n\n      // 3. If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.\n      let newTarget = NewTarget === undefined ? func : NewTarget;\n\n      // 4. Let proto be ? GetPrototypeFromConstructor(newTarget, \"%ArrayPrototype%\").\n      let proto = GetPrototypeFromConstructor(realm, newTarget, \"ArrayPrototype\");\n\n      // 5. Return ArrayCreate(0, proto).\n      return ArrayCreate(realm, 0, proto);\n    } else if (argCount === 1) {\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs = 1.\n      invariant(numberOfArgs === 1, \"numberOfArgs = 1\");\n\n      // 3. If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.\n      let newTarget = NewTarget === undefined ? func : NewTarget;\n\n      // 4. Let proto be ? GetPrototypeFromConstructor(newTarget, \"%ArrayPrototype%\").\n      let proto = GetPrototypeFromConstructor(realm, newTarget, \"ArrayPrototype\");\n\n      // 5. Let array be ArrayCreate(0, proto).\n      let array = ArrayCreate(realm, 0, proto);\n\n      // 6. If Type(len) is not Number, then\n      let len = items[0];\n      invariant(len !== undefined);\n      let intLen;\n      if (!len.mightBeNumber()) {\n        // a. Let defineStatus be CreateDataProperty(array, \"0\", len).\n        let defineStatus = CreateDataProperty(realm, array, \"0\", len);\n\n        // b. Assert: defineStatus is true.\n        invariant(defineStatus, \"defineStatus is true\");\n\n        // c. Let intLen be 1.\n        intLen = 1;\n      } else { // 7. Else,\n        len = len.throwIfNotConcreteNumber();\n        // a. Let intLen be ToUint32(len).\n        intLen = ToUint32(realm, len);\n\n        // b If intLen ≠ len, throw a RangeError exception.\n        if (intLen !== len.value) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError, \"intLen ≠ len\");\n        }\n      }\n\n      // 8. Perform ! Set(array, \"length\", intLen, true).\n      Set(realm, array, \"length\", new NumberValue(realm, intLen), true);\n\n      // 9. Return array.\n      return array;\n    } else {\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs ≥ 2.\n      invariant(numberOfArgs >= 2, \"numberOfArgs >= 2\");\n\n      // 3. If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.\n      let newTarget = NewTarget === undefined ? func : NewTarget;\n\n      // 4. Let proto be ? GetPrototypeFromConstructor(newTarget, \"%ArrayPrototype%\").\n      let proto = GetPrototypeFromConstructor(realm, newTarget, \"ArrayPrototype\");\n\n      // 5. Let array be ? ArrayCreate(numberOfArgs, proto).\n      let array = ArrayCreate(realm, numberOfArgs, proto);\n\n      // 6. Let k be 0.\n      let k = 0;\n\n      // 7. Let items be a zero-origined List containing the argument items in order.\n      items;\n\n      // 8. Repeat, while k < numberOfArgs\n      while (k < numberOfArgs) {\n        // a. Let Pk be ! ToString(k).\n        let Pk = ToString(realm, new NumberValue(realm, k));\n\n        // b. Let itemK be items[k].\n        let itemK = items[k];\n        invariant(itemK !== undefined);\n\n        // c. Let defineStatus be CreateDataProperty(array, Pk, itemK).\n        let defineStatus = CreateDataProperty(realm, array, Pk, itemK);\n\n        // d. Assert: defineStatus is true.\n        invariant(defineStatus, \"defineStatus is true\");\n\n        // e. Increase k by 1.\n        k += 1;\n      }\n\n      // 9. Assert: the value of array's length property is numberOfArgs.\n      let length = Get(realm, array, \"length\").throwIfNotConcrete();\n      invariant(length instanceof NumberValue);\n      invariant(length.value === numberOfArgs, \"the value of array's length property is numberOfArgs\");\n\n      // 10. Return array.\n      return array;\n    }\n  });\n\n  // ECMA262 22.1.2.2\n  func.defineNativeMethod(\"isArray\", 1, (context, [arg]) => {\n    // 1. Return ? IsArray(arg).\n    return new BooleanValue(realm, IsArray(realm, arg));\n  });\n\n  // ECMA262 22.1.2.3\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n  func.defineNativeMethod(\"of\", 0, (context, [...items], argCount) => {\n    // 1. Let len be the actual number of arguments passed to this function.\n    let len = argCount;\n\n    // 2. Let items be the List of arguments passed to this function.\n    items;\n\n    // 3. Let C be the this value.\n    let C = context;\n\n    // 4. If IsConstructor(C) is true, then\n    let A;\n    if (IsConstructor(realm, C)) {\n      invariant(C instanceof ObjectValue);\n      // a. Let A be ? Construct(C, « len »).\n      A = Construct(realm, C, [new NumberValue(realm, len)]);\n    } else { // 5. Else,\n      // a. Let A be ? ArrayCreate(len).\n      A = ArrayCreate(realm, len);\n    }\n\n    // 6. Let k be 0.\n    let k = 0;\n\n    // 7. Repeat, while k < len\n    while (k < len) {\n      // a. Let kValue be items[k].\n      let kValue = items[k];\n\n      // b. Let Pk be ! ToString(k).\n      let Pk = ToString(realm, new NumberValue(realm, k));\n\n      // c. Perform ? CreateDataPropertyOrThrow(A, Pk, kValue).\n      CreateDataPropertyOrThrow(realm, A, Pk, kValue);\n\n      // d. Increase k by 1.\n      k += 1;\n    }\n\n    // 8. Perform ? Set(A, \"length\", len, true).\n    Set(realm, A, \"length\", new NumberValue(realm, len), true);\n\n    // 9. Return A.\n    return A;\n  });\n\n  // ECMA262 22.1.2.1\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n  func.defineNativeMethod(\"from\", 1, (context, [items, mapfn, thisArg], argCount) => {\n    // 1. Let C be the this value.\n    let C = context;\n\n    let mapping, T;\n    // 2. If mapfn is undefined, let mapping be false.\n    if (!mapfn || mapfn instanceof UndefinedValue) {\n      mapping = false;\n    } else if (mapfn.mightBeUndefined()) {\n      invariant(mapfn instanceof AbstractValue);\n      mapfn.throwIfNotConcrete();\n    } else { // 3. Else,\n      // a. If IsCallable(mapfn) is false, throw a TypeError exception.\n      if (IsCallable(realm, mapfn) === false) {\n        mapfn.throwIfNotConcrete();\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsCallable(mapfn) is false\");\n      }\n\n      // b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n      T = (thisArg !== undefined) ? thisArg : realm.intrinsics.undefined;\n\n      // c. Let mapping be true.\n      mapping = true;\n    }\n\n    // 4. Let usingIterator be ? GetMethod(items, @@iterator).\n    let usingIterator = GetMethod(realm, items, realm.intrinsics.SymbolIterator);\n\n    // 5. If usingIterator is not undefined, then\n    if (!usingIterator.mightBeUndefined()) {\n      let A;\n      // a. If IsConstructor(C) is true, then\n      if (IsConstructor(realm, C)) {\n        invariant(C instanceof ObjectValue);\n        // i. Let A be ? Construct(C).\n        A = Construct(realm, C);\n      } else { // b. Else,\n        // i. Let A be ArrayCreate(0).\n        A = ArrayCreate(realm, 0);\n      }\n\n      // c. Let iterator be ? GetIterator(items, usingIterator).\n      let iterator = GetIterator(realm, items, usingIterator);\n\n      // d. Let k be 0.\n      let k = 0;\n\n      // e. Repeat\n      while (true) {\n        // i. If k ≥ 2^53-1, then\n        if (k >= Math.pow(2, 53) - 1) {\n          // 1. Let error be Completion{[[Type]]: throw, [[Value]]: a newly created TypeError object, [[Target]]: empty}.\n          let error = realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"k >= 2^53 - 1\");\n\n          // 2. Return ? IteratorClose(iterator, error).\n          throw IteratorClose(realm, iterator, error);\n        }\n\n        // ii. Let Pk be ! ToString(k).\n        let Pk = ToString(realm, new NumberValue(realm, k));\n\n        // iii. Let next be ? IteratorStep(iterator).\n        let next = IteratorStep(realm, iterator);\n\n        // iv. If next is false, then\n        if (next === false) {\n          // 1. Perform ? Set(A, \"length\", k, true).\n          Set(realm, A, \"length\", new NumberValue(realm, k), true);\n\n          // 2. Return A.\n          return A;\n        }\n\n        // v. Let nextValue be ? IteratorValue(next).\n        let nextValue = IteratorValue(realm, next);\n\n        let mappedValue;\n        // vi. If mapping is true, then\n        if (mapping === true) {\n          // 1. Let mappedValue be Call(mapfn, T, « nextValue, k »).\n          try {\n            invariant(T !== undefined);\n            mappedValue = Call(realm, mapfn, T, [nextValue, new NumberValue(realm, k)]);\n          } catch (mappedValueCompletion) {\n            if (mappedValueCompletion instanceof AbruptCompletion) {\n              // 2. If mappedValue is an abrupt completion, return ? IteratorClose(iterator, mappedValue).\n              throw IteratorClose(realm, iterator, mappedValueCompletion);\n            } else {\n              throw mappedValueCompletion;\n            }\n          }\n          // 3. Let mappedValue be mappedValue.[[Value]].\n        } else { // vii. Else, let mappedValue be nextValue.\n          mappedValue = nextValue;\n        }\n\n        // viii. Let defineStatus be CreateDataPropertyOrThrow(A, Pk, mappedValue).\n        try {\n          CreateDataPropertyOrThrow(realm, A, Pk, mappedValue);\n        } catch (completion) {\n          if (completion instanceof AbruptCompletion) {\n            // ix. If defineStatus is an abrupt completion, return ? IteratorClose(iterator, defineStatus).\n            throw IteratorClose(realm, iterator, completion);\n          } else\n            throw completion;\n        }\n\n        // x. Increase k by 1.\n        k = k + 1;\n      }\n    } else {\n      usingIterator.throwIfNotConcrete();\n    }\n\n    // 6. NOTE: items is not an Iterable so assume it is an array-like object.\n    items = items.throwIfNotConcrete();\n    invariant(items instanceof ObjectValue);\n\n    // 7. Let arrayLike be ! ToObject(items).\n    let arrayLike = ToObject(realm, items);\n\n    // 8. Let len be ? ToLength(? Get(arrayLike, \"length\")).\n    let len = ToLength(realm, Get(realm, arrayLike, \"length\"));\n\n    let A;\n    // 9. If IsConstructor(C) is true, then\n    if (IsConstructor(realm, C)) {\n      invariant(C instanceof ObjectValue);\n      // a. Let A be ? Construct(C, « len »).\n      A = Construct(realm, C, [new NumberValue(realm, len)]);\n    } else { // 10. Else,\n      // a. Let A be ? ArrayCreate(len).\n      A = ArrayCreate(realm, len);\n    }\n\n    // 11. Let k be 0.\n    let k = 0;\n\n    // 12. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = ToString(realm, new NumberValue(realm, k));\n\n      // b. Let kValue be ? Get(arrayLike, Pk).\n      let kValue = Get(realm, arrayLike, Pk);\n\n      let mappedValue;\n      // c. If mapping is true, then\n      if (mapping === true) {\n        // i. Let mappedValue be ? Call(mapfn, T, « kValue, k »).\n        invariant(T !== undefined);\n        mappedValue = Call(realm, mapfn, T, [kValue, new NumberValue(realm, k)]);\n      } else { // d. Else, let mappedValue be kValue.\n        mappedValue = kValue;\n      }\n\n      // e. Perform ? CreateDataPropertyOrThrow(A, Pk, mappedValue).\n      CreateDataPropertyOrThrow(realm, A, new StringValue(realm, Pk), mappedValue);\n\n      // f. Increase k by 1.\n      k = k + 1;\n    }\n\n    // 13. Perform ? Set(A, \"length\", len, true).\n    Set(realm, A, \"length\", new NumberValue(realm, len), true);\n\n    // 14. Return A.\n    return A;\n  });\n\n  // ECMA262 22.1.2.5\n  func.defineNativeGetter(realm.intrinsics.SymbolSpecies, (context) => {\n    // 1. Return the this value\n    return context;\n  });\n\n  return func;\n}\n"]}