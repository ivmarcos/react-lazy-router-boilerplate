{"version":3,"sources":["../../../src/intrinsics/ecma262/Set.js"],"names":["realm","func","context","argCount","NewTarget","iterable","createErrorThrowCompletion","intrinsics","TypeError","set","$SetData","undefined","iter","adder","next","nextValue","status","defineNativeGetter","SymbolSpecies"],"mappings":";;;;;;ypBAAA;;;;;;;;;kBA2Be,UAAUA,KAAV,EAA6C;AAC1D;AACA,MAAIC,OAAO,+BAAwBD,KAAxB,EAA+B,KAA/B,EAAsC,KAAtC,EAA6C,CAA7C,EAAgD,UAACE,OAAD,QAAsBC,QAAtB,EAAgCC,SAAhC,EAA8C;AAAA;AAAA,QAAnCC,QAAmC;;AACvG;AACA,QAAI,CAACD,SAAL,EAAgB;AACd,YAAMJ,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,QAAIC,MAAM,2CAA8BT,KAA9B,EAAqCI,SAArC,EAAgD,cAAhD,EAAgE;AACxEM,gBAAUC;AAD8D,KAAhE,CAAV;;AAIA;AACAF,QAAIC,QAAJ,GAAe,EAAf;;AAEA;AACA,QAAI,CAACL,QAAL,EAAeA,WAAWL,MAAMO,UAAN,CAAiBI,SAA5B;;AAEf;AACA,QAAIC,aAAJ;AAAA,QAAUC,cAAV;AACA,QAAI,mCAAsBb,KAAtB,EAA6BK,QAA7B,0CAAJ,EAAuE;AACrEQ,cAAQb,MAAMO,UAAN,CAAiBI,SAAzB;AACAC,aAAOZ,MAAMO,UAAN,CAAiBI,SAAxB;AACD,KAHD,MAGO;AAAE;AACP;AACAE,cAAQ,iBAAIb,KAAJ,EAAWS,GAAX,EAAgB,KAAhB,CAAR;;AAEA;AACA,UAAI,CAAC,wBAAWT,KAAX,EAAkBa,KAAlB,CAAL,EAA+B;AAC7B,cAAMb,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACAI,aAAO,yBAAYZ,KAAZ,EAAmBK,QAAnB,CAAP;AACD;;AAED;AACA,QAAIO,qCAAJ,EAAoC;AAClC,aAAOH,GAAP;AACD;;AAED;AACA,WAAO,IAAP,EAAa;AACX;AACA,UAAIK,OAAO,0BAAad,KAAb,EAAoBY,IAApB,CAAX;;AAEA;AACA,UAAI,CAACE,IAAL,EAAW,OAAOL,GAAP;;AAEX;AACA,UAAIM,YAAY,2BAAcf,KAAd,EAAqBc,IAArB,CAAhB;;AAEA;AACA,UAAI;AACF,0BAAKd,KAAL,EAAYa,KAAZ,EAAmBJ,GAAnB,EAAwB,CAACM,SAAD,CAAxB;AACD,OAFD,CAEE,OAAOC,MAAP,EAAe;AACf,YAAIA,+CAAJ,EAAwC;AACtC;AACA,gBAAM,2BAAchB,KAAd,EAAqBY,IAArB,EAA2BI,MAA3B,CAAN;AACD,SAHD,MAIE,MAAMA,MAAN;AACH;AACF;;AAED,6BAAU,KAAV;AACD,GAhEU,CAAX;;AAkEA;AACAf,OAAKgB,kBAAL,CAAwBjB,MAAMO,UAAN,CAAiBW,aAAzC,EAAwD,UAAChB,OAAD,EAAa;AACnE;AACA,WAAOA,OAAP;AACD,GAHD;;AAKA,SAAOD,IAAP;AACD,C;;AA1FD;;AACA;;AACA;;AAWA","file":"Set.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue, NullValue, UndefinedValue } from \"../../values/index.js\";\nimport { AbruptCompletion } from \"../../completions.js\";\nimport {\n  OrdinaryCreateFromConstructor,\n  IsCallable,\n  Call,\n  GetIterator,\n  IteratorStep,\n  IteratorValue,\n  IteratorClose,\n  Get,\n  HasSomeCompatibleType\n} from \"../../methods/index.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function (realm: Realm): NativeFunctionValue {\n  // ECMA262 23.2.1.1\n  let func = new NativeFunctionValue(realm, \"Set\", \"Set\", 0, (context, [iterable], argCount, NewTarget) => {\n    // 1. If NewTarget is undefined, throw a TypeError exception.\n    if (!NewTarget) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let set be ? OrdinaryCreateFromConstructor(NewTarget, \"%SetPrototype%\", « [[SetData]] »).\n    let set = OrdinaryCreateFromConstructor(realm, NewTarget, \"SetPrototype\", {\n      $SetData: undefined\n    });\n\n    // 3. Set set's [[SetData]] internal slot to a new empty List.\n    set.$SetData = [];\n\n    // 4. If iterable is not present, let iterable be undefined.\n    if (!iterable) iterable = realm.intrinsics.undefined;\n\n    // 5. If iterable is either undefined or null, let iter be undefined.\n    let iter, adder;\n    if (HasSomeCompatibleType(realm, iterable, UndefinedValue, NullValue)) {\n      adder = realm.intrinsics.undefined;\n      iter = realm.intrinsics.undefined;\n    } else { // 6. Else,\n      // a. Let adder be ? Get(set, \"add\").\n      adder = Get(realm, set, \"add\");\n\n      // b. If IsCallable(adder) is false, throw a TypeError exception.\n      if (!IsCallable(realm, adder)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // c. Let iter be ? GetIterator(iterable).\n      iter = GetIterator(realm, iterable);\n    }\n\n    // 7. If iter is undefined, return set.\n    if (iter instanceof UndefinedValue) {\n      return set;\n    }\n\n    // 8. Repeat\n    while (true) {\n      // a. Let next be ? IteratorStep(iter).\n      let next = IteratorStep(realm, iter);\n\n      // b. If next is false, return set.\n      if (!next) return set;\n\n      // c. Let nextValue be ? IteratorValue(next).\n      let nextValue = IteratorValue(realm, next);\n\n      // d. Let status be Call(adder, set, « nextValue.[[Value]] »).\n      try {\n        Call(realm, adder, set, [nextValue]);\n      } catch (status) {\n        if (status instanceof AbruptCompletion) {\n          // e. If status is an abrupt completion, return ? IteratorClose(iter, status).\n          throw IteratorClose(realm, iter, status);\n        } else\n          throw status;\n      }\n    }\n\n    invariant(false);\n  });\n\n  // ECMA262 23.2.2.2\n  func.defineNativeGetter(realm.intrinsics.SymbolSpecies, (context) => {\n    // 1. Return the this value\n    return context;\n  });\n\n  return func;\n}\n"]}