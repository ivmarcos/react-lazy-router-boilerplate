{"version":3,"sources":["../../../src/intrinsics/ecma262/ObjectProto_toString.js"],"names":["realm","context","O","builtinTag","isArray","$StringData","$ParameterMap","$Call","$ErrorData","$BooleanData","$NumberData","$DateValue","$RegExpMatcher","tag","intrinsics","SymbolToStringTag","value"],"mappings":";;;;;;kBAiBe,UAAUA,KAAV,EAA6C;AAC1D;AACA,SAAO,+BAAwBA,KAAxB,EAA+B,2BAA/B,EAA4D,UAA5D,EAAwE,CAAxE,EAA2E,UAACC,OAAD,EAAa;AAC/F;AACA,QAAIA,wCAAJ,EAAuC,OAAO,uBAAgBD,KAAhB,EAAuB,oBAAvB,CAAP;;AAEvC;AACA,QAAIC,mCAAJ,EAAkC,OAAO,uBAAgBD,KAAhB,EAAuB,eAAvB,CAAP;;AAElC;AACA,QAAIE,IAAI,yBAAgBF,KAAhB,EAAuBC,OAAvB,CAAR;;AAEA,QAAIE,mBAAJ;;AAEA;AACA,QAAIC,UAAU,iBAAQJ,KAAR,EAAeE,CAAf,CAAd;;AAEA;AACA,QAAIE,OAAJ,EAAaD,aAAa,OAAb;;AAEb;AAFA,SAGK,IAAID,EAAEG,WAAN,EAAmBF,aAAa,QAAb;;AAExB;AAFK,WAGA,IAAID,EAAEI,aAAN,EAAqBH,aAAa,WAAb;;AAE1B;AAFK,aAGA,IAAID,EAAEK,KAAN,EAAaJ,aAAa,UAAb;;AAElB;AAFK,eAGA,IAAID,EAAEM,UAAN,EAAkBL,aAAa,OAAb;;AAEvB;AAFK,iBAGA,IAAID,EAAEO,YAAN,EAAoBN,aAAa,SAAb;;AAEzB;AAFK,mBAGA,IAAID,EAAEQ,WAAN,EAAmBP,aAAa,QAAb;;AAExB;AAFK,qBAGA,IAAID,EAAES,UAAN,EAAkBR,aAAa,MAAb;;AAEvB;AAFK,uBAGA,IAAID,EAAEU,cAAN,EAAsBT,aAAa,QAAb;;AAE3B;AAFK,yBAGAA,aAAa,QAAb;;AAEL;AACA,QAAIU,MAAM,cAAIb,KAAJ,EAAWE,CAAX,EAAcF,MAAMc,UAAN,CAAiBC,iBAA/B,CAAV;;AAEA;AACAF,UAAMA,oCAA6BA,IAAIG,KAAjC,GAAyCb,UAA/C;;AAEA;AACA,WAAO,uBAAgBH,KAAhB,eAAkCa,GAAlC,OAAP;AACD,GArDQ,EAqDN,KArDM,CAAP;AAuDD,C;;AA9DD;;AACA;;AACA;;AACA","file":"ObjectProto_toString.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue, UndefinedValue, StringValue,  NullValue } from \"../../values/index.js\";\nimport { ToObjectPartial } from \"../../methods/to.js\";\nimport { IsArray } from \"../../methods/is.js\";\nimport { Get } from \"../../methods/get.js\";\n\nexport default function (realm: Realm): NativeFunctionValue {\n  // ECMA262 22.1.3.30\n  return new NativeFunctionValue(realm, \"Object.prototype.toString\", \"toString\", 0, (context) => {\n  // 1. If the this value is undefined, return \"[object Undefined]\".\n  if (context instanceof UndefinedValue) return new StringValue(realm, \"[object Undefined]\");\n\n  // 2. If the this value is null, return \"[object Null]\".\n  if (context instanceof NullValue) return new StringValue(realm, \"[object Null]\");\n\n  // 3. Let O be ToObject(this value).\n  let O = ToObjectPartial(realm, context);\n\n  let builtinTag;\n\n  // 4. Let isArray be ? IsArray(O).\n  let isArray = IsArray(realm, O);\n\n  // 5. If isArray is true, let builtinTag be \"Array\".\n  if (isArray) builtinTag = \"Array\";\n\n  // 6. Else, if O is an exotic String object, let builtinTag be \"String\".\n  else if (O.$StringData) builtinTag = \"String\";\n\n  // 7. Else, if O has an [[ParameterMap]] internal slot, let builtinTag be \"Arguments\".\n  else if (O.$ParameterMap) builtinTag = \"Arguments\";\n\n  // 8. Else, if O has a [[Call]] internal method, let builtinTag be \"Function\".\n  else if (O.$Call) builtinTag = \"Function\";\n\n  // 9. Else, if O has an [[ErrorData]] internal slot, let builtinTag be \"Error\".\n  else if (O.$ErrorData) builtinTag = \"Error\";\n\n  // 10. Else, if O has a [[BooleanData]] internal slot, let builtinTag be \"Boolean\".\n  else if (O.$BooleanData) builtinTag = \"Boolean\";\n\n  // 11. Else, if O has a [[NumberData]] internal slot, let builtinTag be \"Number\".\n  else if (O.$NumberData) builtinTag = \"Number\";\n\n  // 12. Else, if O has a [[DateValue]] internal slot, let builtinTag be \"Date\".\n  else if (O.$DateValue) builtinTag = \"Date\";\n\n  // 13. Else, if O has a [[RegExpMatcher]] internal slot, let builtinTag be \"RegExp\".\n  else if (O.$RegExpMatcher) builtinTag = \"RegExp\";\n\n  // 14. Else, let builtinTag be \"Object\".\n  else builtinTag = \"Object\";\n\n  // 15. Let tag be ? Get(O, @@toStringTag).\n  let tag = Get(realm, O, realm.intrinsics.SymbolToStringTag);\n\n  // 16. If Type(tag) is not String, let tag be builtinTag.\n  tag = tag instanceof StringValue ? tag.value : builtinTag;\n\n  // 17. Return the String that is the result of concatenating \"[object \", tag, and \"]\".\n  return new StringValue(realm, `[object ${tag}]`);\n}, false);\n\n}\n"]}