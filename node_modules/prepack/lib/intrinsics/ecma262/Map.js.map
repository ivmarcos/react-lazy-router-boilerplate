{"version":3,"sources":["../../../src/intrinsics/ecma262/Map.js"],"names":["realm","func","context","argCount","NewTarget","iterable","createErrorThrowCompletion","intrinsics","TypeError","map","$MapData","undefined","iter","adder","next","nextItem","error","k","kCompletion","v","vCompletion","status","statusCompletion","defineNativeGetter","SymbolSpecies"],"mappings":";;;;;;ypBAAA;;;;;;;;;kBA2Be,UAAUA,KAAV,EAA6C;AAC1D,MAAIC,OAAO,+BAAwBD,KAAxB,EAA+B,KAA/B,EAAsC,KAAtC,EAA6C,CAA7C,EAAgD,UAACE,OAAD,QAAsBC,QAAtB,EAAgCC,SAAhC,EAA8C;AAAA;AAAA,QAAnCC,QAAmC;;AACvG;AACA,QAAI,CAACD,SAAL,EAAgB;AACd,YAAMJ,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,QAAIC,MAAM,2CAA8BT,KAA9B,EAAqCI,SAArC,EAAgD,cAAhD,EAAgE;AACxEM,gBAAUC;AAD8D,KAAhE,CAAV;;AAIA;AACAF,QAAIC,QAAJ,GAAe,EAAf;;AAEA;AACA,QAAI,CAACL,QAAL,EAAeA,WAAWL,MAAMO,UAAN,CAAiBI,SAA5B;;AAEf;AACA,QAAIC,aAAJ;AAAA,QAAUC,cAAV;AACA,QAAI,mCAAsBb,KAAtB,EAA6BK,QAA7B,0CAAJ,EAAuE;AACrEQ,cAAQb,MAAMO,UAAN,CAAiBI,SAAzB;AACAC,aAAOZ,MAAMO,UAAN,CAAiBI,SAAxB;AACD,KAHD,MAGO;AAAE;AACP;AACAE,cAAQ,iBAAIb,KAAJ,EAAWS,GAAX,EAAgB,KAAhB,CAAR;;AAEA;AACA,UAAI,CAAC,wBAAWT,KAAX,EAAkBa,KAAlB,CAAL,EAA+B;AAC7B,cAAMb,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACAI,aAAO,yBAAYZ,KAAZ,EAAmBK,QAAnB,CAAP;AACD;;AAED;AACA,QAAIO,qCAAJ,EAAoC,OAAOH,GAAP;;AAEpC;AACA,WAAO,IAAP,EAAa;AACX;AACA,UAAIK,OAAO,0BAAad,KAAb,EAAoBY,IAApB,CAAX;;AAEA;AACA,UAAI,CAACE,IAAL,EAAW,OAAOL,GAAP;;AAEX;AACA,UAAIM,WAAW,2BAAcf,KAAd,EAAqBc,IAArB,CAAf;;AAEA;AACA,UAAI,EAAEC,sCAAF,KAAsC,EAAEA,8CAAF,CAA1C,EAAsF;AACpF;AACA,YAAIC,QAAQhB,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,CAAZ;;AAEA;AACA,cAAM,2BAAcR,KAAd,EAAqBY,IAArB,EAA2BI,KAA3B,CAAN;AACD;;AAED;AACA,UAAIC,UAAJ;AACA,UAAI;AACFA,YAAI,iBAAIjB,KAAJ,EAAWe,QAAX,EAAqB,GAArB,CAAJ;AACD,OAFD,CAEE,OAAOG,WAAP,EAAoB;AACpB,YAAIA,oDAAJ,EAA6C;AAC3C;AACA,gBAAM,2BAAclB,KAAd,EAAqBY,IAArB,EAA2BM,WAA3B,CAAN;AACD,SAHD,MAIE,MAAMA,WAAN;AACH;;AAED;AACA,UAAIC,UAAJ;AACA,UAAI;AACFA,YAAI,iBAAInB,KAAJ,EAAWe,QAAX,EAAqB,GAArB,CAAJ;AACD,OAFD,CAEE,OAAOK,WAAP,EAAoB;AACpB,YAAIA,oDAAJ,EAA6C;AAC3C;AACA,gBAAM,2BAAcpB,KAAd,EAAqBY,IAArB,EAA2BQ,WAA3B,CAAN;AACD,SAHD,MAIE,MAAMA,WAAN;AACH;;AAED;AACA,UAAIC,eAAJ;AACA,UAAI;AACFA,iBAAS,kBAAKrB,KAAL,EAAYa,KAAZ,EAAmBJ,GAAnB,EAAwB,CAACQ,CAAD,EAAIE,CAAJ,CAAxB,CAAT;AACD,OAFD,CAEE,OAAOG,gBAAP,EAAyB;AACzB,YAAIA,yDAAJ,EAAkD;AAChD;AACA,gBAAM,2BAActB,KAAd,EAAqBY,IAArB,EAA2BU,gBAA3B,CAAN;AACD,SAHD,MAIE,MAAMA,gBAAN;AACH;AACDD;AACD;;AAED,6BAAU,KAAV;AACD,GAjGU,CAAX;;AAmGA;AACApB,OAAKsB,kBAAL,CAAwBvB,MAAMO,UAAN,CAAiBiB,aAAzC,EAAwD,UAACtB,OAAD,EAAa;AACnE;AACA,WAAOA,OAAP;AACD,GAHD;;AAKA,SAAOD,IAAP;AACD,C;;AA1HD;;AACA;;AACA;;AAWA","file":"Map.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue, ObjectValue, AbstractObjectValue, NullValue, UndefinedValue } from \"../../values/index.js\";\nimport { AbruptCompletion } from \"../../completions.js\";\nimport {\n  OrdinaryCreateFromConstructor,\n  Get,\n  IsCallable,\n  IteratorStep,\n  IteratorClose,\n  IteratorValue,\n  GetIterator,\n  Call,\n  HasSomeCompatibleType\n} from \"../../methods/index.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function (realm: Realm): NativeFunctionValue {\n  let func = new NativeFunctionValue(realm, \"Map\", \"Map\", 0, (context, [iterable], argCount, NewTarget) => {\n    // 1. If NewTarget is undefined, throw a TypeError exception.\n    if (!NewTarget) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let map be ? OrdinaryCreateFromConstructor(NewTarget, \"%MapPrototype%\", « [[MapData]] »).\n    let map = OrdinaryCreateFromConstructor(realm, NewTarget, \"MapPrototype\", {\n      $MapData: undefined\n    });\n\n    // 3. Set map's [[MapData]] internal slot to a new empty List.\n    map.$MapData = [];\n\n    // 4. If iterable is not present, let iterable be undefined.\n    if (!iterable) iterable = realm.intrinsics.undefined;\n\n    // 5. If iterable is either undefined or null, let iter be undefined.\n    let iter, adder;\n    if (HasSomeCompatibleType(realm, iterable, NullValue, UndefinedValue)) {\n      adder = realm.intrinsics.undefined;\n      iter = realm.intrinsics.undefined;\n    } else { // 6. Else,\n      // a. Let adder be ? Get(map, \"set\").\n      adder = Get(realm, map, \"set\");\n\n      // b. If IsCallable(adder) is false, throw a TypeError exception.\n      if (!IsCallable(realm, adder)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // c. Let iter be ? GetIterator(iterable).\n      iter = GetIterator(realm, iterable);\n    }\n\n    // 7. If iter is undefined, return map.\n    if (iter instanceof UndefinedValue) return map;\n\n    // 8. Repeat\n    while (true) {\n      // a. Let next be ? IteratorStep(iter).\n      let next = IteratorStep(realm, iter);\n\n      // b. If next is false, return map.\n      if (!next) return map;\n\n      // c. Let nextItem be ? IteratorValue(next).\n      let nextItem = IteratorValue(realm, next);\n\n      // d. If Type(nextItem) is not Object, then\n      if (!(nextItem instanceof ObjectValue) && !(nextItem instanceof AbstractObjectValue)) {\n        // i. Let error be Completion{[[Type]]: throw, [[Value]]: a newly created TypeError object, [[Target]]: empty}.\n        let error = realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n\n        // ii. Return ? IteratorClose(iter, error).\n        throw IteratorClose(realm, iter, error);\n      }\n\n      // e. Let k be Get(nextItem, \"0\").\n      let k;\n      try {\n        k = Get(realm, nextItem, \"0\");\n      } catch (kCompletion) {\n        if (kCompletion instanceof AbruptCompletion) {\n          // f. If k is an abrupt completion, return ? IteratorClose(iter, k).\n          throw IteratorClose(realm, iter, kCompletion);\n        } else\n          throw kCompletion;\n      }\n\n      // g. Let v be Get(nextItem, \"1\").\n      let v;\n      try {\n        v = Get(realm, nextItem, \"1\");\n      } catch (vCompletion) {\n        if (vCompletion instanceof AbruptCompletion) {\n          // h. If v is an abrupt completion, return ? IteratorClose(iter, v).\n          throw IteratorClose(realm, iter, vCompletion);\n        } else\n          throw vCompletion;\n      }\n\n      // i. Let status be Call(adder, map, « k.[[Value]], v.[[Value]] »).\n      let status;\n      try {\n        status = Call(realm, adder, map, [k, v]);\n      } catch (statusCompletion) {\n        if (statusCompletion instanceof AbruptCompletion) {\n          // j. If status is an abrupt completion, return ? IteratorClose(iter, status).\n          throw IteratorClose(realm, iter, statusCompletion);\n        } else\n          throw statusCompletion;\n      }\n      status;\n    }\n\n    invariant(false);\n  });\n\n  // ECMA262 23.1.2.2\n  func.defineNativeGetter(realm.intrinsics.SymbolSpecies, (context) => {\n    // 1. Return the this value\n    return context;\n  });\n\n  return func;\n}\n"]}