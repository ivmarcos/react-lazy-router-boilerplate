{"version":3,"sources":["../../../src/intrinsics/ecma262/parseFloat.js"],"names":["realm","context","string","intrinsics","NaN","inputString","parseFloat"],"mappings":";;;;;;ypBAAA;;;;;;;;;kBAgBe,UAAUA,KAAV,EAA6C;AAC1D;AACA,SAAO,+BAAwBA,KAAxB,EAA+B,YAA/B,EAA6C,YAA7C,EAA2D,CAA3D,EAA8D,UAACC,OAAD,QAAuB;AAAA;AAAA,QAAZC,MAAY;;AAC1F,QAAI,CAACA,MAAL,EAAa,OAAOF,MAAMG,UAAN,CAAiBC,GAAxB;;AAEb;AACA,QAAIC,cAAc,yBAAgBL,KAAhB,EAAuBE,MAAvB,CAAlB;;AAEA,WAAO,uBAAgBF,KAAhB,EAAuBM,WAAWD,WAAX,CAAvB,CAAP;AACD,GAPM,EAOJ,KAPI,CAAP;AAQD,C;;AAdD;;AAEA","file":"parseFloat.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { NumberValue } from \"../../values/index.js\";\nimport { ToStringPartial } from \"../../methods/to.js\";\n\nexport default function (realm: Realm): NativeFunctionValue {\n  // ECMA262 18.2.4\n  return new NativeFunctionValue(realm, \"parseFloat\", \"parseFloat\", 1, (context, [string]) => {\n    if (!string) return realm.intrinsics.NaN;\n\n    // 1. Let inputString be ? ToString(string).\n    let inputString = ToStringPartial(realm, string);\n\n    return new NumberValue(realm, parseFloat(inputString));\n  }, false);\n}\n"]}