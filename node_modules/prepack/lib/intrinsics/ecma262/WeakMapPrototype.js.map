{"version":3,"sources":["../../../src/intrinsics/ecma262/WeakMapPrototype.js"],"names":["realm","obj","defineNativeProperty","intrinsics","SymbolToStringTag","writable","defineNativeMethod","context","key","M","throwIfNotConcrete","createErrorThrowCompletion","TypeError","$WeakMapData","entries","undefined","false","p","$Key","$Value","true","value","push"],"mappings":"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","file":"WeakMapPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { StringValue, ObjectValue } from \"../../values/index.js\";\nimport { SameValuePartial, ThrowIfInternalSlotNotWritable } from \"../../methods/index.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function (realm: Realm, obj: ObjectValue): void {\n  // ECMA262 23.3.3.6\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"WeakMap\"), { writable: false });\n\n  // ECMA262 23.3.3.2\n  obj.defineNativeMethod(\"delete\", 1, (context, [key]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[WeakMapData]] internal slot, throw a TypeError exception.\n    if (!M.$WeakMapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[WeakMapData]] internal slot.\n    let entries = M.$WeakMapData;\n    invariant(entries !== undefined);\n\n    // 5. If Type(key) is not Object, return false.\n    key = key.throwIfNotConcrete();\n    if (!(key instanceof ObjectValue)) {\n      return realm.intrinsics.false;\n    }\n\n    // 6. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. If p.[[Key]] is not empty and SameValue(p.[[Key]], key) is true, then\n      if (p.$Key !== undefined && SameValuePartial(realm, p.$Key, key)) {\n        ThrowIfInternalSlotNotWritable(realm, M, \"$WeakMapData\");\n\n        // i. Set p.[[Key]] to empty.\n        p.$Key = undefined;\n\n        // ii. Set p.[[Value]] to empty.\n        p.$Value = undefined;\n\n        // iii. Return true.\n        return realm.intrinsics.true;\n      }\n    }\n\n    // 7. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.3.3.3\n  obj.defineNativeMethod(\"get\", 1, (context, [key]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[WeakMapData]] internal slot, throw a TypeError exception.\n    if (!M.$WeakMapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[WeakMapData]] internal slot.\n    let entries = M.$WeakMapData;\n    invariant(entries !== undefined);\n\n    // 5. If Type(key) is not Object, return undefined.\n    key = key.throwIfNotConcrete();\n    if (!(key instanceof ObjectValue)) {\n      return realm.intrinsics.undefined;\n    }\n\n    // 6. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. If p.[[Key]] is not empty and SameValue(p.[[Key]], key) is true, return p.[[Value]].\n      if (p.$Key !== undefined && SameValuePartial(realm, p.$Key, key)) {\n        invariant(p.$Value !== undefined);\n        return p.$Value;\n      }\n    }\n\n    // 7. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 23.3.3.4\n  obj.defineNativeMethod(\"has\", 1, (context, [key]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[WeakMapData]] internal slot, throw a TypeError exception.\n    if (!M.$WeakMapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[WeakMapData]] internal slot.\n    let entries = M.$WeakMapData;\n    invariant(entries !== undefined);\n\n    // 5. If Type(key) is not Object, return false.\n    key = key.throwIfNotConcrete();\n    if (!(key instanceof ObjectValue)) {\n      return realm.intrinsics.false;\n    }\n\n    // 6. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. If p.[[Key]] is not empty and SameValue(p.[[Key]], key) is true, return true.\n      if (p.$Key !== undefined && SameValuePartial(realm, p.$Key, key)) return realm.intrinsics.true;\n    }\n\n    // 7. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 23.3.3.5\n  obj.defineNativeMethod(\"set\", 2, (context, [key, value]) => {\n    // 1. Let M be the this value.\n    let M = context.throwIfNotConcrete();\n\n    // 2. If Type(M) is not Object, throw a TypeError exception.\n    if (!(M instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. If M does not have a [[WeakMapData]] internal slot, throw a TypeError exception.\n    if (!M.$WeakMapData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let entries be the List that is the value of M's [[WeakMapData]] internal slot.\n    let entries = ThrowIfInternalSlotNotWritable(realm, M, \"$WeakMapData\").$WeakMapData;\n    invariant(entries !== undefined);\n\n    // 5. If Type(key) is not Object, throw a TypeError exception.\n    key = key.throwIfNotConcrete();\n    if (!(key instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 6. Repeat for each Record {[[Key]], [[Value]]} p that is an element of entries,\n    for (let p of entries) {\n      // a. If p.[[Key]] is not empty and SameValue(p.[[Key]], key) is true, then\n      if (p.$Key !== undefined && SameValuePartial(realm, p.$Key, key)) {\n        // i. Set p.[[Value]] to value.\n        p.$Value = value;\n\n        // ii. Return M.\n        return M;\n      }\n    }\n\n    // 7. Let p be the Record {[[Key]]: key, [[Value]]: value}.\n    let p = { $Key: key, $Value: value };\n\n    // 8. Append p as the last element of entries.\n    entries.push(p);\n\n    // 9. Return M.\n    return M;\n  });\n}\n"]}