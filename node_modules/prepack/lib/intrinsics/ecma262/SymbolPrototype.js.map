{"version":3,"sources":["../../../src/intrinsics/ecma262/SymbolPrototype.js"],"names":["realm","obj","defineNativeMethod","context","s","throwIfNotConcrete","sym","createErrorThrowCompletion","intrinsics","TypeError","$SymbolData","SymbolToPrimitive","hint","writable","defineNativeProperty","SymbolToStringTag"],"mappings":";;;;;;ypBAAA;;;;;;;;;kBAee,UAAUA,KAAV,EAAwBC,GAAxB,EAAgD;AAC7D;AACAA,MAAIC,kBAAJ,CAAuB,UAAvB,EAAmC,CAAnC,EAAsC,UAACC,OAAD,EAAa;AACjD;AACA,QAAIC,IAAID,QAAQE,kBAAR,EAAR;;AAEA;AACA,QAAIC,YAAJ;AACA,QAAIF,+BAAJ,EAA8B;AAC5BE,YAAMF,CAAN;AACD,KAFD,MAEO;AAAE;AACP;AACA,UAAI,EAAEA,+BAAF,CAAJ,EAAiC;AAC/B,cAAMJ,MAAMO,0BAAN,CAAiCP,MAAMQ,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,UAAI,CAACL,EAAEM,WAAP,EAAoB;AAClB,cAAMV,MAAMO,0BAAN,CAAiCP,MAAMQ,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACAH,YAAMF,EAAEM,WAAR;AACD;;AAED;AACA,WAAO,uBAAgBV,KAAhB,EAAuB,qCAAwBA,KAAxB,EAA+BM,GAA/B,CAAvB,CAAP;AACD,GAzBD;;AA2BA;AACAL,MAAIC,kBAAJ,CAAuB,SAAvB,EAAkC,CAAlC,EAAqC,UAACC,OAAD,EAAa;AAChD;AACA,QAAIC,IAAID,QAAQE,kBAAR,EAAR;;AAEA;AACA,QAAID,+BAAJ,EAA8B,OAAOA,CAAP;;AAE9B;AACA,QAAI,EAAEA,+BAAF,CAAJ,EAAiC;AAC/B,YAAMJ,MAAMO,0BAAN,CAAiCP,MAAMQ,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,QAAI,CAACL,EAAEM,WAAP,EAAoB;AAClB,YAAMV,MAAMO,0BAAN,CAAiCP,MAAMQ,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,WAAOL,EAAEM,WAAT;AACD,GAnBD;;AAqBA;AACAT,MAAIC,kBAAJ,CAAuBF,MAAMQ,UAAN,CAAiBG,iBAAxC,EAA2D,CAA3D,EAA8D,UAACR,OAAD,QAAqB;AAAA;AAAA,QAAVS,IAAU;;AACjF;AACA,QAAIR,IAAID,QAAQE,kBAAR,EAAR;;AAEA;AACA,QAAID,+BAAJ,EAA8B,OAAOA,CAAP;;AAE9B;AACA,QAAI,EAAEA,+BAAF,CAAJ,EAAiC;AAC/B,YAAMJ,MAAMO,0BAAN,CAAiCP,MAAMQ,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,QAAI,CAACL,EAAEM,WAAP,EAAoB;AAClB,YAAMV,MAAMO,0BAAN,CAAiCP,MAAMQ,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,WAAOL,EAAEM,WAAT;AACD,GAnBD,EAmBG,EAAEG,UAAU,KAAZ,EAnBH;;AAqBA;AACAZ,MAAIa,oBAAJ,CAAyBd,MAAMQ,UAAN,CAAiBO,iBAA1C,EAA6D,uBAAgBf,KAAhB,EAAuB,QAAvB,CAA7D,EAA+F,EAAEa,UAAU,KAAZ,EAA/F;AACD,C;;AA9ED;;AACA","file":"SymbolPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, StringValue, SymbolValue } from \"../../values/index.js\";\nimport { SymbolDescriptiveString } from \"../../methods/index.js\";\n\nexport default function (realm: Realm, obj: ObjectValue): void {\n  // ECMA262 19.4.3.2\n  obj.defineNativeMethod(\"toString\", 0, (context) => {\n    // 1. Let s be the this value.\n    let s = context.throwIfNotConcrete();\n\n    // 2. If Type(s) is Symbol, let sym be s.\n    let sym;\n    if (s instanceof SymbolValue) {\n      sym = s;\n    } else { // 3. Else,\n      // a. If Type(s) is not Object, throw a TypeError exception.\n      if (!(s instanceof ObjectValue)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // b. If s does not have a [[SymbolData]] internal slot, throw a TypeError exception.\n      if (!s.$SymbolData) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // c. Let sym be the value of s's [[SymbolData]] internal slot.\n      sym = s.$SymbolData;\n    }\n\n    // 4. Return SymbolDescriptiveString(sym).\n    return new StringValue(realm, SymbolDescriptiveString(realm, sym));\n  });\n\n  // ECMA262 19.4.3.3\n  obj.defineNativeMethod(\"valueOf\", 0, (context) => {\n    // 1. Let s be the this value.\n    let s = context.throwIfNotConcrete();\n\n    // 2. If Type(s) is Symbol, return s.\n    if (s instanceof SymbolValue) return s;\n\n    // 3. If Type(s) is not Object, throw a TypeError exception.\n    if (!(s instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. If s does not have a [[SymbolData]] internal slot, throw a TypeError exception.\n    if (!s.$SymbolData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 5. Return the value of s's [[SymbolData]] internal slot.\n    return s.$SymbolData;\n  });\n\n  // ECMA262 19.4.3.4\n  obj.defineNativeMethod(realm.intrinsics.SymbolToPrimitive, 1, (context, [hint]) => {\n    // 1. Let s be the this value.\n    let s = context.throwIfNotConcrete();\n\n    // 2. If Type(s) is Symbol, return s.\n    if (s instanceof SymbolValue) return s;\n\n    // 3. If Type(s) is not Object, throw a TypeError exception.\n    if (!(s instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. If s does not have a [[SymbolData]] internal slot, throw a TypeError exception.\n    if (!s.$SymbolData) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 5. Return s.[[SymbolData]].\n    return s.$SymbolData;\n  }, { writable: false });\n\n  // ECMA262 19.4.3.5\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"Symbol\"), { writable: false });\n}\n"]}