{"version":3,"sources":["../../../src/intrinsics/ecma262/ArrayPrototype.js"],"names":["realm","obj","defineNativeProperty","intrinsics","SymbolIterator","ArrayProto_values","zero","defineNativeMethod","context","args","argCount","O","throwIfNotConcrete","A","n","items","length","E","shift","spreadable","k","len","Math","pow","createErrorThrowCompletion","TypeError","P","exists","subElement","isCompatibleWith","MOBILE_JSC_VERSION","target","start","end","relativeTarget","to","max","min","relativeStart","from","relativeEnd","final","count","direction","fromKey","toKey","fromPresent","fromVal","callbackfn","thisArg","T","undefined","Pk","kPresent","kValue","testResult","false","true","value","selected","predicate","searchElement","fromIndex","elementK","Object","is","same","separator","sep","emptyString","element0","R","S","element","next","mappedValue","newLen","indx","initialValue","accumulator","middle","floor","lower","upper","upperP","lowerP","lowerExists","lowerValue","upperExists","upperValue","first","frm","comparefn","isSparse","i","elem","$GetOwnProperty","toString","sparse","proto","$GetPrototypeOf","j","Error","prop","configurable","writable","SortCompare","x","y","mightBeUndefined","v","isNaN","xString","yString","xSmaller","ySmaller","arr","comparefn_","result_","numb","val","$Get","sort","hasOwnProperty","ok","$Set","argLength","deleteCount","actualStart","insertCount","actualDeleteCount","dc","fromValue","itemCount","array","firstElement","nextElement","ArrayProto_toString","unscopableList","null","SymbolUnscopables"],"mappings":"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","file":"ArrayPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NumberValue, StringValue, ObjectValue, UndefinedValue, NullValue, Value } from \"../../values/index.js\";\nimport invariant from \"../../invariant.js\";\nimport { ObjectCreate, CreateDataProperty } from \"../../methods/create.js\";\nimport { SameValueZeroPartial, AbstractRelationalComparison } from \"../../methods/abstract.js\";\nimport {\n  ToLength,\n  ToObject,\n  StrictEqualityComparisonPartial,\n  IsCallable,\n  IsConcatSpreadable,\n  IsExtensible,\n  HasOwnProperty,\n  HasProperty,\n  Call,\n  Invoke,\n  CreateDataPropertyOrThrow,\n  CreateArrayIterator,\n  ArraySpeciesCreate,\n  ToString,\n  ToStringPartial,\n  ToInteger,\n  ToNumber,\n  ToBooleanPartial,\n  Get,\n  DeletePropertyOrThrow,\n  Set,\n  HasSomeCompatibleType,\n  ThrowIfMightHaveBeenDeleted\n} from \"../../methods/index.js\";\n\nexport default function (realm: Realm, obj: ObjectValue): void {\n  // ECMA262 22.1.3.31\n  obj.defineNativeProperty(realm.intrinsics.SymbolIterator, realm.intrinsics.ArrayProto_values);\n\n  // ECMA262 22.1.3\n  obj.defineNativeProperty(\"length\", realm.intrinsics.zero);\n\n  // ECMA262 22.1.3.1\n  obj.defineNativeMethod(\"concat\", 1, (context, args, argCount) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let A be ? ArraySpeciesCreate(O, 0).\n    let A = ArraySpeciesCreate(realm, O, 0);\n\n    // 3. Let n be 0.\n    let n = 0;\n\n    // 4. Let items be a List whose first element is O and whose subsequent elements are, in left to right\n    //    order, the arguments that were passed to this function invocation.\n    let items = argCount === 0 ? [O] : [O, ...args];\n\n    // 5. Repeat, while items is not empty\n    while (items.length) {\n      // a. Remove the first element from items and let E be the value of the element.\n      let E = items.shift().throwIfNotConcrete();\n\n      // b. Let spreadable be ? IsConcatSpreadable(E).\n      let spreadable = IsConcatSpreadable(realm, E);\n\n      // c. If spreadable is true, then\n      if (spreadable) {\n        invariant(E instanceof ObjectValue);\n        // i. Let k be 0.\n        let k = 0;\n\n        // ii. Let len be ? ToLength(? Get(E, \"length\")).\n        let len = ToLength(realm, Get(realm, E, \"length\"));\n\n        // ii. If n + len > 2^53-1, throw a TypeError exception.\n        if (n + len > Math.pow(2, 53) - 1) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"too damn high\");\n        }\n\n        // iv. Repeat, while k < len\n        while (k < len) {\n          // 1. Let P be ! ToString(k).\n          let P = new StringValue(realm, k + \"\");\n\n          // 2. Let exists be ? HasProperty(E, P).\n          let exists = HasProperty(realm, E, P);\n\n          // 3. If exists is true, then\n          if (exists) {\n            // a. Let subElement be ? Get(E, P).\n            let subElement = Get(realm, E, P);\n\n            // b. Perform ? CreateDataPropertyOrThrow(A, ! ToString(n), subElement).\n            CreateDataPropertyOrThrow(realm, A, new StringValue(realm, n + \"\"), subElement);\n          }\n\n          // 4. Increase n by 1.\n          n++;\n\n          // 5. Increase k by 1.\n          k++;\n        }\n      } else { // d. Else E is added as a single item rather than spread,\n        // i. If n≥2^53-1, throw a TypeError exception.\n        if (n > Math.pow(2, 53) - 1) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"too damn high\");\n        }\n\n        // ii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(n), E).\n        CreateDataPropertyOrThrow(realm, A, new StringValue(realm, n + \"\"), E);\n\n        // iii. Increase n by 1.\n        n++;\n      }\n    }\n\n    // 6. Perform ? Set(A, \"length\", n, true).\n    Set(realm, A, \"length\", new NumberValue(realm, n), true);\n\n    // 7. Return A.\n    return A;\n  });\n\n  // ECMA262 22.1.3.3\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n  obj.defineNativeMethod(\"copyWithin\", 2, (context, [target, start, end]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. Let relativeTarget be ? ToInteger(target).\n    let relativeTarget = ToInteger(realm, target);\n\n    // 4. If relativeTarget < 0, let to be max((len + relativeTarget), 0); else let to be min(relativeTarget, len).\n    let to = relativeTarget < 0 ? Math.max(len + relativeTarget, 0) : Math.min(relativeTarget, len);\n\n    // 5. Let relativeStart be ? ToInteger(start).\n    let relativeStart = ToInteger(realm, start);\n\n    // 6. If relativeStart < 0, let from be max((len + relativeStart), 0); else let from be min(relativeStart, len).\n    let from = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);\n\n    // 7. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToInteger(end).\n    let relativeEnd = (!end || end instanceof UndefinedValue) ? len : ToInteger(realm, end.throwIfNotConcrete());\n\n    // 8. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let final be min(relativeEnd, len).\n    let final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);\n\n    // 9. Let count be min(final-from, len-to).\n    let count = Math.min(final - from, len - to);\n\n    let direction;\n    // 10. If from<to and to<from+count, then\n    if (from < to && to < from + count) {\n      // a. Let direction be -1.\n      direction = -1;\n\n      // b. Let from be from + count - 1.\n      from = from + count - 1;\n\n      // c. Let to be to + count - 1.\n      to = to + count - 1;\n    } else { // 11. Else,\n      // a. Let direction be 1.\n      direction = 1;\n    }\n\n    // 12. Repeat, while count > 0\n    while (count > 0) {\n      // a. Let fromKey be ! ToString(from).\n      let fromKey = ToString(realm, new NumberValue(realm, from));\n\n      // b. Let toKey be ! ToString(to).\n      let toKey = ToString(realm, new NumberValue(realm, to));\n\n      // c. Let fromPresent be ? HasProperty(O, fromKey).\n      let fromPresent = HasProperty(realm, O, fromKey);\n\n      // d. If fromPresent is true, then\n      if (fromPresent === true) {\n        // i. Let fromVal be ? Get(O, fromKey).\n        let fromVal = Get(realm, O, fromKey);\n        // ii. Perform ? Set(O, toKey, fromVal, true).\n        Set(realm, O, toKey, fromVal, true);\n      } else { // e. Else fromPresent is false,\n        // i. Perform ? DeletePropertyOrThrow(O, toKey).\n        DeletePropertyOrThrow(realm, O, toKey);\n      }\n\n      // f. Let from be from + direction.\n      from = from + direction;\n\n      // g. Let to be to + direction.\n      to = to + direction;\n\n      // h. Let count be count - 1.\n      count = count - 1;\n    }\n\n    // 13. Return O.\n    return O;\n  });\n\n  // ECMA262 22.1.3.4\n  obj.defineNativeMethod(\"entries\", 0, (context) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Return CreateArrayIterator(O, \"key+value\").\n    return CreateArrayIterator(realm, O, \"key+value\");\n  });\n\n  // ECMA262 22.1.3.5\n  obj.defineNativeMethod(\"every\", 1, (context, [callbackfn, thisArg]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n    }\n\n    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg || realm.intrinsics.undefined;\n\n    // 5. Let k be 0.\n    let k = 0;\n\n    // 6. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kPresent be ? HasProperty(O, Pk).\n      let kPresent = HasProperty(realm, O, Pk);\n\n      // c. If kPresent is true, then\n      if (kPresent) {\n        // i. Let kValue be ? Get(O, Pk).\n        let kValue = Get(realm, O, Pk);\n\n        // ii. Let testResult be ToBoolean(? Call(callbackfn, T, « kValue, k, O »)).\n        let testResult = ToBooleanPartial(realm, Call(realm, callbackfn, T, [kValue, new NumberValue(realm, k), O]));\n\n        // iii. If testResult is false, return false.\n        if (!testResult) return realm.intrinsics.false;\n      }\n\n      // d. Increase k by 1.\n      k++;\n    }\n\n    // 7. Return true.\n    return realm.intrinsics.true;\n  });\n\n  // ECMA262 22.1.3.6\n  obj.defineNativeMethod(\"fill\", 1, (context, [value, start, end]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. Let relativeStart be ? ToInteger(start).\n    let relativeStart = ToInteger(realm, start || realm.intrinsics.undefined);\n\n    // 4. If relativeStart < 0, let k be max((len + relativeStart), 0); else let k be min(relativeStart, len).\n    let k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);\n\n    // 5. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToInteger(end).\n    let relativeEnd = (!end || end instanceof UndefinedValue) ? len : ToInteger(realm, end.throwIfNotConcrete());\n\n    // 6. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let final be min(relativeEnd, len).\n    let final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);\n\n    // 7. Repeat, while k < final\n    while (k < final) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Perform ? Set(O, Pk, value, true).\n      Set(realm, O, Pk, value, true);\n\n      // c. Increase k by 1.\n      k++;\n    }\n\n    // 8. Return O.\n    return O;\n  });\n\n  // ECMA262 22.1.3.7\n  obj.defineNativeMethod(\"filter\", 1, (context, [callbackfn, thisArg]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n    }\n\n    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg || realm.intrinsics.undefined;\n\n    // 5. Let A be ? ArraySpeciesCreate(O, 0).\n    let A = ArraySpeciesCreate(realm, O, 0);\n\n    // 6. Let k be 0.\n    let k = 0;\n\n    // 7. Let to be 0.\n    let to = 0;\n\n    // 8. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kPresent be ? HasProperty(O, Pk).\n      let kPresent = HasProperty(realm, O, Pk);\n\n      // c. If kPresent is true, then\n      if (kPresent) {\n        // i. Let kValue be ? Get(O, Pk).\n        let kValue = Get(realm, O, Pk);\n\n        // ii. Let selected be ToBoolean(? Call(callbackfn, T, « kValue, k, O »)).\n        let selected = ToBooleanPartial(realm, Call(realm, callbackfn, T, [kValue, new NumberValue(realm, k), O]));\n\n        // iii. If selected is true, then\n        if (selected) {\n          // 1. Perform ? CreateDataPropertyOrThrow(A, ! ToString(to), kValue).\n          CreateDataPropertyOrThrow(realm, A, ToString(realm, new NumberValue(realm, to)), kValue);\n\n          // 2. Increase to by 1.\n          to++;\n        }\n      }\n\n      // d. Increase k by 1.\n      k++;\n    }\n\n    // 9. Return A.\n    return A;\n  });\n\n  // ECMA262 22.1.3.8\n  obj.defineNativeMethod(\"find\", 1, (context, [predicate, thisArg]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n    if (!IsCallable(realm, predicate)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n    }\n\n    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg || realm.intrinsics.undefined;\n\n    // 5. Let k be 0.\n    let k = 0;\n\n    // 6. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kValue be ? Get(O, Pk).\n      let kValue = Get(realm, O, Pk);\n\n      // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n      let testResult = ToBooleanPartial(realm, Call(realm, predicate, T, [kValue, new NumberValue(realm, k), O]));\n\n      // d. If testResult is true, return kValue.\n      if (testResult) return kValue;\n\n      // e. Increase k by 1.\n      k++;\n    }\n\n    // 7. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 22.1.3.9\n  obj.defineNativeMethod(\"findIndex\", 1, (context, [predicate, thisArg]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n    if (IsCallable(realm, predicate) === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n    }\n\n    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg ? thisArg : realm.intrinsics.undefined;\n\n    // 5. Let k be 0.\n    let k = 0;\n\n    // 6. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = ToString(realm, new NumberValue(realm, k));\n\n      // b. Let kValue be ? Get(O, Pk).\n      let kValue = Get(realm, O, new StringValue(realm, Pk));\n\n      // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n      let testResult = ToBooleanPartial(realm, Call(realm, predicate, T, [kValue, new NumberValue(realm, k), O]));\n\n      // d. If testResult is true, return k.\n      if (testResult === true) return new NumberValue(realm, k);\n\n      // e. Increase k by 1.\n      k = k + 1;\n    }\n\n    // 7. Return -1.\n    return new NumberValue(realm, -1);\n  });\n\n  // ECMA262 22.1.3.10\n  obj.defineNativeMethod(\"forEach\", 1, (context, [callbackfn, thisArg]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n    }\n\n    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg || realm.intrinsics.undefined;\n\n    // 5. Let k be 0.\n    let k = 0;\n\n    // 6. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kPresent be ? HasProperty(O, Pk).\n      let kPresent = HasProperty(realm, O, Pk);\n\n      // c. If kPresent is true, then\n      if (kPresent) {\n        // i. Let kValue be ? Get(O, Pk).\n        let kValue = Get(realm, O, Pk);\n\n        // ii. Perform ? Call(callbackfn, T, « kValue, k, O »).\n        Call(realm, callbackfn, T, [kValue, new NumberValue(realm, k), O]);\n      }\n\n      // d. Increase k by 1.\n      k++;\n    }\n\n    // 7. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 22.1.3.11\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION))\n  obj.defineNativeMethod(\"includes\", 1, (context, [searchElement, fromIndex]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If len is 0, return false.\n    if (len === 0) return realm.intrinsics.false;\n\n    // 4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step produces the value 0.)\n    let n = ToInteger(realm, fromIndex || realm.intrinsics.undefined);\n\n    let k;\n    // 5. If n ≥ 0, then\n    if (n >= 0) {\n      // a. Let k be n.\n      k = n;\n    } else { // 6. Else n < 0,\n      // a. Let k be len + n.\n      k = len + n;\n      // b. If k < 0, let k be 0.\n      if (k < 0) k = 0;\n    }\n\n    // 7. Repeat, while k < len\n    while (k < len) {\n      // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n      let elementK = Get(realm, O, ToString(realm, new NumberValue(realm, k)));\n\n      // b. If SameValueZero(searchElement, elementK) is true, return true.\n      if (SameValueZeroPartial(realm, searchElement, elementK) === true) return realm.intrinsics.true;\n\n      // c. Increase k by 1.\n      k = k + 1;\n    }\n\n    // 8. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 22.1.3.12\n  obj.defineNativeMethod(\"indexOf\", 1, (context, [searchElement, fromIndex]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If len is 0, return -1.\n    if (len === 0) return new NumberValue(realm, -1);\n\n    // 4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step produces the value 0.)\n    let n = fromIndex ? ToInteger(realm, fromIndex) : 0;\n\n    // 5. If n ≥ len, return -1.\n    if (n >= len) return new NumberValue(realm, -1);\n\n    // 6. If n ≥ 0, then\n    let k;\n    if (n >= 0) {\n      // a. If n is -0, let k be +0; else let k be n.\n      k = Object.is(n, -0) ? +0 : n;\n    } else { // 7. Else n < 0,\n      // a. Let k be len + n.\n      k = len + n;\n\n      // b. If k < 0, let k be 0.\n      if (k < 0) k = 0;\n    }\n\n    // 8. Repeat, while k < len\n    while (k < len) {\n      // a. Let kPresent be ? HasProperty(O, ! ToString(k)).\n      let kPresent = HasProperty(realm, O, k + \"\");\n\n      // b. If kPresent is true, then\n      if (kPresent === true) {\n        // i. Let elementK be ? Get(O, ! ToString(k)).\n        let elementK = Get(realm, O, k + \"\");\n\n        // ii. Let same be the result of performing Strict Equality Comparison searchElement === elementK.\n        let same = StrictEqualityComparisonPartial(realm, searchElement, elementK);\n\n        // iii. If same is true, return k.\n        if (same) return new NumberValue(realm, k);\n      }\n\n      // c. Increase k by 1.\n      k++;\n    }\n\n    // 9. Return -1.\n    return new NumberValue(realm, -1);\n  });\n\n  // ECMA262 22.1.3.13\n  obj.defineNativeMethod(\"join\", 1, (context, [separator]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If separator is undefined, let separator be the single-element String \",\".\n    if (!separator || separator instanceof UndefinedValue) separator = new StringValue(realm, \",\");\n\n    // 4. Let sep be ? ToString(separator).\n    let sep = ToStringPartial(realm, separator);\n\n    // 5. If len is zero, return the empty String.\n    if (len === 0) return realm.intrinsics.emptyString;\n\n    // 6. Let element0 be Get(O, \"0\").\n    let element0 = Get(realm, O, \"0\");\n\n    // 7. If element0 is undefined or null, let R be the empty String; otherwise, let R be ? ToString(element0).\n    let R: ?string;\n    if (HasSomeCompatibleType(realm, element0, UndefinedValue, NullValue)) {\n      R = \"\";\n    } else {\n      R = ToStringPartial(realm, element0);\n    }\n\n    // 8. Let k be 1.\n    let k = 1;\n\n    // 9. Repeat, while k < len\n    while (k < len) {\n      // a. Let S be the String value produced by concatenating R and sep.\n      let S: string = R + sep;\n\n      // b. Let element be ? Get(O, ! ToString(k)).\n      let element = Get(realm, O, new StringValue(realm, k + \"\"));\n\n      // c. If element is undefined or null, let next be the empty String; otherwise, let next be ? ToString(element).\n      let next: ?string;\n      if (HasSomeCompatibleType(realm, element, UndefinedValue, NullValue)) {\n        next = \"\";\n      } else {\n        next = ToStringPartial(realm, element);\n      }\n\n      // d. Let R be a String value produced by concatenating S and next.\n      R = S + next;\n\n      // e. Increase k by 1.\n      k++;\n    }\n\n    // 10. Return R.\n    return new StringValue(realm, R + \"\");\n  });\n\n  // ECMA262 22.1.3.14\n  obj.defineNativeMethod(\"keys\", 0, (context) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Return CreateArrayIterator(O, \"key\").\n    return CreateArrayIterator(realm, O, \"key\");\n  });\n\n  // ECMA262 22.1.3.15\n  obj.defineNativeMethod(\"lastIndexOf\", 1, (context, [searchElement, fromIndex]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If len is 0, return -1.\n    if (len === 0) return new NumberValue(realm, -1);\n\n    // 4. If argument fromIndex was passed, let n be ? ToInteger(fromIndex); else let n be len-1.\n    let n = fromIndex ? ToInteger(realm, fromIndex) : len - 1;\n\n    // 5. If n ≥ 0, then\n    let k;\n    if (n >= 0) {\n      // a. If n is -0, let k be +0; else let k be min(n, len - 1).\n      k = Object.is(n, -0) ? +0 : Math.min(n, len - 1);\n    } else { // 6. Else n < 0,\n      // a. Let k be len + n.\n      k = len + n;\n    }\n\n    // 7. Repeat, while k ≥ 0\n    while (k >= 0) {\n      // a. Let kPresent be ? HasProperty(O, ! ToString(k)).\n      let kPresent = HasProperty(realm, O, new StringValue(realm, k + \"\"));\n\n      // b. If kPresent is true, then\n      if (kPresent) {\n        // i. Let elementK be ? Get(O, ! ToString(k)).\n        let elementK = Get(realm, O, new StringValue(realm, k + \"\"));\n\n        // ii. Let same be the result of performing Strict Equality Comparison searchElement === elementK.\n        let same = StrictEqualityComparisonPartial(realm, searchElement, elementK);\n\n        // iii. If same is true, return k.\n        if (same) return new NumberValue(realm, k);\n      }\n\n      // c. Decrease k by 1.\n      k--;\n    }\n\n    // 8. Return -1.\n    return new NumberValue(realm, -1);\n  });\n\n  // ECMA262 22.1.3.16\n  obj.defineNativeMethod(\"map\", 1, (context, [callbackfn, thisArg]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n    }\n\n    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg || realm.intrinsics.undefined;\n\n    // 5. Let A be ? ArraySpeciesCreate(O, len).\n    let A = ArraySpeciesCreate(realm, O, len);\n\n    // 6. Let k be 0.\n    let k = 0;\n\n    // 7. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kPresent be ? HasProperty(O, Pk).\n      let kPresent = HasProperty(realm, O, Pk);\n\n      // c. If kPresent is true, then\n      if (kPresent) {\n        // i. Let kValue be ? Get(O, Pk).\n        let kValue = Get(realm, O, Pk);\n\n        // ii. Let mappedValue be ? Call(callbackfn, T, « kValue, k, O »).\n        let mappedValue = Call(realm, callbackfn, T, [kValue, new NumberValue(realm, k), O]);\n\n        // iii. Perform ? CreateDataPropertyOrThrow(A, Pk, mappedValue).\n        CreateDataPropertyOrThrow(realm, A, Pk, mappedValue);\n      }\n\n      // d. Increase k by 1.\n      k++;\n    }\n\n    // 8. Return A.\n    return A;\n  });\n\n  // ECMA262 22.1.3.17\n  obj.defineNativeMethod(\"pop\", 0, (context) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If len is zero, then\n    if (len === 0) {\n      // a. Perform ? Set(O, \"length\", 0, true).\n      Set(realm, O, \"length\", realm.intrinsics.zero, true);\n\n      // b. Return undefined.\n      return realm.intrinsics.undefined;\n    } else { // 4. Else len > 0,\n      // a. Let newLen be len-1.\n      let newLen = len - 1;\n\n      // b. Let indx be ! ToString(newLen).\n      let indx = new StringValue(realm, newLen + \"\");\n\n      // c. Let element be ? Get(O, indx).\n      let element = Get(realm, O, indx);\n\n      // d. Perform ? DeletePropertyOrThrow(O, indx).\n      DeletePropertyOrThrow(realm, O, indx);\n\n      // e. Perform ? Set(O, \"length\", newLen, true).\n      Set(realm, O, \"length\", new NumberValue(realm, newLen), true);\n\n      // f. Return element.\n      return element;\n    }\n  });\n\n  // ECMA262 22.1.3.18\n  obj.defineNativeMethod(\"push\", 1, (context, args, argCount) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, new StringValue(realm, \"length\")));\n\n    // 3. Let items be a List whose elements are, in left to right order, the arguments that were passed to realm function invocation.\n    let items = argCount > 0 ? args : [];\n\n    // 4. Let argCount be the number of elements in items.\n    argCount;\n\n    // 5. If len + argCount > 2^53-1, throw a TypeError exception.\n    if (len + argCount > Math.pow(2, 53) - 1) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Array.prototype\");\n    }\n\n    // 6. Repeat, while items is not empty\n    while (items.length) {\n      // a. Remove the first element from items and let E be the value of the element.\n      let E = items.shift();\n\n      // b. Perform ? Set(O, ! ToString(len), E, true).\n      Set(realm, O, new StringValue(realm, len + \"\"), E, true);\n\n      // c. Let len be len+1.\n      len++;\n    }\n\n    // 7. Perform ? Set(O, \"length\", len, true).\n    Set(realm, O, new StringValue(realm, \"length\"), new NumberValue(realm, len), true);\n\n    // 8. Return len.\n    return new NumberValue(realm, len);\n  });\n\n  // ECMA262 22.1.3.19\n  obj.defineNativeMethod(\"reduce\", 1, (context, [callbackfn, initialValue]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n    }\n\n    // 4. If len is 0 and initialValue is not present, throw a TypeError exception.\n    if (len === 0 && !initialValue) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Array.prototype\");\n    }\n\n    // 5. Let k be 0.\n    let k = 0;\n\n    // 6. If initialValue is present, then\n    let accumulator;\n    if (initialValue) {\n      // a. Set accumulator to initialValue.\n      accumulator = initialValue;\n    } else { // 7. Else initialValue is not present,\n      // a. Let kPresent be false.\n      let kPresent = false;\n\n      // b. Repeat, while kPresent is false and k < len\n      while (kPresent === false && k < len) {\n        // i. Let Pk be ! ToString(k).\n        let Pk = new StringValue(realm, k + \"\");\n\n        // ii. Let kPresent be ? HasProperty(O, Pk).\n        kPresent = HasProperty(realm, O, Pk);\n\n        // iv. If kPresent is true, then\n        if (kPresent) {\n          // 1. Let accumulator be ? Get(O, Pk).\n          accumulator = Get(realm, O, Pk);\n        }\n\n        // v. Increase k by 1.\n        k++;\n      }\n\n      // c. If kPresent is false, throw a TypeError exception.\n      if (!kPresent) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"kPresent is false\");\n      }\n\n      invariant(accumulator);\n    }\n\n    // 8. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kPresent be ? HasProperty(O, Pk).\n      let kPresent = HasProperty(realm, O, Pk);\n\n      // c. If kPresent is true, then\n      if (kPresent) {\n        // i. Let kValue be ? Get(O, Pk).\n        let kValue = Get(realm, O, Pk);\n\n        // ii. Let accumulator be ? Call(callbackfn, undefined, « accumulator, kValue, k, O »).\n        accumulator = Call(realm, callbackfn, realm.intrinsics.undefined, [accumulator, kValue, new NumberValue(realm, k), O]);\n      }\n\n      // d. Increase k by 1.\n      k++;\n    }\n\n    // 9. Return accumulator.\n    return accumulator;\n  });\n\n  // ECMA262 22.1.3.20\n  obj.defineNativeMethod(\"reduceRight\", 1, (context, [callbackfn, initialValue]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not a function\");\n    }\n\n    // 4. If len is 0 and initialValue is not present, throw a TypeError exception.\n    if (len === 0 && !initialValue) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Array.prototype\");\n    }\n\n    // 5. Let k be len-1.\n    let k = len - 1;\n\n    // 6. If initialValue is present, then\n    let accumulator;\n    if (initialValue) {\n      // 1. Set accumulator to initialValue.\n      accumulator = initialValue;\n    } else { // 7. Else initialValue is not present,\n      // a. Let kPresent be false.\n      let kPresent = false;\n\n      // b. Repeat, while kPresent is false and k ≥ 0\n      while (!kPresent && k >= 0) {\n        // i. Let Pk be ! ToString(k).\n        let Pk = new StringValue(realm, k + \"\");\n\n        // ii. Let kPresent be ? HasProperty(O, Pk).\n        kPresent = HasProperty(realm, O, Pk);\n\n        // iii. If kPresent is true, then\n        if (kPresent) {\n          // 1. Let accumulator be ? Get(O, Pk).\n          accumulator = Get(realm, O, Pk);\n        }\n\n        // iv. Decrease k by 1.\n        k--;\n      }\n\n      // c. If kPresent is false, throw a TypeError exception.\n      if (!kPresent || !accumulator) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Array.prototype\");\n      }\n    }\n\n    // 8. Repeat, while k ≥ 0\n    while (k >= 0) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kPresent be ? HasProperty(O, Pk).\n      let kPresent = HasProperty(realm, O, Pk);\n\n      // c. If kPresent is true, then\n      if (kPresent) {\n        // i. Let kValue be ? Get(O, Pk).\n        let kValue = Get(realm, O, Pk);\n\n        // ii. Let accumulator be ? Call(callbackfn, undefined, « accumulator, kValue, k, O »).\n        accumulator = Call(realm, callbackfn, realm.intrinsics.undefined, [accumulator, kValue, new NumberValue(realm, k), O]);\n      }\n\n      // d. Decrease k by 1.\n      k--;\n    }\n\n    // 9. Return accumulator.\n    return accumulator;\n  });\n\n  // ECMA262 22.1.3.21\n  obj.defineNativeMethod(\"reverse\", 0, (context) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. Let middle be floor(len/2).\n    let middle = Math.floor(len / 2);\n\n    // 4. Let lower be 0.\n    let lower = 0;\n\n    // 5. Repeat, while lower ≠ middle\n    while (lower !== middle) {\n      // a. Let upper be len - lower - 1.\n      let upper = len - lower - 1;\n\n      // b. Let upperP be ! ToString(upper).\n      let upperP = new StringValue(realm, upper + \"\");\n\n      // c. Let lowerP be ! ToString(lower).\n      let lowerP = new StringValue(realm, lower + \"\");\n\n      // d. Let lowerExists be ? HasProperty(O, lowerP).\n      let lowerExists = HasProperty(realm, O, lowerP);\n\n      // e. If lowerExists is true, then\n      let lowerValue;\n      if (lowerExists) {\n        // i. Let lowerValue be ? Get(O, lowerP).\n        lowerValue = Get(realm, O, lowerP);\n      }\n\n      // f. Let upperExists be ? HasProperty(O, upperP).\n      let upperExists = HasProperty(realm, O, upperP);\n\n      // g. If upperExists is true, then\n      let upperValue;\n      if (upperExists) {\n        // i. Let upperValue be ? Get(O, upperP).\n        upperValue = Get(realm, O, upperP);\n      }\n\n      // h. If lowerExists is true and upperExists is true, then\n      if (lowerExists && upperExists) {\n        invariant(lowerValue, \"expected lower value to exist\");\n        invariant(upperValue, \"expected upper value to exist\");\n\n        // i. Perform ? Set(O, lowerP, upperValue, true).\n        Set(realm, O, lowerP, upperValue, true);\n\n        // ii. Perform ? Set(O, upperP, lowerValue, true).\n        Set(realm, O, upperP, lowerValue, true);\n      } else if (!lowerExists && upperExists) { // i. Else if lowerExists is false and upperExists is true, then\n        invariant(upperValue, \"expected upper value to exist\");\n\n        // i. Perform ? Set(O, lowerP, upperValue, true).\n        Set(realm, O, lowerP, upperValue, true);\n\n        // ii. Perform ? DeletePropertyOrThrow(O, upperP).\n        DeletePropertyOrThrow(realm, O, upperP);\n      } else if (lowerExists && !upperExists) { // j. Else if lowerExists is true and upperExists is false, then\n        invariant(lowerValue, \"expected lower value to exist\");\n\n        // i. Perform ? DeletePropertyOrThrow(O, lowerP).\n        DeletePropertyOrThrow(realm, O, lowerP);\n\n        // ii. Perform ? Set(O, upperP, lowerValue, true).\n        Set(realm, O, upperP, lowerValue, true);\n      } else { // k. Else both lowerExists and upperExists are false,\n        // i. No action is required.\n      }\n\n      // l. Increase lower by 1.\n      lower++;\n    }\n\n    // 6. Return O.\n    return O;\n  });\n\n  // ECMA262 22.1.3.22\n  obj.defineNativeMethod(\"shift\", 0, (context) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If len is zero, then\n    if (len === 0) {\n      // a. Perform ? Set(O, \"length\", 0, true).\n      Set(realm, O, \"length\", realm.intrinsics.zero, true);\n\n      // b. Return undefined.\n      return realm.intrinsics.undefined;\n    }\n\n    // 4. Let first be ? Get(O, \"0\").\n    let first = Get(realm, O, \"0\");\n\n    // 5. Let k be 1.\n    let k = 0;\n\n    // 6. Repeat, while k < len\n    while (k < len) {\n      // a. Let from be ! ToString(k).\n      let frm = new StringValue(realm, k + \"\");\n\n      // b. Let to be ! ToString(k-1).\n      let to = new StringValue(realm, (k - 1) + \"\");\n\n      // c. Let fromPresent be ? HasProperty(O, from).\n      let fromPresent = HasProperty(realm, O, frm);\n\n      // d. If fromPresent is true, then\n      if (fromPresent) {\n        // i. Let fromVal be ? Get(O, from).\n        let fromVal = Get(realm, O, frm);\n\n        // ii. Perform ? Set(O, to, fromVal, true).\n        Set(realm, O, to, fromVal, true);\n      } else { // d. Else fromPresent is false,\n        // i. Perform ? DeletePropertyOrThrow(O, to).\n        DeletePropertyOrThrow(realm, O, to);\n      }\n\n      // e. Increase k by 1.\n      k++;\n    }\n\n    // 7. Perform ? DeletePropertyOrThrow(O, ! ToString(len-1)).\n    DeletePropertyOrThrow(realm, O, new StringValue(realm, (len - 1) + \"\"));\n\n    // 8. Perform ? Set(O, \"length\", len-1, true).\n    Set(realm, O, \"length\", new NumberValue(realm, len - 1), true);\n\n    // 9. Return first.\n    return first;\n  });\n\n  // ECMA262 22.1.3.23\n  obj.defineNativeMethod(\"slice\", 2, (context, [start, end]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. Let relativeStart be ? ToInteger(start).\n    let relativeStart = ToInteger(realm, start);\n\n    // 4. If relativeStart < 0, let k be max((len + relativeStart), 0); else let k be min(relativeStart, len).\n    let k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);\n\n    // 5. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToInteger(end).\n    let relativeEnd = !end || end instanceof UndefinedValue ? len : ToInteger(realm, end.throwIfNotConcrete());\n\n    // 6. If relativeEnd < 0, let final be max((len + relativeEnd), 0); else let final be min(relativeEnd, len).\n    let final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);\n\n    // 7. Let count be max(final - k, 0).\n    let count = Math.max(final - k, 0);\n\n    // 8. Let A be ? ArraySpeciesCreate(O, count).\n    let A = ArraySpeciesCreate(realm, O, count);\n\n    // 9. Let n be 0.\n    let n = 0;\n\n    // 10. Repeat, while k < final\n    while (k < final) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kPresent be ? HasProperty(O, Pk).\n      let kPresent = HasProperty(realm, O, Pk);\n\n      // c. If kPresent is true, then\n      if (kPresent) {\n        // i. Let kValue be ? Get(O, Pk).\n        let kValue = Get(realm, O, Pk);\n\n        // ii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(n), kValue).\n        CreateDataPropertyOrThrow(realm, A, new StringValue(realm, n + \"\"), kValue);\n      }\n\n      // d. Increase k by 1.\n      k++;\n\n      // e. Increase n by 1.\n      n++;\n    }\n\n    // 11. Perform ? Set(A, \"length\", n, true).\n    Set(realm, A, \"length\", new NumberValue(realm, n), true);\n\n    // 12. Return A.\n    return A;\n  });\n\n  // ECMA262 22.1.3.24\n  obj.defineNativeMethod(\"some\", 1, (context, [callbackfn, thisArg]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. If IsCallable(callbackfn) is false, throw a TypeError exception.\n    if (!IsCallable(realm, callbackfn)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError,\n        \"callback passed to Array.prototype.some isn't callable\");\n    }\n\n    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    let T = thisArg || realm.intrinsics.undefined;\n\n    // 5. Let k be 0.\n    let k = 0;\n\n    // 6. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ! ToString(k).\n      let Pk = new StringValue(realm, k + \"\");\n\n      // b. Let kPresent be ? HasProperty(O, Pk).\n      let kPresent = HasProperty(realm, O, Pk);\n\n      // c. If kPresent is true, then\n      if (kPresent) {\n        // i. Let kValue be ? Get(O, Pk).\n        let kValue = Get(realm, O, Pk);\n\n        // ii. Let testResult be ToBoolean(? Call(callbackfn, T, « kValue, k, O »)).\n        let testResult = ToBooleanPartial(realm, Call(realm, callbackfn, T, [kValue, new NumberValue(realm, k), O]));\n\n        // iii. If testResult is true, return true.\n        if (testResult) return realm.intrinsics.true;\n      }\n\n      // d. Increase k by 1.\n      k++;\n    }\n\n    // 7. Return false.\n    return realm.intrinsics.false;\n  });\n\n  // ECMA262 22.1.3.25\n  obj.defineNativeMethod(\"sort\", 1, (context, [comparefn]) => {\n\n    // 1. Let obj be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(obj, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // Within this specification of the sort method, an object, obj, is said to be sparse if the following algorithm returns true:\n    let isSparse = () => {\n      // 1.For each integer i in the range 0≤i< len\n      for (let i = 0; i < len; i++){\n        // a.Let elem be obj.[[GetOwnProperty]](! ToString(i)).\n        let elem = O.$GetOwnProperty(i.toString());\n        // b.If elem is undefined, return true.\n        if (elem === undefined) return true;\n        ThrowIfMightHaveBeenDeleted(elem.value);\n      }\n      // 2.Return false.\n      return false;\n    };\n    let sparse = isSparse();\n\n    // Let proto be obj.[[GetPrototypeOf]]().\n    let proto = O.$GetPrototypeOf();\n\n    // If proto is not null\n    if (!(proto instanceof NullValue)) {\n        // and there exists an integer j such that all of the conditions below are satisfied then the sort order is implementation-defined:\n        for (let j = 0; j < len; j++){\n          // HasProperty(proto, ToString(j)) is true.\n          if (HasProperty(realm, proto, j.toString())\n              // obj is sparse\n              && sparse)\n            // We abord when the result of the sort is implementation defined.\n            throw Error(\"Implentation defined behavior detected\");\n        }\n    }\n\n    // The sort order is also implementation defined if obj is sparse and any of the following conditions are true:\n    if (sparse) {\n      // IsExtensible(obj) is false.\n      if (!IsExtensible(realm, O))\n        throw Error(\"Implementation defined behavior, Array is both sparse and extensible\");\n      // Any integer index property of obj whose name is a nonnegative integer less than len\n      for (let j = 0; j < len; j++){\n        // is a data property whose [[Configurable]] attribute is false.\n        let prop = O.$GetOwnProperty(j.toString());\n        if (prop !== undefined && !prop.configurable) {\n          ThrowIfMightHaveBeenDeleted(prop.value);\n          throw Error(\"Implementation defined behavior :  Array is sparse and it's prototype has some numbered properties\");\n        }\n      }\n    }\n\n    // TODO exotic objects\n    // If obj is an exotic object (including Proxy exotic objects) whose behaviour for [[Get]], [[Set]], [[Delete]], and [[GetOwnProperty]]\n    // is not the ordinary object implementation of these internal methods.\n\n    // Any integer index property of obj whose name is a nonnegative integer less than len\n    for (let j = 0; j < len; j++){\n      //is a data property whose [[writable]] attribute is false.\n      let prop = O.$GetOwnProperty(j.toString());\n      if (prop !== undefined && !prop.writable) {\n        ThrowIfMightHaveBeenDeleted(prop.value);\n        throw Error(\"Implementation defined behavior : property \" + j.toString() + \"is non writable : \");\n      }\n    }\n\n\n    // TODO If comparefn is undefined and the application of ToString to any value passed as an argument to SortCompare modifies obj or any object on obj's prototype chain.\n    // TODO If comparefn is undefined and all applications of ToString, to any specific value passed as an argument to SortCompare, do not produce the same result.\n\n    // The SortCompare abstract operation is called with two arguments x and y. It also has access to the comparefn\n    // argument passed to the current invocation of the sort method. The following steps are taken:\n\n    // 22.1.3.25.1 Runtime Semantics: SortCompare( x, y )#\n    let SortCompare = (x, y) => {\n      x = x.throwIfNotConcrete();\n      y = y.throwIfNotConcrete();\n      // 1. If x and y are both undefined, return +0.\n      if (x instanceof UndefinedValue && y instanceof UndefinedValue) {\n        return realm.intrinsics.zero;\n      }\n      // 2. If x is undefined, return 1.\n      if (x instanceof UndefinedValue) {\n        return new NumberValue(realm, 1);\n      }\n      // 3. If y is undefined, return -1.\n      if (y instanceof UndefinedValue) {\n        return new NumberValue(realm, -1);\n      }\n      // 4. If the argument comparefn is not undefined, then\n      if (!comparefn.mightBeUndefined()) {\n        // a. Let v be ? ToNumber(? Call(comparefn, undefined, « x, y »)).\n        let v = ToNumber(realm, Call(realm, comparefn, new UndefinedValue(realm), [x, y]));\n        // b. If v is NaN, return +0.\n        if (isNaN(v)) return new NumberValue(realm, +0);\n        // c. Return v.\n        return new NumberValue(realm, v);\n      } else {\n        comparefn.throwIfNotConcrete();\n      }\n      // 5. Let xString be ? ToString(x).\n      let xString = new StringValue(realm, ToString(realm, x));\n      // 6. Let yString be ? ToString(y).\n      let yString = new StringValue(realm, ToString(realm, y));\n      // 7. Let xSmaller be the result of performing Abstract Relational Comparison xString < yString.\n      let xSmaller = AbstractRelationalComparison(realm, xString, yString, true);\n      // 8. If xSmaller is true, return -1.\n      if (xSmaller.value) return new NumberValue(realm, -1);\n      // 9. Let ySmaller be the result of performing Abstract Relational Comparison yString < xString.\n      let ySmaller = AbstractRelationalComparison(realm, yString, xString, true);\n      // 10. If ySmaller is true, return 1.\n      if (ySmaller.value) return new NumberValue(realm, 1);\n      // 11. Return +0.\n      return realm.intrinsics.zero;\n    };\n\n\n    //1. Perform an implementation-dependent sequence of calls to the [[Get]] and [[Set]] internal methods of obj, to the DeletePropertyOrThrow and HasOwnProperty abstract operation with obj as the first argument, and to SortCompare (described below), such that:\n    //   The property key argument for each call to [[Get]], [[Set]], HasOwnProperty, or DeletePropertyOrThrow is the string representation of a nonnegative integer less than len.\n\n\n    // We leverage the underlying implementation sort by copying the element in a temp. array, sorting it, and\n    // transfering back the value inside the our array.\n\n\n    let arr = [];\n\n    // We need to adapt the comparefn function to match the expected types\n    let comparefn_ = (x, y) => {\n      invariant(x instanceof Value, \"Unexpected type\");\n      invariant(y instanceof Value, \"Unexpected type\");\n\n      let result_ = SortCompare(x, y);\n      let numb = ToNumber(realm, result_);\n      return numb;\n    };\n\n    for (let j = 0; j < len; j++) {\n      // The property key argument for each call to [[Get]], [[Set]], HasOwnProperty, or DeletePropertyOrThrow is the string representation of a nonnegative integer less than len.\n      if (!(HasOwnProperty(realm, O, j.toString())))\n        continue;\n      // The arguments for calls to SortCompare are values returned by a previous call to the [[Get]] internal method,\n      // unless the properties accessed by those previous calls did not exist according to HasOwnProperty.\n\n      // -- Important : We rely on the fact that the underlying sort implementation respect the standard for the following 3 properties\n      // If both perspective arguments to SortCompare correspond to non-existent properties,\n      // use +0 instead of calling SortCompare. If only the first perspective argument is non-existent use +1.\n      // If only the second perspective argument is non-existent use -1.\n      let val = O.$Get(j.toString(), O);\n      arr[j] = val;\n    }\n\n    arr.sort(comparefn_);\n\n    //Apply the permutation back to the original array.\n    for (let j = 0; j < len; j++){\n      if (arr.hasOwnProperty(j.toString())){\n        let ok = O.$Set(j.toString(), arr[j], O);\n        // If any [[Set]] call returns false a TypeError exception is thrown.\n        if (!ok)\n          throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"[[Set]] returned false\");\n\n      } else {\n        // If obj is not sparse then DeletePropertyOrThrow must not be called.\n        invariant(sparse);\n        DeletePropertyOrThrow(realm, O, j.toString());\n      }\n    }\n    // If an abrupt completion is returned from any of these operations, it is immediately returned as the value of this function.\n\n    // 2. Return obj;\n    return context;\n  });\n\n  // ECMA262 22.1.3.26\n  obj.defineNativeMethod(\"splice\", 2, (context, [start, deleteCount, ...items], argLength) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. Let relativeStart be ? ToInteger(start).\n    let relativeStart = ToInteger(realm, start);\n\n    // 4. If relativeStart < 0, let actualStart be max((len + relativeStart), 0); else let actualStart be min(relativeStart, len).\n    let actualStart = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);\n\n    let insertCount;\n    let actualDeleteCount;\n\n    // 5. If the number of actual arguments is 0, then\n    if (argLength === 0) {\n      // a. Let insertCount be 0.\n      insertCount = 0;\n\n      // b. Let actualDeleteCount be 0.\n      actualDeleteCount = 0;\n    } else if (argLength === 1) { // 6. Else if the number of actual arguments is 1, then\n      // a. Let insertCount be 0.\n      insertCount = 0;\n\n      // b. Let actualDeleteCount be len - actualStart.\n      actualDeleteCount = len - actualStart;\n    } else { // 7. Else,\n      // a. Let insertCount be the number of actual arguments minus 2.\n      insertCount = argLength - 2;\n\n      // b. Let dc be ? ToInteger(deleteCount).\n      let dc = ToInteger(realm, deleteCount);\n\n      // c. Let actualDeleteCount be min(max(dc, 0), len - actualStart).\n      actualDeleteCount = Math.min(Math.max(dc, 0), len - actualStart);\n    }\n\n    // 8. If len+insertCount-actualDeleteCount > 2^53-1, throw a TypeError exception.\n    if (len + insertCount - actualDeleteCount > Math.pow(2, 53) - 1) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"the item count is too damn high\");\n    }\n\n    // 9. Let A be ? ArraySpeciesCreate(O, actualDeleteCount).\n    let A = ArraySpeciesCreate(realm, O, actualDeleteCount);\n\n    // 10. Let k be 0.\n    let k = 0;\n\n    // 11. Repeat, while k < actualDeleteCount\n    while (k < actualDeleteCount) {\n      // a. Let from be ! ToString(actualStart+k).\n      let frm = new StringValue(realm, (actualStart + k) + \"\");\n\n      // b. Let fromPresent be ? HasProperty(O, from).\n      let fromPresent = HasProperty(realm, O, frm);\n\n      // c. If fromPresent is true, then\n      if (fromPresent) {\n        // i. Let fromValue be ? Get(O, from).\n        let fromValue = Get(realm, O, frm);\n\n        // ii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(k), fromValue).\n        CreateDataPropertyOrThrow(realm, A, new StringValue(realm, k + \"\"), fromValue);\n      }\n\n      // d. Increment k by 1.\n      k++;\n    }\n\n    // 12. Perform ? Set(A, \"length\", actualDeleteCount, true).\n    Set(realm, A, \"length\", new NumberValue(realm, actualDeleteCount), true);\n\n    // 13. Let items be a List whose elements are, in left to right order, the portion of the actual argument\n    //     list starting with the third argument. The list is empty if fewer than three arguments were passed.\n    items;\n\n    // 14. Let itemCount be the number of elements in items.\n    let itemCount = items.length;\n\n    // 15. If itemCount < actualDeleteCount, then\n    if (itemCount < actualDeleteCount) {\n      // a. Let k be actualStart.\n      k = actualStart;\n\n      // b. Repeat, while k < (len - actualDeleteCount)\n      while (k < len - actualDeleteCount) {\n        // i. Let from be ! ToString(k+actualDeleteCount).\n        let frm = new StringValue(realm, (k + actualDeleteCount) + \"\");\n\n        // ii. Let to be ! ToString(k+itemCount).\n        let to = new StringValue(realm, (k + itemCount) + \"\");\n\n        // iii. Let fromPresent be ? HasProperty(O, from).\n        let fromPresent = HasProperty(realm, O, frm);\n\n        // iv. If fromPresent is true, then\n        if (fromPresent) {\n          // 1. Let fromValue be ? Get(O, from).\n          let fromValue = Get(realm, O, frm);\n\n          // 2. Perform ? Set(O, to, fromValue, true).\n          Set(realm, O, to, fromValue, true);\n        } else { // v. Else fromPresent is false,\n          // 1. Perform ? DeletePropertyOrThrow(O, to).\n          DeletePropertyOrThrow(realm, O, to);\n        }\n\n        // vi. Increase k by 1.\n        k++;\n      }\n\n      // c. Let k be len.\n      k = len;\n\n      // d. Repeat, while k > (len - actualDeleteCount + itemCount)\n      while (k > len - actualDeleteCount + itemCount) {\n        // i. Perform ? DeletePropertyOrThrow(O, ! ToString(k-1)).\n        DeletePropertyOrThrow(realm, O, new StringValue(realm, (k - 1) + \"\"));\n\n        // ii. Decrease k by 1.\n        k--;\n      }\n    } else if (itemCount > actualDeleteCount) { // 16. Else if itemCount > actualDeleteCount, then\n      // a. Let k be (len - actualDeleteCount).\n      k = len - actualDeleteCount;\n\n      // b. Repeat, while k > actualStart\n      while (k > actualStart) {\n        // i. Let from be ! ToString(k + actualDeleteCount - 1).\n        let frm = new StringValue(realm, (k + actualDeleteCount - 1) + \"\");\n\n        // ii. Let to be ! ToString(k + itemCount - 1).\n        let to = new StringValue(realm, (k + itemCount - 1) + \"\");\n\n        // iii. Let fromPresent be ? HasProperty(O, from).\n        let fromPresent = HasProperty(realm, O, frm);\n\n        // iv. If fromPresent is true, then\n        if (fromPresent) {\n          // 1. Let fromValue be ? Get(O, from).\n          let fromValue = Get(realm, O, frm);\n\n          // 2. Perform ? Set(O, to, fromValue, true).\n          Set(realm, O, to, fromValue, true);\n        } else { // v. Else fromPresent is false,\n          // 1. Perform ? DeletePropertyOrThrow(O, to).\n          DeletePropertyOrThrow(realm, O, to);\n        }\n\n        // vi. Decrease k by 1.\n        k--;\n      }\n    }\n\n    // 17. Let k be actualStart.\n    k = actualStart;\n\n    // 18. Repeat, while items is not empty\n    while (items.length) {\n      // a. Remove the first element from items and let E be the value of that element.\n      let E = items.shift();\n\n      // b. Perform ? Set(O, ! ToString(k), E, true).\n      Set(realm, O, new StringValue(realm, k + \"\"), E, true);\n\n      // c. Increase k by 1.\n      k++;\n    }\n\n    // 19. Perform ? Set(O, \"length\", len - actualDeleteCount + itemCount, true).\n    Set(realm, O, \"length\", new NumberValue(realm, len - actualDeleteCount + itemCount), true);\n\n    // 20. Return A.\n    return A;\n  });\n\n  // ECMA262 22.1.3.27\n  obj.defineNativeMethod(\"toLocaleString\", 0, (context) => {\n    // 1. Let array be ? ToObject(this value).\n    let array = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(array, \"length\")).\n    let len = ToLength(realm, Get(realm, array, \"length\"));\n\n    // 3. Let separator be the String value for the list-separator String appropriate for the host environment's\n    //    current locale (this is derived in an implementation-defined way).\n    let separator = \",\";\n\n    // 4. If len is zero, return the empty String.\n    if (len === 0) return realm.intrinsics.emptyString;\n\n    // 5. Let firstElement be ? Get(array, \"0\").\n    let firstElement = Get(realm, array, \"0\");\n\n    // 6. If firstElement is undefined or null, then\n    let R: ?string;\n    if (HasSomeCompatibleType(realm, firstElement, UndefinedValue, NullValue)) {\n      // a. Let R be the empty String.\n      R = \"\";\n    } else { // 7. Else,\n      // a. Let R be ? ToString(? Invoke(firstElement, \"toLocaleString\")).\n      R = ToStringPartial(realm, Invoke(realm, firstElement, \"toLocaleString\"));\n    }\n\n    // 8. Let k be 1.\n    let k = 1;\n\n    // 9. Repeat, while k < len\n    while (k < len) {\n      // a. Let S be a String value produced by concatenating R and separator.\n      let S: string = R + separator;\n\n      // b. Let nextElement be ? Get(array, ! ToString(k)).\n      let nextElement = Get(realm, array, new StringValue(realm, k + \"\")).throwIfNotConcrete();\n\n      // c. If nextElement is undefined or null, then\n      if (HasSomeCompatibleType(realm, nextElement, UndefinedValue, NullValue)) {\n        // i. Let R be the empty String.\n        R = \"\";\n      } else { // d. Else,\n        // i. Let R be ? ToString(? Invoke(nextElement, \"toLocaleString\")).\n        R = ToStringPartial(realm, Invoke(realm, nextElement, \"toLocaleString\"));\n      }\n\n      // e. Let R be a String value produced by concatenating S and R.\n      R = S + R;\n\n      // f. Increase k by 1.\n      k++;\n    }\n\n    // 10. Return R.\n    return new StringValue(realm, R);\n  });\n\n  // ECMA262 22.1.3.28\n  obj.defineNativeProperty(\"toString\", realm.intrinsics.ArrayProto_toString);\n\n  // ECMA262 22.1.3.29\n  obj.defineNativeMethod(\"unshift\", 1, (context, items, argCount) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let len be ? ToLength(? Get(O, \"length\")).\n    let len = ToLength(realm, Get(realm, O, \"length\"));\n\n    // 3. Let argCount be the number of actual arguments.\n    argCount;\n\n    // 4. If argCount > 0, then\n    if (argCount > 0) {\n      // a. If len+argCount > 2^53-1, throw a TypeError exception.\n      if (len + argCount > Math.pow(2, 53) - 1) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"too damn high\");\n      }\n\n      // b. Let k be len.\n      let k = len;\n\n      // c. Repeat, while k > 0,\n      while (k > 0) {\n        // i. Let from be ! ToString(k-1).\n        let frm = new StringValue(realm, (k - 1) + \"\");\n\n        // ii. Let to be ! ToString(k+argCount-1).\n        let to = new StringValue(realm, (k + argCount - 1) + \"\");\n\n        // iv. Let fromPresent be ? HasProperty(O, from).\n        let fromPresent = HasProperty(realm, O, frm);\n\n        // v. If fromPresent is true, then\n        if (fromPresent) {\n          // 1. Let fromValue be ? Get(O, from).\n          let fromValue = Get(realm, O, frm);\n\n          // 2. Perform ? Set(O, to, fromValue, true).\n          Set(realm, O, to, fromValue, true);\n        } else { // vi. Else fromPresent is false,\n          // 1. Perform ? DeletePropertyOrThrow(O, to).\n          DeletePropertyOrThrow(realm, O, to);\n        }\n\n        // vii. Decrease k by 1.\n        k--;\n      }\n\n      // e. Let j be 0.\n      let j = 0;\n\n      // f. Let items be a List whose elements are, in left to right order, the arguments that were passed to\n      //    this function invocation.\n      items;\n\n      // g. Repeat, while items is not empty\n      while (items.length) {\n        // i. Remove the first element from items and let E be the value of that element.\n        let E = items.shift();\n\n        // ii. Perform ? Set(O, ! ToString(j), E, true).\n        Set(realm, O, new StringValue(realm, j + \"\"), E, true);\n\n        // iii. Increase j by 1.\n        j++;\n      }\n    }\n\n    // 5. Perform ? Set(O, \"length\", len+argCount, true).\n    Set(realm, O, \"length\", new NumberValue(realm, len + argCount), true);\n\n    // 6. Return len+argCount.\n    return new NumberValue(realm, len + argCount);\n  });\n\n  // ECMA262 22.1.3.30\n  obj.defineNativeProperty(\"values\", realm.intrinsics.ArrayProto_values);\n\n  // ECMA262 22.1.3.32\n  {\n    // 1. Let unscopableList be ObjectCreate(null).\n    let unscopableList = ObjectCreate(realm, realm.intrinsics.null);\n\n    // 2. Perform CreateDataProperty(unscopableList, \"copyWithin\", true).\n    CreateDataProperty(realm, unscopableList, \"copyWithin\", realm.intrinsics.true);\n\n    // 3. Perform CreateDataProperty(unscopableList, \"entries\", true).\n    CreateDataProperty(realm, unscopableList, \"entries\", realm.intrinsics.true);\n\n    // 4. Perform CreateDataProperty(unscopableList, \"fill\", true).\n    CreateDataProperty(realm, unscopableList, \"fill\", realm.intrinsics.true);\n\n    // 5. Perform CreateDataProperty(unscopableList, \"find\", true).\n    CreateDataProperty(realm, unscopableList, \"find\", realm.intrinsics.true);\n\n    // 6. Perform CreateDataProperty(unscopableList, \"findIndex\", true).\n    CreateDataProperty(realm, unscopableList, \"findIndex\", realm.intrinsics.true);\n\n    // 7. Perform CreateDataProperty(unscopableList, \"includes\", true).\n    CreateDataProperty(realm, unscopableList, \"includes\", realm.intrinsics.true);\n\n    // 8. Perform CreateDataProperty(unscopableList, \"keys\", true).\n    CreateDataProperty(realm, unscopableList, \"keys\", realm.intrinsics.true);\n\n    // 9. Perform CreateDataProperty(unscopableList, \"values\", true).\n    CreateDataProperty(realm, unscopableList, \"values\", realm.intrinsics.true);\n\n    // 10. Assert: Each of the above calls will return true.\n\n    // 11. Return unscopableList.\n    obj.defineNativeProperty(realm.intrinsics.SymbolUnscopables, unscopableList, {\n      writable: false\n    });\n  }\n}\n"]}