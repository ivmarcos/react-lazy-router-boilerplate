{"version":3,"sources":["../../../src/intrinsics/ecma262/DatePrototype.js"],"names":["realm","obj","defineNativeMethod","context","t","throwIfNotConcreteNumber","value","isNaN","intrinsics","NaN","date","dt","newDate","u","$DateValue","argCount","year","month","y","m","hour","min","sec","ms","h","s","milli","time","v","Error","isFinite","createErrorThrowCompletion","RangeError","Date","toISOString","key","O","throwIfNotConcrete","tv","null","undefined","SymbolToPrimitive","hint","TypeError","tryFirst","writable","yyyy","d","dateValue","defineNativeProperty","$Get"],"mappings":"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","file":"DatePrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { StringValue, ObjectValue, NumberValue } from \"../../values/index.js\";\nimport {\n  ToNumber,\n  ToObject,\n  ToPrimitive,\n  ToInteger,\n  Invoke,\n  MakeTime,\n  thisTimeValue,\n  msFromTime,\n  TimeClip,\n  TimeWithinDay,\n  MakeDay,\n  YearFromTime,\n  DateFromTime,\n  MakeDate,\n  ToDateString,\n  HourFromTime,\n  MinFromTime,\n  Day,\n  SecFromTime,\n  WeekDay,\n  LocalTime,\n  MonthFromTime,\n  msPerMinute,\n  UTC,\n  OrdinaryToPrimitive,\n} from \"../../methods/index.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function (realm: Realm, obj: ObjectValue): void {\n  // ECMA262 20.3.4.2\n  obj.defineNativeMethod(\"getDate\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return DateFromTime(LocalTime(t)).\n    return new NumberValue(realm, DateFromTime(realm, LocalTime(realm, t)));\n  });\n\n  // ECMA262 20.3.4.3\n  obj.defineNativeMethod(\"getDay\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return WeekDay(LocalTime(t)).\n    return new NumberValue(realm, WeekDay(realm, LocalTime(realm, t)));\n  });\n\n  // ECMA262 20.3.4.4\n  obj.defineNativeMethod(\"getFullYear\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return YearFromTime(LocalTime(t)).\n    return new NumberValue(realm, YearFromTime(realm, LocalTime(realm, t)));\n  });\n\n  // ECMA262 20.3.4.5\n  obj.defineNativeMethod(\"getHours\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return HourFromTime(LocalTime(t)).\n    return new NumberValue(realm, HourFromTime(realm, LocalTime(realm, t)));\n  });\n\n  // ECMA262 20.3.4.6\n  obj.defineNativeMethod(\"getMilliseconds\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return msFromTime(LocalTime(t)).\n    return new NumberValue(realm, msFromTime(realm, LocalTime(realm, t)));\n  });\n\n  // ECMA262 20.3.4.7\n  obj.defineNativeMethod(\"getMinutes\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return MinFromTime(LocalTime(t)).\n    return new NumberValue(realm, MinFromTime(realm, LocalTime(realm, t)));\n  });\n\n  // ECMA262 20.3.4.8\n  obj.defineNativeMethod(\"getMonth\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return MonthFromTime(LocalTime(t)).\n    return new NumberValue(realm, MonthFromTime(realm, LocalTime(realm, t)));\n  });\n\n  // ECMA262 20.3.4.9\n  obj.defineNativeMethod(\"getSeconds\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return SecFromTime(LocalTime(t)).\n    return new NumberValue(realm, SecFromTime(realm, LocalTime(realm, t)));\n  });\n\n  // ECMA262 20.3.4.10\n  obj.defineNativeMethod(\"getTime\", 0, (context) => {\n    // 1. Return ? thisTimeValue(this value).\n    return thisTimeValue(realm, context);\n  });\n\n  // ECMA262 20.3.4.11\n  obj.defineNativeMethod(\"getTimezoneOffset\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return (t - LocalTime(t)) / msPerMinute.\n    return new NumberValue(realm, (t - LocalTime(realm, t)) / msPerMinute);\n  });\n\n  // ECMA262 20.3.4.12\n  obj.defineNativeMethod(\"getUTCDate\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return DateFromTime(t).\n    return new NumberValue(realm, DateFromTime(realm, t));\n  });\n\n  // ECMA262 20.3.4.13\n  obj.defineNativeMethod(\"getUTCDay\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return WeekDay(t).\n    return new NumberValue(realm, WeekDay(realm, t));\n  });\n\n  // ECMA262 20.3.4.14\n  obj.defineNativeMethod(\"getUTCFullYear\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return YearFromTime(t).\n    return new NumberValue(realm, YearFromTime(realm, t));\n  });\n\n  // ECMA262 20.3.4.15\n  obj.defineNativeMethod(\"getUTCHours\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return HourFromTime(t).\n    return new NumberValue(realm, HourFromTime(realm, t));\n  });\n\n  // ECMA262 20.3.4.16\n  obj.defineNativeMethod(\"getUTCMilliseconds\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return msFromTime(t).\n    return new NumberValue(realm, msFromTime(realm, t));\n  });\n\n  // ECMA262 20.3.4.17\n  obj.defineNativeMethod(\"getUTCMinutes\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return MinFromTime(t).\n    return new NumberValue(realm, MinFromTime(realm, t));\n  });\n\n  // ECMA262 20.3.4.18\n  obj.defineNativeMethod(\"getUTCMonth\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return MonthFromTime(t).\n    return new NumberValue(realm, MonthFromTime(realm, t));\n  });\n\n  // ECMA262 20.3.4.19\n  obj.defineNativeMethod(\"getUTCSeconds\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n    invariant(context instanceof ObjectValue);\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return SecFromTime(t).\n    return new NumberValue(realm, SecFromTime(realm, t));\n  });\n\n  // ECMA262 20.3.4.20\n  obj.defineNativeMethod(\"setDate\", 1, (context, [date]) => {\n    // 1. Let t be LocalTime(? thisTimeValue(this value)).\n    let t = LocalTime(realm, thisTimeValue(realm, context).throwIfNotConcreteNumber().value);\n    invariant(context instanceof ObjectValue);\n\n    // 2. Let dt be ? ToNumber(date).\n    let dt = ToNumber(realm, date);\n\n    // 3. Let newDate be MakeDate(MakeDay(YearFromTime(t), MonthFromTime(t), dt), TimeWithinDay(t)).\n    let newDate = MakeDate(realm, MakeDay(realm, YearFromTime(realm, t), MonthFromTime(realm, t), dt), TimeWithinDay(realm, t));\n\n    // 4. Let u be TimeClip(UTC(newDate)).\n    let u = TimeClip(realm, UTC(realm, newDate));\n\n    // 5. Set the [[DateValue]] internal slot of this Date object to u.\n    context.$DateValue = u;\n\n    // 6. Return u.\n    return u;\n  });\n\n  // ECMA262 20.3.4.21\n  obj.defineNativeMethod(\"setFullYear\", 3, (context, [year, month, date], argCount) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n    invariant(context instanceof ObjectValue);\n\n    // 2. If t is NaN, let t be +0; otherwise, let t be LocalTime(t).\n    t = isNaN(t) ? +0 : LocalTime(realm, t);\n\n    // 3. Let y be ? ToNumber(year).\n    let y = ToNumber(realm, year);\n\n    // 4. If month is not specified, let m be MonthFromTime(t); otherwise, let m be ? ToNumber(month).\n    let m = argCount >= 2 ? ToNumber(realm, month) : MonthFromTime(realm, t);\n\n    // 5. If date is not specified, let dt be DateFromTime(t); otherwise, let dt be ? ToNumber(date).\n    let dt = argCount >= 3 ? ToNumber(realm, date) : DateFromTime(realm, t);\n\n    // 6. Let newDate be MakeDate(MakeDay(y, m, dt), TimeWithinDay(t)).\n    let newDate = MakeDate(realm, MakeDay(realm, y, m, dt), TimeWithinDay(realm, t));\n\n    // 7. Let u be TimeClip(UTC(newDate)).\n    let u = TimeClip(realm, UTC(realm, newDate));\n\n    // 8. Set the [[DateValue]] internal slot of this Date object to u.\n    context.$DateValue = u;\n\n    // 9. Return u.\n    return u;\n  });\n\n  // ECMA262 20.3.4.22\n  obj.defineNativeMethod(\"setHours\", 4, (context, [hour, min, sec, ms], argCount) => {\n    // 1. Let t be LocalTime(? thisTimeValue(this value)).\n    let t = LocalTime(realm, thisTimeValue(realm, context).throwIfNotConcreteNumber().value);\n    invariant(context instanceof ObjectValue);\n\n    // 2. Let h be ? ToNumber(hour).\n    let h = ToNumber(realm, hour);\n\n    // 3. If min is not specified, let m be MinFromTime(t); otherwise, let m be ? ToNumber(min).\n    let m = argCount >= 2 ? ToNumber(realm, min) : MinFromTime(realm, t);\n\n    // 4. If sec is not specified, let s be SecFromTime(t); otherwise, let s be ? ToNumber(sec).\n    let s = argCount >= 3 ? ToNumber(realm, sec) : SecFromTime(realm, t);\n\n    // 5. If ms is not specified, let milli be msFromTime(t); otherwise, let milli be ? ToNumber(ms).\n    let milli = argCount >= 4 ? ToNumber(realm, ms) : msFromTime(realm, t);\n\n    // 6. Let date be MakeDate(Day(t), MakeTime(h, m, s, milli)).\n    let date = MakeDate(realm, Day(realm, t), MakeTime(realm, h, m, s, milli));\n\n    // 7. Let u be TimeClip(UTC(date)).\n    let u = TimeClip(realm, UTC(realm, date));\n\n    // 8. Set the [[DateValue]] internal slot of this Date object to u.\n    context.$DateValue = u;\n\n    // 9. Return u.\n    return u;\n  });\n\n  // ECMA262 20.3.4.23\n  obj.defineNativeMethod(\"setMilliseconds\", 1, (context, [ms]) => {\n    // 1. Let t be LocalTime(? thisTimeValue(this value)).\n    let t = LocalTime(realm, thisTimeValue(realm, context).throwIfNotConcreteNumber().value);\n    invariant(context instanceof ObjectValue);\n\n    // 2. Let ms be ? ToNumber(ms).\n    ms = ToNumber(realm, ms);\n\n    // 3. Let time be MakeTime(HourFromTime(t), MinFromTime(t), SecFromTime(t), ms).\n    let time = MakeTime(realm, HourFromTime(realm, t), MinFromTime(realm, t), SecFromTime(realm, t), ms);\n\n    // 4. Let u be TimeClip(UTC(MakeDate(Day(t), time))).\n    let u = TimeClip(realm, UTC(realm, MakeDate(realm, Day(realm, t), time)));\n\n    // 5. Set the [[DateValue]] internal slot of this Date object to u.\n    context.$DateValue = u;\n\n    // 6. Return u.\n    return u;\n  });\n\n  // ECMA262 20.3.4.24\n  obj.defineNativeMethod(\"setMinutes\", 3, (context, [min, sec, ms], argCount) => {\n    // 1. Let t be LocalTime(? thisTimeValue(this value)).\n    let t = LocalTime(realm, thisTimeValue(realm, context).throwIfNotConcreteNumber().value);\n    invariant(context instanceof ObjectValue);\n\n    // 2. Let m be ? ToNumber(min).\n    let m = ToNumber(realm, min);\n\n    // 3. If sec is not specified, let s be SecFromTime(t); otherwise, let s be ? ToNumber(sec).\n    let s = argCount >= 2 ? ToNumber(realm, sec) : SecFromTime(realm, t);\n\n    // 4. If ms is not specified, let milli be msFromTime(t); otherwise, let milli be ? ToNumber(ms).\n    let milli = argCount >= 3 ? ToNumber(realm, ms) : msFromTime(realm, t);\n\n    // 5. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), m, s, milli)).\n    let date = MakeDate(realm, Day(realm, t), MakeTime(realm, HourFromTime(realm, t), m, s, milli));\n\n    // 6. Let u be TimeClip(UTC(date)).\n    let u = TimeClip(realm, UTC(realm, date));\n\n    // 7. Set the [[DateValue]] internal slot of this Date object to u.\n    context.$DateValue = u;\n\n    // 8. Return u.\n    return u;\n  });\n\n  // ECMA262 20.3.4.25\n  obj.defineNativeMethod(\"setMonth\", 2, (context, [month, date], argCount) => {\n    // 1. Let t be LocalTime(? thisTimeValue(this value)).\n    let t = LocalTime(realm, thisTimeValue(realm, context).throwIfNotConcreteNumber().value);\n    invariant(context instanceof ObjectValue);\n\n    // 2. Let m be ? ToNumber(month).\n    let m = ToNumber(realm, month);\n\n    // 3. If date is not specified, let dt be DateFromTime(t); otherwise, let dt be ? ToNumber(date).\n    let dt = argCount >= 2 ? ToNumber(realm, date) : DateFromTime(realm, t);\n\n    // 4. Let newDate be MakeDate(MakeDay(YearFromTime(t), m, dt), TimeWithinDay(t)).\n    let newDate = MakeDate(realm, MakeDay(realm, YearFromTime(realm, t), m, dt), TimeWithinDay(realm, t));\n\n    // 5. Let u be TimeClip(UTC(newDate)).\n    let u = TimeClip(realm, UTC(realm, newDate));\n\n    // 6. Set the [[DateValue]] internal slot of this Date object to u.\n    context.$DateValue = u;\n\n    // 7. Return u.\n    return u;\n  });\n\n  // ECMA262 20.3.4.26\n  obj.defineNativeMethod(\"setSeconds\", 2, (context, [sec, ms], argCount) => {\n    // 1. Let t be LocalTime(? thisTimeValue(this value)).\n    let t = LocalTime(realm, thisTimeValue(realm, context).throwIfNotConcreteNumber().value);\n    invariant(context instanceof ObjectValue);\n\n    // 2. Let s be ? ToNumber(sec).\n    let s = ToNumber(realm, sec);\n\n    // 3. If ms is not specified, let milli be msFromTime(t); otherwise, let milli be ? ToNumber(ms).\n    let milli = argCount >= 2 ? ToNumber(realm, ms) : msFromTime(realm, t);\n\n    // 4. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), MinFromTime(t), s, milli)).\n    let date = MakeDate(realm, Day(realm, t), MakeTime(realm, HourFromTime(realm, t), MinFromTime(realm, t), s, milli));\n\n    // 5. Let u be TimeClip(UTC(date)).\n    let u = TimeClip(realm, UTC(realm, date));\n\n    // 6. Set the [[DateValue]] internal slot of this Date object to u.\n    context.$DateValue = u;\n\n    // 7. Return u.\n    return u;\n  });\n\n  // ECMA262 20.3.4.27\n  obj.defineNativeMethod(\"setTime\", 1, (context, [time]) => {\n    // 1. Perform ? thisTimeValue(this value).\n    thisTimeValue(realm, context);\n    invariant(context instanceof ObjectValue);\n\n    // 2. Let t be ? ToNumber(time).\n    let t = ToNumber(realm, time);\n\n    // 3. Let v be TimeClip(t).\n    let v = TimeClip(realm, t);\n\n    // 4. Set the [[DateValue]] internal slot of this Date object to v.\n    context.$DateValue = v;\n\n    // 5. Return v.\n    return v;\n  });\n\n  // ECMA262 20.3.4.28\n  obj.defineNativeMethod(\"setUTCDate\", 1, (context, [date]) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n    invariant(context instanceof ObjectValue);\n\n    // 2. Let dt be ? ToNumber(date).\n    let dt = ToNumber(realm, date);\n\n    // 3. Let newDate be MakeDate(MakeDay(YearFromTime(t), MonthFromTime(t), dt), TimeWithinDay(t)).\n    let newDate = MakeDate(realm, MakeDay(realm, YearFromTime(realm, t), MonthFromTime(realm, t), dt), TimeWithinDay(realm, t));\n\n    // 4. Let v be TimeClip(newDate).\n    let v = TimeClip(realm, newDate);\n\n    // 5. Set the [[DateValue]] internal slot of this Date object to v.\n    context.$DateValue = v;\n\n    // 6. Return v.\n    return v;\n  });\n\n  // ECMA262 20.3.4.29\n  obj.defineNativeMethod(\"setUTCFullYear\", 3, (context, [year, month, date], argCount) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n    invariant(context instanceof ObjectValue);\n\n    // 2. If t is NaN, let t be +0.\n    if (isNaN(t)) t = +0;\n\n    // 3. Let y be ? ToNumber(year).\n    let y = ToNumber(realm, year);\n\n    // 4. If month is not specified, let m be MonthFromTime(t); otherwise, let m be ? ToNumber(month).\n    let m = argCount >= 2 ? ToNumber(realm, month) : MonthFromTime(realm, t);\n\n    // 5. If date is not specified, let dt be DateFromTime(t); otherwise, let dt be ? ToNumber(date).\n    let dt = argCount >= 3 ? ToNumber(realm, date) : DateFromTime(realm, t);\n\n    // 6. Let newDate be MakeDate(MakeDay(y, m, dt), TimeWithinDay(t)).\n    let newDate = MakeDate(realm, MakeDay(realm, y, m, dt), TimeWithinDay(realm, t));\n\n    // 7. Let v be TimeClip(newDate).\n    let v = TimeClip(realm, newDate);\n\n    // 8. Set the [[DateValue]] internal slot of this Date object to v.\n    context.$DateValue = v;\n\n    // 9. Return v.\n    return v;\n  });\n\n  // ECMA262 20.3.4.30\n  obj.defineNativeMethod(\"setUTCHours\", 4, (context, [hour, min, sec, ms], argCount) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n    invariant(context instanceof ObjectValue);\n\n    // 2. Let h be ? ToNumber(hour).\n    let h = ToNumber(realm, hour);\n\n    // 3. If min is not specified, let m be MinFromTime(t); otherwise, let m be ? ToNumber(min).\n    let m = argCount >= 2 ? ToNumber(realm, min) : MinFromTime(realm, t);\n\n    // 4. If sec is not specified, let s be SecFromTime(t); otherwise, let s be ? ToNumber(sec).\n    let s = argCount >= 3 ? ToNumber(realm, sec) : SecFromTime(realm, t);\n\n    // 5. If ms is not specified, let milli be msFromTime(t); otherwise, let milli be ? ToNumber(ms).\n    let milli = argCount >= 4 ? ToNumber(realm, ms) : msFromTime(realm, t);\n\n    // 6. Let newDate be MakeDate(Day(t), MakeTime(h, m, s, milli)).\n    let newDate = MakeDate(realm, Day(realm, t), MakeTime(realm, h, m, s, milli));\n\n    // 7. Let v be TimeClip(newDate).\n    let v = TimeClip(realm, newDate);\n\n    // 8. Set the [[DateValue]] internal slot of this Date object to v.\n    context.$DateValue = v;\n\n    // 9. Return v.\n    return v;\n  });\n\n  // ECMA262 20.3.4.31\n  obj.defineNativeMethod(\"setUTCMilliseconds\", 1, (context, [ms]) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n    invariant(context instanceof ObjectValue);\n\n    // 2. Let milli be ? ToNumber(ms).\n    let milli = ToNumber(realm, ms);\n\n    // 3. Let time be MakeTime(HourFromTime(t), MinFromTime(t), SecFromTime(t), milli).\n    let time = MakeTime(realm, HourFromTime(realm, t), MinFromTime(realm, t), SecFromTime(realm, t), milli);\n\n    // 4. Let v be TimeClip(MakeDate(Day(t), time)).\n    let v = TimeClip(realm, MakeDate(realm, Day(realm, t), time));\n\n    // 5. Set the [[DateValue]] internal slot of this Date object to v.\n    context.$DateValue = v;\n\n    // 6. Return v.\n    return v;\n  });\n\n  // ECMA262 20.3.4.32\n  obj.defineNativeMethod(\"setUTCMinutes\", 3, (context, [min, sec, ms], argCount) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n    invariant(context instanceof ObjectValue);\n\n    // 2. Let m be ? ToNumber(min).\n    let m = ToNumber(realm, min);\n\n    // 3. If sec is not specified, let s be SecFromTime(t).\n    let s;\n    if (argCount < 2) {\n      s = SecFromTime(realm, t);\n    } else { // 4. Else,\n      // a. Let s be ? ToNumber(sec).\n      s = ToNumber(realm, sec);\n    }\n\n    // 5. If ms is not specified, let milli be msFromTime(t).\n    let milli;\n    if (argCount < 3) {\n      milli = msFromTime(realm, t);\n    } else { // 6. Else,\n      // a. Let milli be ? ToNumber(ms).\n      milli = ToNumber(realm, ms);\n    }\n\n    // 7. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), m, s, milli)).\n    let date = MakeDate(realm, Day(realm, t), MakeTime(realm, HourFromTime(realm, t), m, s, milli));\n\n    // 8. Let v be TimeClip(date).\n    let v = TimeClip(realm, date);\n\n    // 9. Set the [[DateValue]] internal slot of this Date object to v.\n    context.$DateValue = v;\n\n    // 10. Return v.\n    return v;\n  });\n\n  // ECMA262 20.3.4.33\n  obj.defineNativeMethod(\"setUTCMonth\", 2, (context, [month, date], argCount) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n    invariant(context instanceof ObjectValue);\n\n    // 2. Let m be ? ToNumber(month).\n    let m = ToNumber(realm, month);\n\n    // 3. If date is not specified, let dt be DateFromTime(t).\n    let dt;\n    if (argCount < 2) {\n      dt = DateFromTime(realm, t);\n    } else { // 4. Else,\n      // a. Let dt be ? ToNumber(date).\n      dt = ToNumber(realm, date);\n    }\n\n    // 5. Let newDate be MakeDate(MakeDay(YearFromTime(t), m, dt), TimeWithinDay(t)).\n    let newDate = MakeDate(realm, MakeDay(realm, YearFromTime(realm, t), m, dt), TimeWithinDay(realm, t));\n\n    // 6. Let v be TimeClip(newDate).\n    let v = TimeClip(realm, newDate);\n\n    // 7. Set the [[DateValue]] internal slot of this Date object to v.\n    context.$DateValue = v;\n\n    // 8. Return v.\n    return v;\n  });\n\n  // ECMA262 20.3.4.34\n  obj.defineNativeMethod(\"setUTCSeconds\", 2, (context, [sec, ms], argCount) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n    invariant(context instanceof ObjectValue);\n\n    // 2. Let s be ? ToNumber(sec).\n    let s = ToNumber(realm, sec);\n\n    // 3. If ms is not specified, let milli be msFromTime(t).\n    let milli;\n    if (argCount < 2) {\n      milli = msFromTime(realm, t);\n    } else { // 4. Else,\n      // a. Let milli be ? ToNumber(ms).\n      milli = ToNumber(realm, ms);\n    }\n\n    // 5. Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), MinFromTime(t), s, milli)).\n    let date = MakeDate(realm, Day(realm, t), MakeTime(realm, HourFromTime(realm, t), MinFromTime(realm, t), s, milli));\n\n    // 6. Let v be TimeClip(date).\n    let v = TimeClip(realm, date);\n\n    // 7. Set the [[DateValue]] internal slot of this Date object to v.\n    context.$DateValue = v;\n\n    // 8. Return v.\n    return v;\n  });\n\n  // ECMA262 20.3.4.35\n  obj.defineNativeMethod(\"toDateString\", 0, (context) => {\n    throw new Error(\"TODO: implement Date.prototype.toDateString\");\n  });\n\n  // ECMA262 20.3.4.36\n  obj.defineNativeMethod(\"toISOString\", 0, (context) => {\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n    if (!isFinite(t)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError);\n    }\n\n    return new StringValue(realm, new Date(t).toISOString());\n  });\n\n  // ECMA262 20.3.4.37\n  obj.defineNativeMethod(\"toJSON\", 1, (context, [key]) => {\n    // 1. Let O be ? ToObject(this value).\n    let O = ToObject(realm, context.throwIfNotConcrete());\n\n    // 2. Let tv be ? ToPrimitive(O, hint Number).\n    let tv = ToPrimitive(realm, O, \"number\");\n\n    // 3. If Type(tv) is Number and tv is not finite, return null.\n    if (tv instanceof NumberValue && !isFinite(tv.value)) {\n      return realm.intrinsics.null;\n    }\n\n    // 4. Return ? Invoke(O, \"toISOString\").\n    return Invoke(realm, O, \"toISOString\");\n  });\n\n  // ECMA262 20.3.4.38\n  obj.defineNativeMethod(\"toLocaleDateString\", 0, (context) => {\n    throw new Error(\"TODO: implement Date.prototype.toLocaleDateString\");\n  });\n\n  // ECMA262 20.3.4.39\n  obj.defineNativeMethod(\"toLocaleString\", 0, (context) => {\n    throw new Error(\"TODO: implement Date.prototype.toLocaleString\");\n  });\n\n  // ECMA262 20.3.4.40\n  obj.defineNativeMethod(\"toLocaleTimeString\", 0, (context) => {\n    throw new Error(\"TODO: implement Date.prototype.toLocaleTimeString\");\n  });\n\n  // ECMA262 20.3.4.41\n  obj.defineNativeMethod(\"toString\", 0, (context) => {\n    // 1. Let O be this Date object.\n    let O = context;\n\n    // 2. If O does not have a [[DateValue]] internal slot, then\n    let tv;\n    if (O.$DateValue === undefined) {\n      // a. Let tv be NaN.\n      tv = NaN;\n    } else { // 3. Else,\n      // a. Let tv be thisTimeValue(O).\n      tv = thisTimeValue(realm, O).throwIfNotConcreteNumber().value;\n    }\n\n    // 4. Return ToDateString(tv).\n    return new StringValue(realm, ToDateString(realm, tv));\n  });\n\n  // ECMA262 20.3.4.42\n  obj.defineNativeMethod(\"toTimeString\", 0, (context) => {\n    throw new Error(\"TODO: implement Date.prototype.toTimeString\");\n  });\n\n  // ECMA262 20.3.4.43\n  obj.defineNativeMethod(\"toUTCString\", 0, (context) => {\n    throw new Error(\"TODO: implement Date.prototype.toUTCString\");\n  });\n\n  // ECMA262 20.3.4.44\n  obj.defineNativeMethod(\"valueOf\", 0, (context) => {\n    // 1. Return ? thisTimeValue(this value).\n    return thisTimeValue(realm, context);\n  });\n\n  // ECMA262 20.3.4.45\n  obj.defineNativeMethod(realm.intrinsics.SymbolToPrimitive, 1, (context, [hint]) => {\n    // 1. Let O be the this value.\n    let O = context.throwIfNotConcrete();\n\n    // 2. If Type(O) is not Object, throw a TypeError exception.\n    if (!(O instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(O) is not Object\");\n    }\n\n    let tryFirst;\n    hint = hint.throwIfNotConcrete();\n    // 3. If hint is the String value \"string\" or the String value \"default\", then\n    if (hint instanceof StringValue && (hint.value === \"string\" || hint.value === \"default\")) {\n      // a. Let tryFirst be \"string\".\n      tryFirst = \"string\";\n    } else if (hint instanceof StringValue && hint.value === \"number\") { // 4. Else if hint is the String value \"number\", then\n      // a. Let tryFirst be \"number\".\n      tryFirst = \"number\";\n    } else { // 5. Else, throw a TypeError exception.\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(O) is not Object\");\n    }\n\n    // 6. Return ? OrdinaryToPrimitive(O, tryFirst).\n    return OrdinaryToPrimitive(realm, O, tryFirst);\n  }, { writable: false });\n\n  // B.2.4.1\n  obj.defineNativeMethod(\"getYear\", 0, (context) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n\n    // 2. If t is NaN, return NaN.\n    if (isNaN(t)) return realm.intrinsics.NaN;\n\n    // 3. Return YearFromTime(LocalTime(t)) - 1900.\n    return new NumberValue(realm, YearFromTime(realm, LocalTime(realm, t)) - 1900);\n  });\n\n  // B.2.4.2\n  obj.defineNativeMethod(\"setYear\", 1, (context, [year]) => {\n    // 1. Let t be ? thisTimeValue(this value).\n    let t = thisTimeValue(realm, context).throwIfNotConcreteNumber().value;\n    invariant(context instanceof ObjectValue);\n\n    // 2. If t is NaN, let t be +0; otherwise, let t be LocalTime(t).\n    t = isNaN(t) ? +0 : LocalTime(realm, t);\n\n    // 3. Let y be ? ToNumber(year).\n    let y = ToNumber(realm, year);\n\n    // 4. If y is NaN, set the [[DateValue]] internal slot of this Date object to NaN and return NaN.\n    if (isNaN(y)) {\n      context.$DateValue = realm.intrinsics.NaN;\n      return realm.intrinsics.NaN;\n    }\n\n    // 5. If y is not NaN and 0 ≤ ToInteger(y) ≤ 99, let yyyy be ToInteger(y) + 1900.\n    let yyyy;\n    if (ToInteger(realm, y) < 99) {\n      yyyy = ToInteger(realm, y) + 1900;\n    } else { // 6. Else, let yyyy be y.\n      yyyy = y;\n    }\n\n    // 7. Let d be MakeDay(yyyy, MonthFromTime(t), DateFromTime(t)).\n    let d = MakeDay(realm, yyyy, MonthFromTime(realm, t), DateFromTime(realm, t));\n\n    // 8. Let date be UTC(MakeDate(d, TimeWithinDay(t))).\n    let date = UTC(realm, MakeDate(realm, d, TimeWithinDay(realm, t)));\n\n    // 9. Set the [[DateValue]] internal slot of this Date object to TimeClip(date).\n    let dateValue = TimeClip(realm, date);\n    context.$DateValue = dateValue;\n\n    // 10. Return the value of the [[DateValue]] internal slot of this Date object.\n    return dateValue;\n  });\n\n  // B.2.4.3\n  obj.defineNativeProperty(\"toGMTString\", obj.$Get(\"toUTCString\", obj));\n}\n"]}