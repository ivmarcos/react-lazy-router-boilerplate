{"version":3,"sources":["../../../src/intrinsics/ecma262/Symbol.js"],"names":["realm","func","context","argCount","NewTarget","description","createErrorThrowCompletion","intrinsics","TypeError","descString","undefined","defineNativeMethod","key","stringKey","GlobalSymbolRegistry","e","$Key","$Symbol","newSymbol","push","sym","defineNativeConstant","SymbolIsConcatSpreadable","SymbolSpecies","SymbolReplace","SymbolIterator","SymbolHasInstance","SymbolToPrimitive","SymbolToStringTag","SymbolUnscopables","SymbolMatch","SymbolSplit","SymbolSearch"],"mappings":"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","file":"Symbol.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue, StringValue, SymbolValue, UndefinedValue } from \"../../values/index.js\";\nimport { ToStringPartial } from \"../../methods/index.js\";\nimport { SameValue } from \"../../methods/abstract.js\";\n\nlet GlobalSymbolRegistry: Array<{$Key: string, $Symbol: SymbolValue}> = [];\n\nexport default function (realm: Realm): NativeFunctionValue {\n  // ECMA262 19.4.1.1\n  let func = new NativeFunctionValue(realm, \"Symbol\", \"Symbol\", 0, (context, [description], argCount, NewTarget) => {\n    // 1. If NewTarget is not undefined, throw a TypeError exception.\n    if (NewTarget) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. If description is undefined, let descString be undefined.\n    let descString;\n    if (!description || description instanceof UndefinedValue) {\n      descString = undefined;\n    } else { // 3. Else, let descString be ? ToString(description).\n      descString = ToStringPartial(realm, description);\n    }\n\n    // 4. Return a new unique Symbol value whose [[Description]] value is descString.\n    return new SymbolValue(realm, descString);\n  });\n\n  // ECMA262 19.4.2.1\n  func.defineNativeMethod(\"for\", 1, (context, [key]) => {\n    // 1. Let stringKey be ? ToString(key).\n    let stringKey = ToStringPartial(realm, key);\n\n    // 2. For each element e of the GlobalSymbolRegistry List,\n    for (let e of GlobalSymbolRegistry) {\n      // a. If SameValue(e.[[Key]], stringKey) is true, return e.[[Symbol]].\n      if (e.$Key === stringKey) {\n        return e.$Symbol;\n      }\n    }\n\n    // 3. Assert: GlobalSymbolRegistry does not currently contain an entry for stringKey.\n\n    // 4. Let newSymbol be a new unique Symbol value whose [[Description]] value is stringKey.\n    let newSymbol = new SymbolValue(realm, stringKey);\n\n    // 5. Append the Record { [[Key]]: stringKey, [[Symbol]]: newSymbol } to the GlobalSymbolRegistry List.\n    GlobalSymbolRegistry.push({ $Key: stringKey, $Symbol: newSymbol });\n\n    // 6. Return newSymbol.\n    return newSymbol;\n  });\n\n  // ECMA262 19.4.2.2\n  func.defineNativeMethod(\"keyFor\", 1, (context, [sym]) => {\n    // 1. If Type(sym) is not Symbol, throw a TypeError exception.\n    if (!(sym instanceof SymbolValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError,\n        \"Type(sym) is not Symbol\");\n    }\n\n    // 2. For each element e of the GlobalSymbolRegistry List (see 19.4.2.1),\n    for (let e of GlobalSymbolRegistry) {\n      // a. If SameValue(e.[[Symbol]], sym) is true, return e.[[Key]].\n      if (SameValue(realm, e.$Symbol, sym) === true) {\n        return new StringValue(realm, e.$Key);\n      }\n    }\n\n    // 3. Assert: GlobalSymbolRegistry does not currently contain an entry for sym.\n\n    // 4. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 19.4.2.3\n  func.defineNativeConstant(\"isConcatSpreadable\", realm.intrinsics.SymbolIsConcatSpreadable);\n\n  // ECMA262 19.4.2.10\n  func.defineNativeConstant(\"species\", realm.intrinsics.SymbolSpecies);\n\n  // ECMA262 19.4.2.8\n  func.defineNativeConstant(\"replace\", realm.intrinsics.SymbolReplace);\n\n  // ECMA262 19.4.2.4\n  func.defineNativeConstant(\"iterator\", realm.intrinsics.SymbolIterator);\n\n  // ECMA262 19.4.2.2\n  func.defineNativeConstant(\"hasInstance\", realm.intrinsics.SymbolHasInstance);\n\n  // ECMA262 19.4.2.12\n  func.defineNativeConstant(\"toPrimitive\", realm.intrinsics.SymbolToPrimitive);\n\n  // ECMA262 19.4.2.13\n  func.defineNativeConstant(\"toStringTag\", realm.intrinsics.SymbolToStringTag);\n\n  // ECMA262 19.4.2.14\n  func.defineNativeConstant(\"unscopables\", realm.intrinsics.SymbolUnscopables);\n\n  // ECMA262 19.4.2.6\n  func.defineNativeConstant(\"match\", realm.intrinsics.SymbolMatch);\n\n  // ECMA262 19.4.2.11\n  func.defineNativeConstant(\"split\", realm.intrinsics.SymbolSplit);\n\n  // ECMA262 19.4.2.9\n  func.defineNativeConstant(\"search\", realm.intrinsics.SymbolSearch);\n\n  return func;\n}\n"]}