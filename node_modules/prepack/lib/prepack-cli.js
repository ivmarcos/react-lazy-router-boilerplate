"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright (c) 2017-present, Facebook, Inc.
                                                                                                                                                                                                                                                                   * All rights reserved.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This source code is licensed under the BSD-style license found in the
                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree. An additional grant
                                                                                                                                                                                                                                                                   * of patent rights can be found in the PATENTS file in the same directory.
                                                                                                                                                                                                                                                                   */

var _prepackNode = require("./prepack-node.js");

var _types = require("./types.js");

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HELP_STR = "\n  input    The name of the file to run Prepack over (for web please provide the single js bundle file)\n  --out    The name of the output file\n  --compatibility    The target environment for Prepack [" + _types.CompatibilityValues.map(function (v) {
  return "\"" + v + "\"";
}).join(', ') + "]\n  --mathRandomSeed    If you want Prepack to evaluate Math.random() calls, please provide a seed.\n  --srcmapIn    The input sourcemap filename. If present, Prepack will output a sourcemap that maps from the original file (pre-input sourcemap) to Prepack's output\n  --srcmapOut    The output sourcemap filename.\n  --debugNames    Changes the output of Prepack so that for named functions and variables that get emitted into Prepack's output, the original name is appended as a suffix to Prepack's generated identifier.\n  --singlePass    Perform only one serialization pass. Disables some optimizations on Prepack's output. This will speed up Prepacking but result in code with less inlining.\n  --speculate    Enable speculative initialization of modules (for the module system Prepack has builtin knowledge about). Prepack will try to execute all factory functions it is able to.\n  --trace    Traces the order of module initialization.\n";
var args = Array.from(process.argv);
args.splice(0, 2);
var inputFilename = void 0;
var outputFilename = void 0;
var compatibility = void 0;
var mathRandomSeed = void 0;
var inputSourceMap = void 0;
var outputSourceMap = void 0;
var flags = {
  speculate: false,
  trace: false,
  debugNames: false,
  singlePass: false,
  logStatistics: false,
  logModules: false,
  delayUnsupportedRequires: false,
  internalDebug: false
};

while (args.length) {
  var arg = args[0];args.shift();
  if (!arg.startsWith("--")) {
    inputFilename = arg;
  } else {
    arg = arg.slice(2);
    switch (arg) {
      case "out":
        arg = args[0];args.shift();
        outputFilename = arg;
        break;
      case "compatibility":
        arg = args[0];args.shift();
        if (!_types.CompatibilityValues.includes(arg)) {
          console.error("Unsupported compatibility: " + arg);
          process.exit(1);
        }
        compatibility = arg;
        break;
      case "mathRandomSeed":
        mathRandomSeed = args[0];args.shift();
        break;
      case "srcmapIn":
        inputSourceMap = args[0];args.shift();
        break;
      case "srcmapOut":
        outputSourceMap = args[0];args.shift();
        break;
      case "help":
        console.log("Usage: prepack.js [ --out output.js ] [ --compatibility jsc ] [ --mathRandomSeed seedvalue ] [ --srcmapIn inputMap ] [ --srcmapOut outputMap ] [ --speculate ] [ --trace ] [ -- | input.js ] [ --singlePass ] [ --debugNames ]" + "\n" + HELP_STR);
        break;
      default:
        if (arg in flags) {
          flags[arg] = true;
        } else {
          console.error("Unknown option: " + arg);
          process.exit(1);
        }
    }
  }
}

if (!inputFilename) {
  console.error("Missing input file.");
  process.exit(1);
} else {
  try {
    var serialized = (0, _prepackNode.prepackFileSync)(inputFilename, _extends({
      compatibility: compatibility,
      mathRandomSeed: mathRandomSeed,
      inputSourceMapFilename: inputSourceMap,
      sourceMaps: !!outputSourceMap
    }, flags));

    var code = serialized.code;

    if (code.length >= 1000 || outputFilename) {
      var filename = outputFilename || inputFilename + "-processed.js";
      console.log("Prepacked source code written to " + filename + ".");
      _fs2.default.writeFileSync(filename, code);
    }

    if (code.length <= 1000 && !outputFilename) {
      console.log("+++++++++++++++++ Prepacked source code");
      console.log(code);
      console.log("=================");
    }

    if (outputSourceMap) {
      _fs2.default.writeFileSync(outputSourceMap, serialized.map ? JSON.stringify(serialized.map) : '');
    }
  } catch (x) {
    if (x instanceof _prepackNode.InitializationError) {
      // Ignore InitializationError since they have already logged
      // their errors to the console, but exit with an error code.
      process.exit(1);
    }
    // For any other type of error, rethrow.
    throw x;
  }
}
//# sourceMappingURL=prepack-cli.js.map