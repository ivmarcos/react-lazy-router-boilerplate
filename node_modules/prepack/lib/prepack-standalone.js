"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InitializationError = InitializationError;
exports.prepack = prepack;
exports.prepackFromAst = prepackFromAst;

var _index = require("./serializer/index.js");

var _index2 = _interopRequireDefault(_index);

var _construct_realm = require("./construct_realm.js");

var _construct_realm2 = _interopRequireDefault(_construct_realm);

var _globals = require("./globals.js");

var _globals2 = _interopRequireDefault(_globals);

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _options = require("./options");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This should just be a class but Babel classes doesn't work with
// built-in super classes.
/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

function InitializationError() {
  var self = new Error("An error occurred while prepacking. See the error logs.");
  Object.setPrototypeOf(self, InitializationError.prototype);
  return self;
}
Object.setPrototypeOf(InitializationError, Error);
Object.setPrototypeOf(InitializationError.prototype, Error.prototype);

function prepack(code) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _options.defaultOptions;

  var filename = options.filename || 'unknown';
  var realm = (0, _construct_realm2.default)((0, _options.getRealmOptions)(options));
  (0, _globals2.default)(realm);
  var serializer = new _index2.default(realm, (0, _options.getSerializerOptions)(options));
  var serialized = serializer.init(filename, code, "", options.sourceMaps);
  if (!serialized) {
    throw new InitializationError();
  }
  return serialized;
}

function prepackFromAst(ast, code) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _options.defaultOptions;

  if (ast && ast.type === "Program") {
    ast = t.file(ast, [], []);
  } else if (!ast || ast.type !== "File") {
    throw new Error("Not a valid ast?");
  }

  // TODO: Expose an option to wire an already parsed ast all the way through
  // to the execution environment. For now, we just reparse.

  var realm = (0, _construct_realm2.default)((0, _options.getRealmOptions)(options));
  (0, _globals2.default)(realm);
  var serializer = new _index2.default(realm, (0, _options.getSerializerOptions)(options));
  var serialized = serializer.init("", code, "", options.sourceMaps);
  if (!serialized) {
    throw new InitializationError();
  }
  return serialized;
}
//# sourceMappingURL=prepack-standalone.js.map