{"version":3,"sources":["../../src/serializer/modules.js"],"names":["t","ModuleTracer","modules","logModules","partialEvaluation","requireStack","requireSequence","message","console","log","map","join","push","undefined","effects","popped","pop","F","thisArgument","argumentsList","newTarget","performCall","realm","getRequire","delayUnsupportedRequires","length","moduleId","moduleIdValue","value","moduleIds","has","logger","logError","result","requireSequenceStart","partially_evaluate","e","getMessageAndStack","stack","nestedModulesIds","Set","i","nestedModuleId","add","tryInitializeModule","deriveAbstract","topVal","callExpression","identifier","valueToNode","apply_effects","getDefine","factoryFunction","factoryFunctions","Modules","_require","intrinsics","_define","initializedModules","Map","tracers","name","active","tryQuery","$GlobalObject","_getGlobalProperty","formalParameters","functions","scope","node","isIdentifier","callee","arguments","argument","isNumericLiteral","isStringLiteral","innerName","f","scopedBinding","getBinding","path","kind","doesNotMatter","reference","$Environment","referencedBase","base","referencedName","binding","bindings","initialized","generator","properties","createdObjects","restoreBindings","restoreProperties","reason","indexOf","slice","context","env","$GlobalEnv","lexicalEnvironment","variableEnvironment","oldDelayUnsupportedRequires","pushContext","partially_evaluate_node","logCompletion","popContext","count","introspectionErrors","Object","create","stacks","set","a","key","sort","x","y","n","oldReadOnly","setReadOnly","compl","body","escapes","object"],"mappings":";;;;;;;;;;;;;AAWA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;IAAYA,C;;AAEZ;;;;AACA;;;;;;;;;;;;+eArBA;;;;;;;;;IAuBMC,Y;;;AACJ,wBAAYC,OAAZ,EAA8BC,UAA9B,EAAmD;AAAA;;AAAA;;AAEjD,UAAKD,OAAL,GAAeA,OAAf;AACA,UAAKE,iBAAL,GAAyB,CAAzB;AACA,UAAKC,YAAL,GAAoB,EAApB;AACA,UAAKC,eAAL,GAAuB,EAAvB;AACA,UAAKH,UAAL,GAAkBA,UAAlB;AANiD;AAOlD;;;;wBAQGI,O,EAAiB;AACnB,UAAI,KAAKJ,UAAT,EAAqBK,QAAQC,GAAR,gBAAyB,KAAKJ,YAAL,CAAkBK,GAAlB,CAAsB;AAAA,eAAK,IAAL;AAAA,OAAtB,EAAiCC,IAAjC,CAAsC,EAAtC,CAAzB,GAAqEJ,OAArE;AACtB;;;6CAEwB;AACvB,WAAKE,GAAL,CAAS,qBAAT;AACA,WAAKL,iBAAL;AACA,WAAKC,YAAL,CAAkBO,IAAlB,CAAuBC,SAAvB;AACD;;;yCAEoBC,O,EAAyB;AAC5C,UAAIC,SAAS,KAAKV,YAAL,CAAkBW,GAAlB,EAAb;AACA,+BAAUD,WAAWF,SAArB;AACA,WAAKT,iBAAL;AACA,WAAKK,GAAL,CAAS,qBAAT;AACD;;;+BAEUQ,C,EAAkBC,Y,EAA4BC,a,EAA6BC,S,EAA+BC,W,EAAwC;AAC3J,UAAIC,QAAQ,KAAKpB,OAAL,CAAaoB,KAAzB;AACA,UAAIL,MAAM,KAAKf,OAAL,CAAaqB,UAAb,EAAN,IAAmC,KAAKrB,OAAL,CAAasB,wBAAhD,IAA4EL,cAAcM,MAAd,KAAyB,CAAzG,EAA4G;AAC1G,YAAIC,WAAWP,cAAc,CAAd,CAAf;AACA,YAAIQ,sBAAJ;AACA,YAAID,2CAAmCA,uCAAvC,EAAwE;AACtEC,0BAAgBD,SAASE,KAAzB;AACA,cAAI,CAAC,KAAK1B,OAAL,CAAa2B,SAAb,CAAuBC,GAAvB,CAA2BH,aAA3B,CAAL,EAAgD;AAC9C,iBAAKzB,OAAL,CAAa6B,MAAb,CAAoBC,QAApB,CAA6BN,QAA7B,EAAuC,yDAAvC;AACD;AACF,SALD,MAKO;AACL,eAAKxB,OAAL,CAAa6B,MAAb,CAAoBC,QAApB,CAA6BN,QAA7B,EAAuC,qEAAvC;AACA,iBAAOb,SAAP;AACD;AACD,aAAKJ,GAAL,eAAqBkB,aAArB;AACA,YAAIM,eAAJ;AACA,YAAI;AACF,eAAK5B,YAAL,CAAkBO,IAAlB,CAAuBe,aAAvB;AACA,cAAIO,uBAAuB,KAAK5B,eAAL,CAAqBmB,MAAhD;AACA,eAAKnB,eAAL,CAAqBM,IAArB,CAA0Be,aAA1B;AACA,cAAIb,UAAUQ,MAAMa,kBAAN,CAAyB,YAAM;AAC3C,gBAAI;AACF,qBAAOd,aAAP;AACD,aAFD,CAEE,OAAOe,CAAP,EAAU;AACV,kBAAIA,oCAAJ,EAA6B,OAAOA,CAAP;AAC7B,oBAAMA,CAAN;AACD;AACF,WAPa,CAAd;;AAJE,wCAYStB,OAZT;;AAYDmB,gBAZC;;AAaF,mCAAUA,mCAA2BA,yCAArC;AACA,cAAIA,2DAAJ,EAAoD;AAAA,wCAC3B,KAAK/B,OAAL,CAAamC,kBAAb,CAAgCvB,OAAhC,CAD2B;AAAA;AAAA,gBAC7CP,OAD6C;AAAA,gBACpC+B,KADoC;;AAElD9B,oBAAQC,GAAR,uBAAgCkB,aAAhC,WAAmDpB,OAAnD,SAA8D+B,KAA9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAIC,mBAAmB,IAAIC,GAAJ,EAAvB;AACA,iBAAK,IAAIC,IAAIP,oBAAb,EAAmCO,IAAI,KAAKnC,eAAL,CAAqBmB,MAA5D,EAAoEgB,GAApE,EAAyE;AACvE,kBAAIC,iBAAiB,KAAKpC,eAAL,CAAqBmC,CAArB,CAArB;AACA,kBAAIF,iBAAiBT,GAAjB,CAAqBY,cAArB,CAAJ,EAA0C;AAC1CH,+BAAiBI,GAAjB,CAAqBD,cAArB;AACA,mBAAKxC,OAAL,CAAa0C,mBAAb,CACEF,cADF,gCAE8BA,cAF9B,oCAE2Ef,aAF3E;AAGD;;AAEDM,qBAASX,MAAMuB,cAAN,CACP,oBAAYC,MADL,EAEP,qBAAaA,MAFN,EAEc,EAFd,EAGN;AAAA;;AAAA,qBAAQ9C,EAAE+C,cAAF,CAAiB/C,EAAEgD,UAAF,CAAa,SAAb,CAAjB,EAA0C,CAAChD,EAAEiD,WAAF,CAActB,aAAd,CAAD,CAA1C,CAAR;AAAA,aAHM,CAAT;AAID,WA5BD,MA4BO;AACLL,kBAAM4B,aAAN,CAAoBpC,OAApB,gCAAyDa,aAAzD;AACD;AACF,SA7CD,SA6CU;AACR,cAAIZ,SAAS,KAAKV,YAAL,CAAkBW,GAAlB,EAAb;AACA,mCAAUD,WAAWY,aAArB;AACA,cAAIpB,WAAU,EAAd;AACA,mCAAU,EAAE0B,2DAAF,CAAV;AACA,cAAIA,8CAAJ,EAAuC1B,WAAU,iBAAV;AACvC,eAAKE,GAAL,eAAqBkB,aAArB,SAAsCpB,QAAtC;AACD;AACD,YAAI0B,yCAAJ,EAAkC,MAAMA,MAAN;AAClC,eAAOA,MAAP;AACD,OArED,MAqEO,IAAIhB,MAAM,KAAKf,OAAL,CAAaiD,SAAb,EAAV,EAAoC;AACzC,YAAI,KAAK/C,iBAAL,KAA2B,CAA/B,EAAkC,KAAKF,OAAL,CAAa6B,MAAb,CAAoBC,QAApB,CAA6Bf,CAA7B,EAAgC,kEAAhC;AAClC,YAAImC,kBAAkBjC,cAAc,CAAd,CAAtB;AACA,YAAIiC,gDAAJ,EAA8C,KAAKlD,OAAL,CAAamD,gBAAb,CAA8BV,GAA9B,CAAkCS,eAAlC,EAA9C,KACK,KAAKlD,OAAL,CAAa6B,MAAb,CAAoBC,QAApB,CAA6BoB,eAA7B,EAA8C,4DAA9C;AACL,YAAI1B,YAAWP,cAAc,CAAd,CAAf;AACA,YAAIO,4CAAmCA,wCAAvC,EAAwE,KAAKxB,OAAL,CAAa2B,SAAb,CAAuBc,GAAvB,CAA2BjB,UAASE,KAApC,EAAxE,KACK,KAAK1B,OAAL,CAAa6B,MAAb,CAAoBC,QAApB,CAA6BN,SAA7B,EAAuC,qEAAvC;AACN;AACD,aAAOb,SAAP;AACD;;;;;;IAIUyC,O,WAAAA,O;AACX,mBAAYhC,KAAZ,EAA0BS,MAA1B,EAA0C5B,UAA1C,EAA+DqB,wBAA/D,EAAkG;AAAA;;AAChG,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKS,MAAL,GAAcA,MAAd;AACA,SAAKwB,QAAL,GAAgBjC,MAAMkC,UAAN,CAAiB3C,SAAjC;AACA,SAAK4C,OAAL,GAAenC,MAAMkC,UAAN,CAAiB3C,SAAhC;AACA,SAAKwC,gBAAL,GAAwB,IAAIb,GAAJ,EAAxB;AACA,SAAKX,SAAL,GAAiB,IAAIW,GAAJ,EAAjB;AACA,SAAKkB,kBAAL,GAA0B,IAAIC,GAAJ,EAA1B;AACArC,UAAMsC,OAAN,CAAchD,IAAd,CAAmB,IAAIX,YAAJ,CAAiB,IAAjB,EAAuBE,UAAvB,CAAnB;AACA,SAAKqB,wBAAL,GAAgCA,wBAAhC;AACD;;;;uCAYkBqC,I,EAAc;AAC/B,UAAI,KAAKC,MAAT,EAAiB,OAAO,KAAKxC,KAAL,CAAWkC,UAAX,CAAsB3C,SAA7B;AACjB,WAAKiD,MAAL,GAAc,IAAd;AACA,UAAI;AACF,YAAIxC,QAAQ,KAAKA,KAAjB;AACA,eAAO,KAAKS,MAAL,CAAYgC,QAAZ,CAAqB;AAAA,iBAAM,gBAAIzC,KAAJ,EAAWA,MAAM0C,aAAjB,EAAgCH,IAAhC,CAAN;AAAA,SAArB,EAAkEvC,MAAMkC,UAAN,CAAiB3C,SAAnF,EAA8F,KAA9F,CAAP;AACD,OAHD,SAGU;AACR,aAAKiD,MAAL,GAAc,KAAd;AACD;AACF;;;iCAEmB;AAClB,UAAI,EAAE,KAAKP,QAAL,iCAAF,CAAJ,EAA+C,KAAKA,QAAL,GAAgB,KAAKU,kBAAL,CAAwB,SAAxB,CAAhB;AAC/C,aAAO,KAAKV,QAAZ;AACD;;;gCAEkB;AACjB,UAAI,EAAE,KAAKE,OAAL,iCAAF,CAAJ,EAA8C,KAAKA,OAAL,GAAe,KAAKQ,kBAAL,CAAwB,KAAxB,CAAf;AAC9C,aAAO,KAAKR,OAAZ;AACD;;;iCAEYS,gB,EAAwCC,S,EAAyF;AAC5I,UAAI7C,QAAQ,KAAKA,KAAjB;AACA,UAAIS,SAAS,KAAKA,MAAlB;AACA,UAAI7B,UAAU,IAAd;AACA,aAAO,UAAUkE,KAAV,EAAsBC,IAAtB,EAAqD;AAC1D,YAAI,CAACrE,EAAEsE,YAAF,CAAeD,KAAKE,MAApB,CAAD,IACFF,KAAKG,SAAL,CAAe/C,MAAf,KAA0B,CADxB,IAEF,CAAC4C,KAAKG,SAAL,CAAe,CAAf,CAFH,EAEsB,OAAO,KAAP;AACtB,YAAIC,WAAWJ,KAAKG,SAAL,CAAe,CAAf,CAAf;AACA,YAAI,CAACxE,EAAE0E,gBAAF,CAAmBD,QAAnB,CAAD,IAAiC,CAACzE,EAAE2E,eAAF,CAAkBF,QAAlB,CAAtC,EAAmE,OAAO,KAAP;;AAEnE,iCAAUJ,KAAKE,MAAf;AACA,YAAIK,YAAcP,KAAKE,MAAP,CAA0CV,IAA1D;;AAR0D;AAAA;AAAA;;AAAA;AAAA;AAAA,gBAUjDgB,CAViD;;AAWxD,gBAAIC,gBAAgBV,MAAMW,UAAN,CAAiBH,SAAjB,CAApB;AACA,gBAAIE,aAAJ,EAAmB;AACjB,kBAAI5E,QAAQmD,gBAAR,CAAyBvB,GAAzB,CAA6B+C,CAA7B,KAAmCX,iBAAiB,CAAjB,MAAwBY,cAAcE,IAAd,CAAmBX,IAAlF,EAAwF;AACtF,yCAAUS,cAAcG,IAAd,KAAuB,OAAjC;AACA;AACD;AACD;AACA;AAAA,mBAAO;AAAP;AACD;;AAED,gBAAIC,gBAAgB,IAApB;AACA,gBAAIC,YAAYpD,OAAOgC,QAAP,CACd;AAAA,qBAAM,2BAAezC,KAAf,EAAsBsD,SAAtB,EAAiCM,aAAjC,EAAgDL,EAAEO,YAAlD,CAAN;AAAA,aADc,EAEdvE,SAFc,EAEH,KAFG,CAAhB;AAGA,gBAAIsE,cAActE,SAAlB,EAA6B;AAC3B;AACA;AAAA,mBAAO;AAAP;AACD;AACD,gBAAI,oCAAwBS,KAAxB,EAA+B6D,SAA/B,CAAJ,EAA+C;AAAA,mBAAO;AAAP;AAC/C,gBAAIE,iBAAiBF,UAAUG,IAA/B;AACA,gBAAIC,iBAA0BJ,UAAUI,cAAxC;AACA,gBAAI,OAAOA,cAAP,KAA0B,QAA9B,EAAwC;AAAA,mBAAO;AAAP;AACxC,gBAAI3D,cAAJ;AACA,gBAAIuD,UAAUG,IAAV,gDAAJ,EAAuD;AACrD1D,sBAAQG,OAAOgC,QAAP,CAAgB;AAAA,uBACtB,gBAAIzC,KAAJ,EAAWA,MAAM0C,aAAjB,EAAgCY,SAAhC,CADsB;AAAA,eAAhB,EACsCtD,MAAMkC,UAAN,CAAiB3C,SADvD,EACkE,KADlE,CAAR;AAED,aAHD,MAGO;AACL,uCAAUwE,mEAAV;AACA,kBAAIG,UAAUH,eAAeI,QAAf,CAAwBF,cAAxB,CAAd;AACA,kBAAI,CAACC,QAAQE,WAAb,EAA0B;AAAA,qBAAO;AAAP;AAC1B9D,sBAAQ4D,QAAQ5D,KAAhB;AACD;AACD,gBAAIA,UAAU1B,QAAQqB,UAAR,EAAd,EAAoC;AAAA,mBAAO;AAAP;AA3CoB;;AAU1D,+BAAc4C,SAAd,8HAAyB;AAAA;;AAAA;AAAA;AAKnB;;AALmB;AAAA;AAAA;AAkCxB;AA5CyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8C1D,eAAO,IAAP;AACD,OA/CD;AAgDD;;;8CAEwG;AAAA;AAAA,UAArFlC,MAAqF;AAAA,UAA7E0D,SAA6E;AAAA,UAAlEF,QAAkE;AAAA,UAAxDG,UAAwD;AAAA,UAA5CC,cAA4C;;AACvG,UAAIvE,QAAQ,KAAKA,KAAjB;AACA,UAAI,EAAEW,yCAAF,KAAmC,EAAEA,OAAOL,KAAP,+BAAF,CAAvC,EACE,OAAO,CAAC,cAAD,EAAiB,YAAjB,CAAP;;AAEF;AACAN,YAAMwE,eAAN,CAAsBL,QAAtB;AACAnE,YAAMyE,iBAAN,CAAwBH,UAAxB;;AAEA,UAAIhE,QAAQK,OAAOL,KAAnB;AACA,UAAIrB,UAAkB,KAAKwB,MAAL,CAAYgC,QAAZ,CAAqB;AAAA,eAAM,4BAAgBzC,KAAhB,EAAuB,gBAAIA,KAAJ,EAAaM,KAAb,EAAwC,SAAxC,CAAvB,CAAN;AAAA,OAArB,EAAuG,sBAAvG,EAA+H,KAA/H,CAAtB;AACA,UAAIU,QAAgB,KAAKP,MAAL,CAAYgC,QAAZ,CAAqB;AAAA,eAAM,4BAAgBzC,KAAhB,EAAuB,gBAAIA,KAAJ,EAAaM,KAAb,EAAwC,OAAxC,CAAvB,CAAN;AAAA,OAArB,EAAqG,EAArG,EAAyG,KAAzG,CAApB;;AAEA;AACAN,YAAMwE,eAAN,CAAsBL,QAAtB;AACAnE,YAAMyE,iBAAN,CAAwBH,UAAxB;;AAEA,UAAI3D,+DAAkDA,OAAO+D,MAAP,KAAkBnF,SAAxE,EACEN,gBAAc0B,OAAO+D,MAArB,UAAgCzF,OAAhC;;AAEF,UAAIkC,IAAIH,MAAM2D,OAAN,CAAc,IAAd,CAAR;AACA,UAAIxD,KAAK,CAAT,EAAYH,QAAQA,MAAM4D,KAAN,CAAYzD,CAAZ,CAAR;AACZ,aAAO,CAAClC,OAAD,EAAU+B,KAAV,CAAP;AACD;;;wCAEmBZ,Q,EAA2BnB,O,EAAiC;AAC9E,UAAIe,QAAQ,KAAKA,KAAjB;AACA;AACA,UAAI6E,UAAU,6BAAd;AACA,UAAIC,MAAM9E,MAAM+E,UAAhB;AACAF,cAAQG,kBAAR,GAA6BF,GAA7B;AACAD,cAAQI,mBAAR,GAA8BH,GAA9B;AACAD,cAAQ7E,KAAR,GAAgBA,KAAhB;AACA,UAAIkF,8BAA8B,KAAKhF,wBAAvC;AACA,WAAKA,wBAAL,GAAgC,KAAhC;AACAF,YAAMmF,WAAN,CAAkBN,OAAlB;AACA,UAAI;AACF,YAAI9B,QAAOrE,EAAE+C,cAAF,CAAiB/C,EAAEgD,UAAF,CAAa,SAAb,CAAjB,EAA0C,CAAChD,EAAEiD,WAAF,CAAcvB,QAAd,CAAD,CAA1C,CAAX;;AAEA,YAAIZ,UAAUQ,MAAMoF,uBAAN,CAA8BrC,KAA9B,EAAoC,IAApC,EAA0C+B,GAA1C,EAA+C,KAA/C,CAAd;AACA,YAAInE,SAASnB,QAAQ,CAAR,CAAb;AACA,YAAImB,2DAAJ,EAAoD,OAAOnB,OAAP;;AAEpDQ,cAAM4B,aAAN,CAAoBpC,OAApB,EAA6BP,OAA7B;AACA,YAAI0B,yCAAJ,EAAkC;AAChCzB,kBAAQC,GAAR,kCAA2CF,OAA3C;AACA,eAAKwB,MAAL,CAAY4E,aAAZ,CAA0B1E,MAA1B;AACA,iBAAOpB,SAAP;AACD;;AAED,eAAOC,OAAP;AACD,OAfD,SAeU;AACRQ,cAAMsF,UAAN,CAAiBT,OAAjB;AACA,aAAK3E,wBAAL,GAAgCgF,2BAAhC;AACD;AACF;;;4CAEuB;AACtB;AACA,UAAIK,QAAQ,CAAZ;AACA,UAAIC,sBAAsBC,OAAOC,MAAP,CAAc,IAAd,CAA1B;AAHsB;AAAA;AAAA;;AAAA;AAItB,8BAAqB,KAAKnF,SAA1B,mIAAqC;AAAA,cAA5BH,QAA4B;;AACnC,cAAI,KAAKgC,kBAAL,CAAwB5B,GAAxB,CAA4BJ,QAA5B,CAAJ,EAA2C;;AAE3C,cAAIZ,UAAU,KAAK8B,mBAAL,CACZlB,QADY,4CAE4BA,QAF5B,CAAd;;AAIA,cAAIZ,YAAYD,SAAhB,EAA2B;AAC3B,cAAIoB,SAASnB,QAAQ,CAAR,CAAb;AACA,cAAImB,2DAAJ,EAAoD;AAClD,qCAAUA,2DAAV;;AADkD,sCAE3B,KAAKI,kBAAL,CAAwBvB,OAAxB,CAF2B;AAAA;AAAA,gBAE7CP,OAF6C;AAAA,gBAEpC+B,KAFoC;;AAGlD,gBAAI2E,SAASH,oBAAoBvG,OAApB,IAA+BuG,oBAAoBvG,OAApB,KAAgC,EAA5E;AACA0G,mBAAOrG,IAAP,CAAY0B,KAAZ;AACA;AACD;;AAED,mCAAUL,+BAAV;AACA4E;AACA,eAAKnD,kBAAL,CAAwBwD,GAAxB,CAA4BxF,QAA5B,EAAsCO,MAAtC;AACD;AAxBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBtB,UAAI4E,QAAQ,CAAZ,EAAerG,QAAQC,GAAR,oCAA6CoG,KAA7C;AACf,UAAIM,IAAI,EAAR;AACA,WAAK,IAAIC,GAAT,IAAgBN,mBAAhB;AAAqCK,UAAEvG,IAAF,CAAO,CAACkG,oBAAoBM,GAApB,CAAD,EAA2BA,GAA3B,CAAP;AAArC,OACAD,EAAEE,IAAF,CAAO,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAUA,EAAE,CAAF,EAAK9F,MAAL,GAAc6F,EAAE,CAAF,EAAK7F,MAA7B;AAAA,OAAP;AACA,UAAI0F,EAAE1F,MAAN,EAAc;AACZjB,gBAAQC,GAAR;AADY;AAAA;AAAA;;AAAA;AAEZ,gCAAwB0G,CAAxB;AAAA;AAAA,gBAAUF,MAAV;AAAA,gBAAkBO,CAAlB;;AAA2BhH,oBAAQC,GAAR,CAAewG,OAAOxF,MAAtB,UAAiC+F,CAAjC,SAAsCP,OAAOtG,IAAP,CAAY,cAAZ,CAAtC;AAA3B;AAFY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGb;AACF;;;gDAEiC;AAChC;AACA,UAAIW,QAAQ,KAAKA,KAAjB;AACA;AACA,UAAI6E,UAAU,6BAAd;AACA,UAAIC,MAAM9E,MAAM+E,UAAhB;AACAF,cAAQG,kBAAR,GAA6BF,GAA7B;AACAD,cAAQI,mBAAR,GAA8BH,GAA9B;AACAD,cAAQ7E,KAAR,GAAgBA,KAAhB;AACAA,YAAMmF,WAAN,CAAkBN,OAAlB;AACA,UAAIsB,cAAcnG,MAAMoG,WAAN,CAAkB,IAAlB,CAAlB;AACA,UAAIlB,8BAA8B,KAAKhF,wBAAvC;AACA,WAAKA,wBAAL,GAAgC,KAAhC;AACA,UAAI;AAAA;AAAA;AAAA;;AAAA;AACF,gCAAqB,KAAKK,SAA1B,mIAAqC;AAAA,gBAA5BH,QAA4B;;AACnC,gBAAI2C,SAAOrE,EAAE+C,cAAF,CAAiB/C,EAAEgD,UAAF,CAAa,SAAb,CAAjB,EAA0C,CAAChD,EAAEiD,WAAF,CAAcvB,QAAd,CAAD,CAA1C,CAAX;;AADmC,wCAIjCJ,MAAMoF,uBAAN,CAA8BrC,MAA9B,EAAoC,IAApC,EAA0C+B,GAA1C,EAA+C,KAA/C,CAJiC;AAAA;AAAA,gBAG9BuB,KAH8B;AAAA,gBAGvBhC,SAHuB;AAAA,gBAGZF,QAHY;AAAA,gBAGFG,UAHE;AAAA,gBAGUC,cAHV;AAKnC;;;AACA,qCAAUJ,QAAV;;AAEA,gBAAIkC,8CAAJ,EAAuC;AACvC,qCAAUA,8BAAV;;AAEA,gBAAIhC,UAAUiC,IAAV,CAAenG,MAAf,KAA0B,CAA1B,IACDkG,wCAAgC9B,eAAe/D,GAAf,CAAmB6F,KAAnB,CADnC,EAC+D;AAC/D;AACA;AACA,gBAAIE,UAAU,KAAd;AAfmC;AAAA;AAAA;;AAAA;AAgBnC,oCAAsBjC,UAAtB,mIAAkC;AAAA;AAAA,oBAAxBJ,OAAwB;;AAChC,oBAAI,CAACK,eAAe/D,GAAf,CAAmB0D,QAAQsC,MAA3B,CAAL,EAAyCD,UAAU,IAAV;AAC1C;AAlBkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBnC,gBAAIA,OAAJ,EAAa;;AAEb,iBAAKnE,kBAAL,CAAwBwD,GAAxB,CAA4BxF,QAA5B,EAAsCiG,KAAtC;AACD;AAvBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBH,OAxBD,SAwBU;AACRrG,cAAMsF,UAAN,CAAiBT,OAAjB;AACA7E,cAAMoG,WAAN,CAAkBD,WAAlB;AACA,aAAKjG,wBAAL,GAAgCgF,2BAAhC;AACD;AACF","file":"modules.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { GlobalEnvironmentRecord, DeclarativeEnvironmentRecord } from \"../environment.js\";\nimport { Realm, ExecutionContext, Tracer } from \"../realm.js\";\nimport type { Effects } from \"../realm.js\";\nimport { IsUnresolvableReference, ResolveBinding, ToStringPartial, Get } from \"../methods/index.js\";\nimport { Completion, AbruptCompletion, IntrospectionThrowCompletion, ThrowCompletion } from \"../completions.js\";\nimport { Value, FunctionValue, ObjectValue, NumberValue, StringValue } from \"../values/index.js\";\nimport { TypesDomain, ValuesDomain } from \"../domains/index.js\";\nimport * as t from \"babel-types\";\nimport type { BabelNodeIdentifier, BabelNodeLVal, BabelNodeCallExpression } from \"babel-types\";\nimport invariant from \"../invariant.js\";\nimport { Logger } from \"./logger.js\";\n\nclass ModuleTracer extends Tracer {\n  constructor(modules: Modules, logModules: boolean) {\n    super();\n    this.modules = modules;\n    this.partialEvaluation = 0;\n    this.requireStack = [];\n    this.requireSequence = [];\n    this.logModules = logModules;\n  }\n\n  modules: Modules;\n  partialEvaluation: number;\n  requireStack: Array<number | string | void>;\n  requireSequence: Array<number | string>;\n  logModules: boolean;\n\n  log(message: string) {\n    if (this.logModules) console.log(`[modules] ${this.requireStack.map(_ => \"  \").join(\"\")}${message}`);\n  }\n\n  beginPartialEvaluation() {\n    this.log(\">partial evaluation\");\n    this.partialEvaluation++;\n    this.requireStack.push(undefined);\n  }\n\n  endPartialEvaluation(effects: void | Effects) {\n    let popped = this.requireStack.pop();\n    invariant(popped === undefined);\n    this.partialEvaluation--;\n    this.log(\"<partial evaluation\");\n  }\n\n  detourCall(F: FunctionValue, thisArgument: void | Value, argumentsList: Array<Value>, newTarget: void | ObjectValue, performCall: () => Value): void | Value {\n    let realm = this.modules.realm;\n    if (F === this.modules.getRequire() && this.modules.delayUnsupportedRequires && argumentsList.length === 1) {\n      let moduleId = argumentsList[0];\n      let moduleIdValue;\n      if (moduleId instanceof NumberValue || moduleId instanceof StringValue) {\n        moduleIdValue = moduleId.value;\n        if (!this.modules.moduleIds.has(moduleIdValue)) {\n          this.modules.logger.logError(moduleId, \"Module referenced by require call has not been defined.\");\n        }\n      } else {\n        this.modules.logger.logError(moduleId, \"First argument to require function is not a number or string value.\");\n        return undefined;\n      }\n      this.log(`>require(${moduleIdValue})`);\n      let result;\n      try {\n        this.requireStack.push(moduleIdValue);\n        let requireSequenceStart = this.requireSequence.length;\n        this.requireSequence.push(moduleIdValue);\n        let effects = realm.partially_evaluate(() => {\n          try {\n            return performCall();\n          } catch (e) {\n            if (e instanceof Completion) return e;\n            throw e;\n          }\n        });\n        [result] = effects;\n        invariant(result instanceof Value || result instanceof Completion);\n        if (result instanceof IntrospectionThrowCompletion) {\n          let [message, stack] = this.modules.getMessageAndStack(effects);\n          console.log(`delaying require(${moduleIdValue}): ${message} ${stack}`);\n          // So we are about to emit a delayed require(...) call.\n          // However, before we do that, let's try to require all modules that we\n          // know this delayed require call will require.\n          // This way, we ensure that those modules will be fully initialized\n          // before the require call executes.\n          // TODO: More needs to be done to make the delayUnsupportedRequires\n          // feature completely safe. Open issues are:\n          // 1) Side-effects on the heap of delayed factory functions are not discovered or rejected.\n          // 2) While we do process an appropriate list of transitively required modules here,\n          //    more modules would have been required if the Introspection exception had not been thrown.\n          //    To be correct, those modules would have to be prepacked here as well.\n          let nestedModulesIds = new Set();\n          for (let i = requireSequenceStart; i < this.requireSequence.length; i++) {\n            let nestedModuleId = this.requireSequence[i];\n            if (nestedModulesIds.has(nestedModuleId)) continue;\n            nestedModulesIds.add(nestedModuleId);\n            this.modules.tryInitializeModule(\n              nestedModuleId,\n              `initialization of module ${nestedModuleId} as it's required by module ${moduleIdValue}`);\n          }\n\n          result = realm.deriveAbstract(\n            TypesDomain.topVal,\n            ValuesDomain.topVal, [],\n             ([]) => t.callExpression(t.identifier(\"require\"), [t.valueToNode(moduleIdValue)]));\n        } else {\n          realm.apply_effects(effects, `initialization of module ${moduleIdValue}`);\n        }\n      } finally {\n        let popped = this.requireStack.pop();\n        invariant(popped === moduleIdValue);\n        let message = \"\";\n        invariant(!(result instanceof IntrospectionThrowCompletion));\n        if (result instanceof ThrowCompletion) message = \" threw an error\";\n        this.log(`<require(${moduleIdValue})${message}`);\n      }\n      if (result instanceof Completion) throw result;\n      return result;\n    } else if (F === this.modules.getDefine()) {\n      if (this.partialEvaluation !== 0) this.modules.logger.logError(F, \"Defining a module in nested partial evaluation is not supported.\");\n      let factoryFunction = argumentsList[0];\n      if (factoryFunction instanceof FunctionValue) this.modules.factoryFunctions.add(factoryFunction);\n      else this.modules.logger.logError(factoryFunction, \"First argument to define function is not a function value.\");\n      let moduleId = argumentsList[1];\n      if (moduleId instanceof NumberValue || moduleId instanceof StringValue) this.modules.moduleIds.add(moduleId.value);\n      else this.modules.logger.logError(moduleId, \"Second argument to define function is not a number or string value.\");\n    }\n    return undefined;\n  }\n}\n\n\nexport class Modules {\n  constructor(realm: Realm, logger: Logger, logModules: boolean, delayUnsupportedRequires: boolean) {\n    this.realm = realm;\n    this.logger = logger;\n    this._require = realm.intrinsics.undefined;\n    this._define = realm.intrinsics.undefined;\n    this.factoryFunctions = new Set();\n    this.moduleIds = new Set();\n    this.initializedModules = new Map();\n    realm.tracers.push(new ModuleTracer(this, logModules));\n    this.delayUnsupportedRequires = delayUnsupportedRequires;\n  }\n\n  realm: Realm;\n  logger: Logger;\n  _require: Value;\n  _define: Value;\n  factoryFunctions: Set<FunctionValue>;\n  moduleIds: Set<number | string>;\n  initializedModules: Map<number | string, Value>;\n  active: boolean;\n  delayUnsupportedRequires: boolean;\n\n  _getGlobalProperty(name: string) {\n    if (this.active) return this.realm.intrinsics.undefined;\n    this.active = true;\n    try {\n      let realm = this.realm;\n      return this.logger.tryQuery(() => Get(realm, realm.$GlobalObject, name), realm.intrinsics.undefined, false);\n    } finally {\n      this.active = false;\n    }\n  }\n\n  getRequire(): Value {\n    if (!(this._require instanceof FunctionValue)) this._require = this._getGlobalProperty(\"require\");\n    return this._require;\n  }\n\n  getDefine(): Value {\n    if (!(this._define instanceof FunctionValue)) this._define = this._getGlobalProperty(\"__d\");\n    return this._define;\n  }\n\n  getIsRequire(formalParameters: Array<BabelNodeLVal>, functions: Array<FunctionValue>): (scope: any, node: BabelNodeCallExpression) => boolean {\n    let realm = this.realm;\n    let logger = this.logger;\n    let modules = this;\n    return function (scope: any, node: BabelNodeCallExpression) {\n      if (!t.isIdentifier(node.callee) ||\n        node.arguments.length !== 1 ||\n        !node.arguments[0]) return false;\n      let argument = node.arguments[0];\n      if (!t.isNumericLiteral(argument) && !t.isStringLiteral(argument)) return false;\n\n      invariant(node.callee);\n      let innerName = ((node.callee: any): BabelNodeIdentifier).name;\n\n      for (let f of functions) {\n        let scopedBinding = scope.getBinding(innerName);\n        if (scopedBinding) {\n          if (modules.factoryFunctions.has(f) && formalParameters[1] === scopedBinding.path.node) {\n            invariant(scopedBinding.kind === \"param\");\n            continue;\n          }\n          // The name binds to some local entity, but nothing we'd know what exactly it is\n          return false;\n        }\n\n        let doesNotMatter = true;\n        let reference = logger.tryQuery(\n          () => ResolveBinding(realm, innerName, doesNotMatter, f.$Environment),\n          undefined, false);\n        if (reference === undefined) {\n          // We couldn't resolve as we came across some behavior that we cannot deal with abstractly\n          return false;\n        }\n        if (IsUnresolvableReference(realm, reference)) return false;\n        let referencedBase = reference.base;\n        let referencedName: string = (reference.referencedName: any);\n        if (typeof referencedName !== \"string\") return false;\n        let value;\n        if (reference.base instanceof GlobalEnvironmentRecord) {\n          value = logger.tryQuery(() =>\n            Get(realm, realm.$GlobalObject, innerName), realm.intrinsics.undefined, false);\n        } else {\n          invariant(referencedBase instanceof DeclarativeEnvironmentRecord);\n          let binding = referencedBase.bindings[referencedName];\n          if (!binding.initialized) return false;\n          value = binding.value;\n        }\n        if (value !== modules.getRequire()) return false;\n      }\n\n      return true;\n    };\n  }\n\n  getMessageAndStack([result, generator, bindings, properties, createdObjects]: Effects): [string, string] {\n    let realm = this.realm;\n    if (!(result instanceof Completion) || !(result.value instanceof ObjectValue))\n      return [\"(no message)\", \"(no stack)\"];\n\n    // Temporarily apply state changes in order to retrieve message\n    realm.restoreBindings(bindings);\n    realm.restoreProperties(properties);\n\n    let value = result.value;\n    let message: string = this.logger.tryQuery(() => ToStringPartial(realm, Get(realm, ((value: any): ObjectValue), \"message\")), \"(cannot get message)\", false);\n    let stack: string = this.logger.tryQuery(() => ToStringPartial(realm, Get(realm, ((value: any): ObjectValue), \"stack\")), \"\", false);\n\n    // Undo state changes\n    realm.restoreBindings(bindings);\n    realm.restoreProperties(properties);\n\n    if (result instanceof IntrospectionThrowCompletion && result.reason !== undefined)\n      message = `[${result.reason}] ${message}`;\n\n    let i = stack.indexOf(\"\\n\");\n    if (i >= 0) stack = stack.slice(i);\n    return [message, stack];\n  }\n\n  tryInitializeModule(moduleId: number | string, message: string): void | Effects {\n    let realm = this.realm;\n    // setup execution environment\n    let context = new ExecutionContext();\n    let env = realm.$GlobalEnv;\n    context.lexicalEnvironment = env;\n    context.variableEnvironment = env;\n    context.realm = realm;\n    let oldDelayUnsupportedRequires = this.delayUnsupportedRequires;\n    this.delayUnsupportedRequires = false;\n    realm.pushContext(context);\n    try {\n      let node = t.callExpression(t.identifier(\"require\"), [t.valueToNode(moduleId)]);\n\n      let effects = realm.partially_evaluate_node(node, true, env, false);\n      let result = effects[0];\n      if (result instanceof IntrospectionThrowCompletion) return effects;\n\n      realm.apply_effects(effects, message);\n      if (result instanceof Completion) {\n        console.log(`=== UNEXPECTED ERROR during ${message} ===`);\n        this.logger.logCompletion(result);\n        return undefined;\n      }\n\n      return effects;\n    } finally {\n      realm.popContext(context);\n      this.delayUnsupportedRequires = oldDelayUnsupportedRequires;\n    }\n  }\n\n  initializeMoreModules() {\n    // partially evaluate all factory methods by calling require\n    let count = 0;\n    let introspectionErrors = Object.create(null);\n    for (let moduleId of this.moduleIds) {\n      if (this.initializedModules.has(moduleId)) continue;\n\n      let effects = this.tryInitializeModule(\n        moduleId,\n        `Speculative initialization of module ${moduleId}`);\n\n      if (effects === undefined) break;\n      let result = effects[0];\n      if (result instanceof IntrospectionThrowCompletion) {\n        invariant(result instanceof IntrospectionThrowCompletion);\n        let [message, stack] = this.getMessageAndStack(effects);\n        let stacks = introspectionErrors[message] = introspectionErrors[message] || [];\n        stacks.push(stack);\n        continue;\n      }\n\n      invariant(result instanceof Value);\n      count++;\n      this.initializedModules.set(moduleId, result);\n    }\n    if (count > 0) console.log(`=== speculatively initialized ${count} additional modules`);\n    let a = [];\n    for (let key in introspectionErrors) a.push([introspectionErrors[key], key]);\n    a.sort((x, y) => y[0].length - x[0].length);\n    if (a.length) {\n      console.log(`=== speculative module initialization failures ordered by frequency`);\n      for (let [stacks, n] of a) console.log(`${stacks.length}x ${n} ${stacks.join(\"\\nas well as\")}]`);\n    }\n  }\n\n  resolveInitializedModules(): void {\n    // partial evaluate all possible requires and see which are possible to inline\n    let realm = this.realm;\n    // setup execution environment\n    let context = new ExecutionContext();\n    let env = realm.$GlobalEnv;\n    context.lexicalEnvironment = env;\n    context.variableEnvironment = env;\n    context.realm = realm;\n    realm.pushContext(context);\n    let oldReadOnly = realm.setReadOnly(true);\n    let oldDelayUnsupportedRequires = this.delayUnsupportedRequires;\n    this.delayUnsupportedRequires = false;\n    try {\n      for (let moduleId of this.moduleIds) {\n        let node = t.callExpression(t.identifier(\"require\"), [t.valueToNode(moduleId)]);\n\n        let [compl, generator, bindings, properties, createdObjects] =\n          realm.partially_evaluate_node(node, true, env, false);\n        // for lint unused\n        invariant(bindings);\n\n        if (compl instanceof AbruptCompletion) continue;\n        invariant(compl instanceof Value);\n\n        if (generator.body.length !== 0 ||\n          (compl instanceof ObjectValue && createdObjects.has(compl))) continue;\n        // Check for escaping property assignments, if none escape, we're safe\n        // to replace the require with its exports object\n        let escapes = false;\n        for (let [binding] of properties) {\n          if (!createdObjects.has(binding.object)) escapes = true;\n        }\n        if (escapes) continue;\n\n        this.initializedModules.set(moduleId, compl);\n      }\n    } finally {\n      realm.popContext(context);\n      realm.setReadOnly(oldReadOnly);\n      this.delayUnsupportedRequires = oldDelayUnsupportedRequires;\n    }\n  }\n}\n"]}