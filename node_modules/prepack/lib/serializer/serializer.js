"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Serializer = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright (c) 2017-present, Facebook, Inc.
ll rights reserved.

his source code is licensed under the BSD-style license found in the
file in the root directory of this source tree. An additional grant
of patent rights can be found in the PATENTS file in the same directory.


// import { transform } from "babel-core";


var _environment = require("../environment.js");

var _realm = require("../realm.js");

var _index = require("../methods/index.js");

var _completions = require("../completions.js");

var _index2 = require("../values/index.js");

var _Error = require("../intrinsics/ecma262/Error.js");

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _generator = require("../utils/generator.js");

var _babelGenerator = require("babel-generator");

var _babelGenerator2 = _interopRequireDefault(_babelGenerator);

var _babelTraverse = require("babel-traverse");

var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

var _invariant = require("../invariant.js");

var _invariant2 = _interopRequireDefault(_invariant);

var _types = require("./types.js");

var _visitors = require("./visitors.js");

var _logger = require("./logger.js");

var _modules = require("./modules.js");

var _LoggingTracer = require("./LoggingTracer.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function isSameNode(left, right) {
  var type = left.type;

  if (type !== right.type) {
    return false;
  }

  if (type === "Identifier") {
    return left.name === right.name;
  }

  if (type === "NullLiteral") {
    return true;
  }

  if (type === "BooleanLiteral" || type === "StringLiteral" || type === "NumericLiteral") {
    return left.value === right.value;
  }

  return false;
}

var Serializer = exports.Serializer = function () {
  function Serializer(realm) {
    var serializerOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Serializer);

    (0, _invariant2.default)(realm.isPartial);
    // Start tracking mutations
    realm.generator = new _generator.Generator(realm);

    this.realm = realm;
    this.logger = new _logger.Logger(this.realm, !!serializerOptions.internalDebug);
    this.modules = new _modules.Modules(this.realm, this.logger, !!serializerOptions.logModules, !!serializerOptions.delayUnsupportedRequires);
    if (serializerOptions.trace) this.realm.tracers.push(new _LoggingTracer.LoggingTracer(this.realm));

    var realmGenerator = this.realm.generator;
    (0, _invariant2.default)(realmGenerator);
    this.generator = realmGenerator;
    var realmPreludeGenerator = this.realm.preludeGenerator;
    (0, _invariant2.default)(realmPreludeGenerator);
    this.preludeGenerator = realmPreludeGenerator;

    this.options = serializerOptions;
    this._resetSerializeStates();
  }

  _createClass(Serializer, [{
    key: "_resetSerializeStates",
    value: function _resetSerializeStates() {
      this.declarativeEnvironmentRecordsBindings = new Map();
      this.serializationStack = [];
      this.delayedSerializations = [];
      this.delayedKeyedSerializations = new Map();
      this.globalReasons = {};
      this.prelude = [];
      this.body = [];

      this.unstrictFunctionBodies = [];
      this.strictFunctionBodies = [];

      this.functions = new Map();
      this.functionInstances = [];
      this.refs = new Map();
      this.declaredDerivedIds = new Set();
      this.descriptors = new Map();
      this.needsEmptyVar = false;
      this.valueNameGenerator = this.preludeGenerator.createNameGenerator("_");
      this.referentializedNameGenerator = this.preludeGenerator.createNameGenerator("$");
      this.descriptorNameGenerator = this.preludeGenerator.createNameGenerator("$$");
      this.factoryNameGenerator = this.preludeGenerator.createNameGenerator("$_");
      this.requireReturns = new Map();
      this.statistics = new _types.SerializerStatistics();
      this.firstFunctionUsages = new Map();
      this.functionPrototypes = new Map();
    }
    //value to intermediate references generated like $0, $1, $2,...

  }, {
    key: "_getBodyReference",
    value: function _getBodyReference() {
      return new _types.BodyReference(this.body, this.body.length);
    }
  }, {
    key: "execute",
    value: function execute(filename, code, map, onError) {
      var _this = this;

      var realm = this.realm;
      var res = realm.$GlobalEnv.execute(code, filename, map, "script", function (ast) {
        return (0, _babelTraverse2.default)(ast, _visitors.IdentifierCollector, null, _this.preludeGenerator.nameGenerator.forbiddenNames);
      });

      if (res instanceof _completions.Completion) {
        var context = new _realm.ExecutionContext();
        realm.pushContext(context);
        try {
          if (onError) {
            onError(realm, res.value);
          }
          this.logger.logCompletion(res);
        } finally {
          realm.popContext(context);
        }
      }

      return res;
    }
  }, {
    key: "shouldInline",
    value: function shouldInline(val) {
      if (val instanceof _index2.SymbolValue) {
        return false;
      }

      if (val instanceof _index2.AbstractValue && val.hasIdentifier()) {
        (0, _invariant2.default)(!this.preludeGenerator.derivedIds.has(val.getIdentifier().name) || this.declaredDerivedIds.has(val.getIdentifier()));
        return true;
      }

      if (val.isIntrinsic()) {
        return false;
      }

      return val instanceof _index2.PrimitiveValue;
    }
  }, {
    key: "_canIgnoreProperty",
    value: function _canIgnoreProperty(val, key, desc) {
      if ((0, _index.IsArray)(this.realm, val)) {
        if (key === "length" && desc.writable && !desc.enumerable && !desc.configurable) {
          // length property has the correct descriptor values
          return true;
        }
      } else if (val instanceof _index2.FunctionValue) {
        if (key === "length") {
          if (desc.value === undefined) {
            this.logger.logError(val, "Functions with length accessor properties are not supported.");
            // Rationale: .bind() would call the accessor, which might throw, mutate state, or do whatever...
          }
          // length property will be inferred already by the amount of parameters
          return !desc.writable && !desc.enumerable && desc.configurable && val.hasDefaultLength();
        }

        if (key === "name") {
          // TODO #474: Make sure that we retain original function names. Or set name property. Or ensure that nothing references the name property.
          return true;
        }

        // Properties `caller` and `arguments` are added to normal functions in non-strict mode to prevent TypeErrors.
        // Because they are autogenerated, they should be ignored.
        if (key === "arguments" || key === "caller") {
          if (!val.$Strict && desc.writable && !desc.enumerable && desc.configurable && desc.value instanceof _index2.UndefinedValue && val.$FunctionKind === 'normal') return true;
        }

        // ignore the `prototype` property when it's the right one
        if (key === "prototype") {
          if (!desc.configurable && !desc.enumerable && desc.writable && desc.value instanceof _index2.ObjectValue && desc.value.originalConstructor === val) {
            return true;
          }
        }
      }

      if (key === "constructor") {
        if (desc.configurable && !desc.enumerable && desc.writable && desc.value === val.originalConstructor) return true;
      }

      return false;
    }
  }, {
    key: "addProperties",
    value: function addProperties(name, obj, reasons, alternateProperties) {
      var _this2 = this;

      /*
      for (let symbol of obj.symbols.keys()) {
        // TODO #22: serialize symbols
      }
      */

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        var _loop = function _loop() {
          var _step$value = _slicedToArray(_step.value, 2),
              key = _step$value[0],
              propertyBinding = _step$value[1];

          (0, _invariant2.default)(propertyBinding);
          var desc = propertyBinding.descriptor;
          if (desc === undefined) return "continue"; //deleted
          if (_this2._canIgnoreProperty(obj, key, desc)) return "continue";
          (0, _invariant2.default)(desc !== undefined);
          _this2._eagerOrDelay(_this2._getDescriptorValues(desc).concat(obj), function () {
            (0, _invariant2.default)(desc !== undefined);
            return _this2._emitProperty(name, obj, key, desc, reasons);
          });
        };

        for (var _iterator = (alternateProperties || obj.properties)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _ret = _loop();

          if (_ret === "continue") continue;
        }

        // inject properties with computed names
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (obj.unknownProperty !== undefined) {
        var desc = obj.unknownProperty.descriptor;
        if (desc !== undefined) {
          var val = desc.value;
          (0, _invariant2.default)(val instanceof _index2.AbstractValue);
          this._eagerOrDelay(this._getNestedAbstractValues(val, [obj]), function () {
            (0, _invariant2.default)(val instanceof _index2.AbstractValue);
            _this2._emitPropertiesWithComputedNames(obj, val, reasons);
          });
        }
      }

      // prototype
      this.addObjectPrototype(name, obj, reasons);
      if (obj instanceof _index2.FunctionValue) this.addConstructorPrototype(name, obj, reasons);

      this.statistics.objects++;
      this.statistics.objectProperties += obj.properties.size;
    }
  }, {
    key: "addObjectPrototype",
    value: function addObjectPrototype(name, obj, reasons) {
      var _this3 = this;

      var proto = obj.$Prototype;

      var kind = obj.getKind();
      if (proto === this.realm.intrinsics[kind + "Prototype"]) return;

      this._eagerOrDelay([proto, obj], function () {
        (0, _invariant2.default)(proto);
        var serializedProto = _this3.serializeValue(proto, reasons.concat("Referred to as the prototype for " + name));
        var uid = _this3._getValIdForReference(obj);
        if (!_this3.realm.isCompatibleWith(_this3.realm.MOBILE_JSC_VERSION)) _this3.body.push(t.expressionStatement(t.callExpression(_this3.preludeGenerator.memoizeReference("Object.setPrototypeOf"), [uid, serializedProto])));else {
          _this3.body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(uid, t.identifier("__proto__")), serializedProto)));
        }
      });
    }
  }, {
    key: "addConstructorPrototype",
    value: function addConstructorPrototype(name, func, reasons) {
      var _this4 = this;

      // If the original prototype object was mutated,
      // request its serialization here as this might be observable by
      // residual code.
      var prototype = this._getPropertyValue(func, "prototype");
      if (prototype instanceof _index2.ObjectValue && prototype.originalConstructor === func && !this._isDefaultPrototype(prototype)) {
        this._eagerOrDelay([func], function () {
          (0, _invariant2.default)(prototype);
          _this4.serializeValue(prototype, reasons.concat("Prototype of " + name));
        });
      }
    }
  }, {
    key: "_getNestedAbstractValues",
    value: function _getNestedAbstractValues(absVal, values) {
      (0, _invariant2.default)(absVal.args.length === 3);
      var cond = absVal.args[0];
      (0, _invariant2.default)(cond instanceof _index2.AbstractValue);
      if (cond.kind === "template for property name condition") {
        var P = cond.args[0];values.push(P);
        var V = absVal.args[1];values.push(V);
        var W = absVal.args[2];
        if (W instanceof _index2.AbstractValue) this._getNestedAbstractValues(W, values);else values.push(W);
      } else {
        // conditional assignment
        values.push(cond);
        var consequent = absVal.args[1];(0, _invariant2.default)(consequent instanceof _index2.AbstractValue);
        var alternate = absVal.args[2];(0, _invariant2.default)(alternate instanceof _index2.AbstractValue);
        this._getNestedAbstractValues(consequent, values);
        this._getNestedAbstractValues(alternate, values);
      }
      return values;
    }
  }, {
    key: "_emitPropertiesWithComputedNames",
    value: function _emitPropertiesWithComputedNames(obj, absVal, reasons) {
      (0, _invariant2.default)(absVal.args.length === 3);
      var cond = absVal.args[0];
      (0, _invariant2.default)(cond instanceof _index2.AbstractValue);
      if (cond.kind === "template for property name condition") {
        var P = cond.args[0];(0, _invariant2.default)(P instanceof _index2.AbstractValue);
        var V = absVal.args[1];
        var earlier_props = absVal.args[2];
        if (earlier_props instanceof _index2.AbstractValue) this._emitPropertiesWithComputedNames(obj, earlier_props, reasons);
        var uid = this._getValIdForReference(obj);
        var serializedP = this.serializeValue(P, reasons.concat("Computed property name"));
        var serializedV = this.serializeValue(V, reasons.concat("Computed property value"));
        this.body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(uid, serializedP, true), serializedV)));
      } else {
        // conditional assignment
        var serializedCond = this.serializeValue(cond, reasons.concat("joined computed property condition"));
        var consequent = absVal.args[1];(0, _invariant2.default)(consequent instanceof _index2.AbstractValue);
        var alternate = absVal.args[2];(0, _invariant2.default)(alternate instanceof _index2.AbstractValue);
        var saved_body = this.body;
        this.body = [];
        this._emitPropertiesWithComputedNames(obj, consequent, reasons);
        var consequent_body = t.blockStatement(this.body);
        this.body = [];
        this._emitPropertiesWithComputedNames(obj, alternate, reasons);
        var alternate_body = t.blockStatement(this.body);
        this.body = saved_body;
        this.body.push(t.ifStatement(serializedCond, consequent_body, alternate_body));
      }
    }
  }, {
    key: "_emitProperty",
    value: function _emitProperty(name, val, key, desc, reasons) {
      var _this5 = this;

      if (this._canEmbedProperty(val, key, desc)) {
        var descValue = desc.value;
        (0, _invariant2.default)(descValue instanceof _index2.Value);
        var mightHaveBeenDeleted = descValue.mightHaveBeenDeleted();
        var serializeFunc = function serializeFunc() {
          _this5._assignProperty(function () {
            var serializedKey = _this5.generator.getAsPropertyNameExpression(key);
            return t.memberExpression(_this5._getValIdForReference(val), serializedKey, !t.isIdentifier(serializedKey));
          }, function () {
            (0, _invariant2.default)(descValue instanceof _index2.Value);
            return _this5.serializeValue(descValue, reasons.concat("Referred to in the object " + name + " for the key " + key));
          }, mightHaveBeenDeleted);
        };
        (0, _invariant2.default)(!this._shouldDelayValues([descValue, val]), "precondition of _emitProperty");
        if (mightHaveBeenDeleted) {
          this._delay(true, [], serializeFunc);
        } else {
          serializeFunc();
        }
      } else {
        var descProps = [];

        var boolKeys = ["enumerable", "configurable"];
        var valKeys = [];

        if (!desc.get && !desc.set) {
          boolKeys.push("writable");
          valKeys.push("value");
        } else {
          valKeys.push("set", "get");
        }

        var descriptorsKey = [];
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = boolKeys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var boolKey = _step2.value;

            if (boolKey in desc) {
              var b = desc[boolKey];
              (0, _invariant2.default)(b !== undefined);
              descProps.push(t.objectProperty(t.identifier(boolKey), t.booleanLiteral(b)));
              descriptorsKey.push(boolKey + ":" + b.toString());
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = valKeys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var descKey = _step3.value;

            if (descKey in desc) descriptorsKey.push(descKey);
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        descriptorsKey = descriptorsKey.join(",");
        var descriptorId = this.descriptors.get(descriptorsKey);
        if (descriptorId === undefined) {
          descriptorId = t.identifier(this.descriptorNameGenerator.generate(descriptorsKey));
          var declar = t.variableDeclaration("var", [t.variableDeclarator(descriptorId, t.objectExpression(descProps))]);
          this.body.push(declar);
          this.descriptors.set(descriptorsKey, descriptorId);
        }
        (0, _invariant2.default)(descriptorId !== undefined);

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = valKeys[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _descKey = _step4.value;

            if (_descKey in desc) {
              var _descValue = desc[_descKey] || this.realm.intrinsics.undefined;
              (0, _invariant2.default)(_descValue instanceof _index2.Value);
              (0, _invariant2.default)(!this._shouldDelayValues([_descValue]), "precondition of _emitProperty");
              this.body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(descriptorId, t.identifier(_descKey)), this.serializeValue(_descValue, reasons.concat("Referred to in the object " + name + " for the key " + (key.name || key.value) + " in the descriptor property " + _descKey)))));
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        var serializedKey = this.generator.getAsPropertyNameExpression(key, /*canBeIdentifier*/false);
        (0, _invariant2.default)(!this._shouldDelayValues([val]), "precondition of _emitProperty");
        var uid = this._getValIdForReference(val);
        this.body.push(t.expressionStatement(t.callExpression(this.preludeGenerator.memoizeReference("Object.defineProperty"), [uid, serializedKey, descriptorId])));
      }
    }
  }, {
    key: "_serializeDeclarativeEnvironmentRecordBinding",
    value: function _serializeDeclarativeEnvironmentRecordBinding(r, n, functionName, reasons) {
      var serializedBindings = this.declarativeEnvironmentRecordsBindings.get(r);
      if (!serializedBindings) {
        serializedBindings = Object.create(null);
        this.declarativeEnvironmentRecordsBindings.set(r, serializedBindings);
      }
      var serializedBinding = serializedBindings[n];
      if (!serializedBinding) {
        var realm = this.realm;
        var binding = r.bindings[n];
        (0, _invariant2.default)(!binding.deletable);
        var value = binding.initialized && binding.value || realm.intrinsics.undefined;
        var serializedValue = this.serializeValue(value, reasons.concat("access in " + functionName + " to " + n));
        serializedBinding = { serializedValue: serializedValue, value: value };
        serializedBindings[n] = serializedBinding;
        if (value.mightBeObject()) {
          // Increment ref count one more time to ensure that this object will be assigned a unique id.
          // This ensures that only once instance is created across all possible residual function invocations.
          this._incrementValToRefCount(value);
        }
      }
      return serializedBinding;
    }
  }, {
    key: "_getValIdForReference",
    value: function _getValIdForReference(val) {
      var id = this._getValIdForReferenceOptional(val);
      (0, _invariant2.default)(id, "Value Id cannot be null or undefined");
      return id;
    }
  }, {
    key: "_getValIdForReferenceOptional",
    value: function _getValIdForReferenceOptional(val) {
      var id = this.refs.get(val);
      if (id) {
        this._incrementValToRefCount(val);
      }
      return id;
    }
  }, {
    key: "_incrementValToRefCount",
    value: function _incrementValToRefCount(val) {
      if (this.collectValToRefCountOnly) {
        var refCount = this.valToRefCount.get(val);
        if (refCount) {
          refCount++;
        } else {
          refCount = 1;
        }
        this.valToRefCount.set(val, refCount);
      }
    }
  }, {
    key: "serializeValue",
    value: function serializeValue(val, reasons, referenceOnly, bindingType) {

      var ref = this._getValIdForReferenceOptional(val);
      if (ref) {
        return ref;
      }

      reasons = reasons || [];
      if (!referenceOnly && this.shouldInline(val)) {
        var res = this._serializeValue("", val, reasons);
        (0, _invariant2.default)(res !== undefined);
        return res;
      }

      var name = this.valueNameGenerator.generate(val.__originalName || "");
      var id = t.identifier(name);
      this.refs.set(val, id);
      this.serializationStack.push(val);
      var init = this._serializeValue(name, val, reasons);
      var result = id;
      this._incrementValToRefCount(val);

      if (reasons.length) {
        this.globalReasons[name] = reasons;
      }

      // default to 2 because we don't want the serializer to assume there's
      // one reference and inline the value
      var refCount = this.options.singlePass ? 2 : this.valToRefCount.get(val);
      (0, _invariant2.default)(refCount !== undefined && refCount > 0);
      if (this.collectValToRefCountOnly || refCount !== 1) {
        if (init) {
          if (init !== id) {
            var declar = t.variableDeclaration(bindingType ? bindingType : "var", [t.variableDeclarator(id, init)]);

            this.body.push(declar);
          }
          this.statistics.valueIds++;
        }
      } else {
        if (init) {
          this.refs.delete(val);
          result = init;
          this.statistics.valueIdsElided++;
        }
      }

      this.serializationStack.pop();
      if (this.serializationStack.length === 0) {
        while (this.delayedSerializations.length) {
          (0, _invariant2.default)(this.serializationStack.length === 0);
          var serializer = this.delayedSerializations.shift();
          serializer();
        }
      }

      return result;
    }
  }, {
    key: "_serializeValueIntrinsic",
    value: function _serializeValueIntrinsic(val) {
      (0, _invariant2.default)(val.intrinsicName);
      return this.preludeGenerator.convertStringToMember(val.intrinsicName);
    }
  }, {
    key: "_delay",
    value: function _delay(reason, values, func) {
      (0, _invariant2.default)(reason);
      if (reason === true) {
        this.delayedSerializations.push(func);
      } else {
        var a = this.delayedKeyedSerializations.get(reason);
        if (a === undefined) this.delayedKeyedSerializations.set(reason, a = []);
        a.push({ values: values, func: func });
      }
    }
  }, {
    key: "_getDescriptorValues",
    value: function _getDescriptorValues(desc) {
      if (desc.value !== undefined) return [desc.value];
      (0, _invariant2.default)(desc.get !== undefined);
      (0, _invariant2.default)(desc.set !== undefined);
      return [desc.get, desc.set];
    }
  }, {
    key: "_shouldDelayValues",
    value: function _shouldDelayValues(values) {
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = values[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var value = _step5.value;

          var delayReason = this._shouldDelayValue(value);
          if (delayReason) return delayReason;
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return false;
    }
  }, {
    key: "_shouldDelayValue",
    value: function _shouldDelayValue(val) {
      // Serialization of a statement related to a value MUST be delayed if
      // the creation of the value's identity requires the availability of either:
      // 1. a time-dependent value that is declared by some generator entry
      //    that has not yet been processed
      //    (tracked by the `declaredDerivedIds` set), or
      // 2. a value that is also currently being serialized
      //    (tracked by the `serializationStack`).
      var delayReason = void 0;
      if (val instanceof _index2.BoundFunctionValue) {
        delayReason = this._shouldDelayValue(val.$BoundTargetFunction);
        if (delayReason) return delayReason;
        delayReason = this._shouldDelayValue(val.$BoundThis);
        if (delayReason) return delayReason;
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = val.$BoundArguments[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var arg = _step6.value;

            delayReason = this._shouldDelayValue(arg);
            if (delayReason) return delayReason;
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6.return) {
              _iterator6.return();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }
      } else if (val instanceof _index2.FunctionValue) {
        if (!this.firstFunctionUsages.has(val)) this.firstFunctionUsages.set(val, this._getBodyReference());
        return false;
      } else if (val instanceof _index2.AbstractValue) {
        if (val.hasIdentifier() && !this.declaredDerivedIds.has(val.getIdentifier())) return val.getIdentifier();
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
          for (var _iterator7 = val.args[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var _arg = _step7.value;

            delayReason = this._shouldDelayValue(_arg);
            if (delayReason) return delayReason;
          }
        } catch (err) {
          _didIteratorError7 = true;
          _iteratorError7 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion7 && _iterator7.return) {
              _iterator7.return();
            }
          } finally {
            if (_didIteratorError7) {
              throw _iteratorError7;
            }
          }
        }
      } else if (val instanceof _index2.ProxyValue) {
        delayReason = this._shouldDelayValue(val.$ProxyTarget);
        if (delayReason) return delayReason;
        delayReason = this._shouldDelayValue(val.$ProxyHandler);
        if (delayReason) return delayReason;
      } else if (val instanceof _index2.ObjectValue) {
        var kind = val.getKind();
        if (kind === "Date") {
          (0, _invariant2.default)(val.$DateValue !== undefined);
          delayReason = this._shouldDelayValue(val.$DateValue);
          if (delayReason) return delayReason;
        }
      }

      return this.serializationStack.indexOf(val) >= 0;
    }
  }, {
    key: "_eagerOrDelay",
    value: function _eagerOrDelay(values, serializer) {
      var delayReason = this._shouldDelayValues(values);
      if (delayReason) {
        this._delay(delayReason, values, serializer);
      } else {
        serializer();
      }
    }
  }, {
    key: "_assignProperty",
    value: function _assignProperty(locationFn, valueFn, mightHaveBeenDeleted) {
      var assignment = t.expressionStatement(t.assignmentExpression("=", locationFn(), valueFn()));
      if (mightHaveBeenDeleted) {
        var condition = t.binaryExpression("!==", valueFn(), this.serializeValue(this.realm.intrinsics.empty));
        this.body.push(t.ifStatement(condition, assignment));
      } else {
        this.body.push(assignment);
      }
    }
  }, {
    key: "_serializeValueArray",
    value: function _serializeValueArray(name, val, reasons) {
      var _this6 = this;

      var realm = this.realm;
      var elems = [];

      var remainingProperties = new Map(val.properties);

      // If array length is abstract set it manually and then all known properties (including numeric indices)
      var lenProperty = (0, _index.Get)(realm, val, "length");
      if (lenProperty instanceof _index2.AbstractValue) {
        this._eagerOrDelay([val], function () {
          _this6._assignProperty(function () {
            return t.memberExpression(_this6._getValIdForReference(val), t.identifier("length"));
          }, function () {
            return _this6.serializeValue(lenProperty, reasons.concat("Abstract length of array " + name));
          }, false /*mightHaveBeenDeleted*/);
        });
        remainingProperties.delete("length");
      } else {
        // An array's length property cannot be redefined, so this won't run user code
        var len = (0, _index.ToLength)(realm, lenProperty);

        var _loop2 = function _loop2(i) {
          var key = i + "";
          var propertyBinding = remainingProperties.get(key);
          var elem = null;
          if (propertyBinding !== undefined) {
            var descriptor = propertyBinding.descriptor;
            if (descriptor !== undefined && descriptor.value !== undefined) {
              // deleted
              remainingProperties.delete(key);
              if (_this6._canEmbedProperty(val, key, descriptor)) {
                var elemVal = descriptor.value;
                (0, _invariant2.default)(elemVal instanceof _index2.Value);
                var mightHaveBeenDeleted = elemVal.mightHaveBeenDeleted();
                var delayReason = _this6._shouldDelayValue(elemVal) || mightHaveBeenDeleted;
                if (delayReason) {
                  // handle self recursion
                  _this6._delay(delayReason, [elemVal, val], function () {
                    _this6._assignProperty(function () {
                      return t.memberExpression(_this6._getValIdForReference(val), t.numericLiteral(i), true);
                    }, function () {
                      (0, _invariant2.default)(elemVal !== undefined);
                      return _this6.serializeValue(elemVal, reasons.concat("Declared in array " + name + " at index " + key));
                    }, mightHaveBeenDeleted);
                  });
                } else {
                  elem = _this6.serializeValue(elemVal, reasons.concat("Declared in array " + name + " at index " + key));
                }
              }
            }
          }
          elems.push(elem);
        };

        for (var i = 0; i < len; i++) {
          _loop2(i);
        }
      }

      this.addProperties(name, val, reasons, remainingProperties);
      return t.arrayExpression(elems);
    }
  }, {
    key: "_serializeValueMap",
    value: function _serializeValueMap(name, val, reasons) {
      var _this7 = this;

      var kind = val.getKind();
      var elems = [];

      var entries = void 0;
      if (kind === "Map") {
        entries = val.$MapData;
      } else {
        (0, _invariant2.default)(kind === "WeakMap");
        entries = val.$WeakMapData;
      }
      (0, _invariant2.default)(entries !== undefined);
      var len = entries.length;

      var _loop3 = function _loop3(i) {
        var entry = entries[i];
        var key = entry.$Key;
        var value = entry.$Value;
        if (key === undefined || value === undefined) return "continue";
        var mightHaveBeenDeleted = key.mightHaveBeenDeleted();
        var delayReason = _this7._shouldDelayValue(key) || _this7._shouldDelayValue(value) || mightHaveBeenDeleted;
        if (delayReason) {
          // handle self recursion
          _this7._delay(delayReason, [key, value, val], function () {
            (0, _invariant2.default)(key !== undefined);
            (0, _invariant2.default)(value !== undefined);
            _this7.body.push(t.expressionStatement(t.callExpression(t.memberExpression(_this7._getValIdForReference(val), t.identifier("set")), [_this7.serializeValue(key, reasons.concat("Set entry on " + name)), _this7.serializeValue(value, reasons.concat("Set entry on " + name))])));
          });
        } else {
          var serializedKey = _this7.serializeValue(key, reasons);
          var serializedValue = _this7.serializeValue(value, reasons.concat("Set entry on " + name));
          var _elem = t.arrayExpression([serializedKey, serializedValue]);
          elems.push(_elem);
        }
      };

      for (var i = 0; i < len; i++) {
        var _ret3 = _loop3(i);

        if (_ret3 === "continue") continue;
      }

      this.addProperties(name, val, reasons, val.properties);
      var arrayValue = t.arrayExpression(elems);
      return t.newExpression(this.preludeGenerator.memoizeReference(kind), [arrayValue]);
    }
  }, {
    key: "_serializeValueSet",
    value: function _serializeValueSet(name, val, reasons) {
      var _this8 = this;

      var kind = val.getKind();
      var elems = [];

      var entries = val.$SetData;
      if (kind === "Set") {
        entries = val.$SetData;
      } else {
        (0, _invariant2.default)(kind === "WeakSet");
        entries = val.$WeakSetData;
      }
      (0, _invariant2.default)(entries !== undefined);
      var len = entries.length;

      var _loop4 = function _loop4(i) {
        var entry = entries[i];
        if (entry === undefined) return "continue";
        var mightHaveBeenDeleted = entry.mightHaveBeenDeleted();
        var delayReason = _this8._shouldDelayValue(entry) || mightHaveBeenDeleted;
        if (delayReason) {
          // handle self recursion
          _this8._delay(delayReason, [entry, val], function () {
            (0, _invariant2.default)(entry !== undefined);
            _this8.body.push(t.expressionStatement(t.callExpression(t.memberExpression(_this8._getValIdForReference(val), t.identifier("add")), [_this8.serializeValue(entry, reasons.concat("Added to " + name))])));
          });
        } else {
          var _elem2 = _this8.serializeValue(entry, reasons.concat("Added to " + name));
          elems.push(_elem2);
        }
      };

      for (var i = 0; i < len; i++) {
        var _ret4 = _loop4(i);

        if (_ret4 === "continue") continue;
      }

      this.addProperties(name, val, reasons, val.properties);
      var arrayValue = t.arrayExpression(elems);
      return t.newExpression(this.preludeGenerator.memoizeReference(kind), [arrayValue]);
    }
  }, {
    key: "_serializeValueTypedArray",
    value: function _serializeValueTypedArray(name, val, reasons) {
      var elems = [];

      var len = val.$ArrayLength;
      (0, _invariant2.default)(len !== undefined);
      for (var i = 0; i < len; i++) {
        var _key = i + "";
        var elemVal = val.$Get(_key, val);
        var _elem3 = this.serializeValue(elemVal, reasons.concat("Declared in typed array " + name + " at index " + _key));
        elems.push(_elem3);
      }

      this.addProperties(name, val, reasons, val.properties);
      var arrayValue = t.arrayExpression(elems);
      return t.newExpression(this.preludeGenerator.memoizeReference(val.getKind()), [arrayValue]);
    }
  }, {
    key: "_getPropertyValue",
    value: function _getPropertyValue(val, name) {
      var prototypeBinding = val.properties.get(name);
      if (prototypeBinding === undefined) return undefined;
      var prototypeDesc = prototypeBinding.descriptor;
      if (prototypeDesc === undefined) return undefined;
      return prototypeDesc.value;
    }
  }, {
    key: "_isDefaultPrototype",
    value: function _isDefaultPrototype(prototype) {
      if (prototype.symbols.size !== 0 || prototype.$Prototype !== this.realm.intrinsics.ObjectPrototype || !prototype.getExtensible()) return false;
      var foundConstructor = false;
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = prototype.properties.keys()[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var name = _step8.value;

          if (name === "constructor" && this._getPropertyValue(prototype, name) === prototype.originalConstructor) foundConstructor = true;else return false;
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8.return) {
            _iterator8.return();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }

      return foundConstructor;
    }
  }, {
    key: "_serializeValueFunction",
    value: function _serializeValueFunction(name, val, reasons) {
      var _this9 = this;

      if (val instanceof _index2.BoundFunctionValue) {
        this.addProperties(name, val, reasons);
        return t.callExpression(t.memberExpression(this.serializeValue(val.$BoundTargetFunction, reasons.concat("Bound by " + name)), t.identifier("bind")), [].concat(this.serializeValue(val.$BoundThis, reasons.concat("Bound this of " + name)), val.$BoundArguments.map(function (boundArg, i) {
          return _this9.serializeValue(boundArg, reasons.concat("Bound argument " + i + " of " + name));
        })));
      }

      if (val instanceof _index2.NativeFunctionValue) {
        throw new Error("TODO: do not know how to serialize non-intrinsic native function value");
      }

      (0, _invariant2.default)(val.constructor === _index2.FunctionValue);
      var formalParameters = val.$FormalParameters;
      (0, _invariant2.default)(formalParameters != null);
      var code = val.$ECMAScriptCode;
      (0, _invariant2.default)(code != null);

      var functionInfo = this.functions.get(code);

      if (!functionInfo) {
        functionInfo = {
          names: Object.create(null),
          modified: Object.create(null),
          instances: [],
          usesArguments: false,
          usesThis: false
        };
        this.functions.set(code, functionInfo);

        var state = {
          tryQuery: this.logger.tryQuery.bind(this.logger),
          val: val,
          reasons: reasons,
          name: name,
          functionInfo: functionInfo,
          map: functionInfo.names,
          realm: this.realm };

        (0, _babelTraverse2.default)(t.file(t.program([t.expressionStatement(t.functionExpression(null, formalParameters, code))])), _visitors.ClosureRefVisitor, null, state);

        if (val.isResidual && Object.keys(functionInfo.names).length) {
          this.logger.logError(val, "residual function " + ((0, _Error.describeLocation)(this.realm, val, undefined, code.loc) || "(unknown)") + " refers to the following identifiers defined outside of the local scope: " + Object.keys(functionInfo.names).join(", "));
        }
      }

      var serializedBindings = Object.create(null);
      var instance = {
        serializedBindings: serializedBindings,
        functionValue: val
      };
      var delayed = 1;
      var undelay = function undelay() {
        if (--delayed === 0) {
          instance.insertionPoint = _this9._getBodyReference();
          _this9.functionInstances.push(instance);
        }
      };

      var _loop5 = function _loop5(innerName) {
        var referencedValues = [];
        var serializeBindingFunc = void 0;
        var doesNotMatter = true;
        var reference = _this9.logger.tryQuery(function () {
          return (0, _index.ResolveBinding)(_this9.realm, innerName, doesNotMatter, val.$Environment);
        }, undefined, true);
        if (reference === undefined) {
          serializeBindingFunc = function serializeBindingFunc() {
            return _this9._serializeGlobalBinding(innerName);
          };
        } else {
          (0, _invariant2.default)(!(0, _index.IsUnresolvableReference)(_this9.realm, reference));
          var referencedBase = reference.base;
          var referencedName = reference.referencedName;
          if (typeof referencedName !== "string") {
            throw new Error("TODO: do not know how to serialize reference with symbol");
          }
          if (reference.base instanceof _environment.GlobalEnvironmentRecord) {
            serializeBindingFunc = function serializeBindingFunc() {
              return _this9._serializeGlobalBinding(referencedName);
            };
          } else if (referencedBase instanceof _environment.DeclarativeEnvironmentRecord) {
            serializeBindingFunc = function serializeBindingFunc() {
              (0, _invariant2.default)(referencedBase instanceof _environment.DeclarativeEnvironmentRecord);
              return _this9._serializeDeclarativeEnvironmentRecordBinding(referencedBase, referencedName, name, reasons);
            };
            var binding = referencedBase.bindings[referencedName];
            if (binding.initialized && binding.value) referencedValues.push(binding.value);
          } else {
            (0, _invariant2.default)(false);
          }
        }
        delayed++;
        _this9._eagerOrDelay(referencedValues, function () {
          var serializedBinding = serializeBindingFunc();
          (0, _invariant2.default)(serializedBinding);
          serializedBindings[innerName] = serializedBinding;
          (0, _invariant2.default)(functionInfo);
          if (functionInfo.modified[innerName]) serializedBinding.modified = true;
          undelay();
        });
      };

      for (var innerName in functionInfo.names) {
        _loop5(innerName);
      }

      undelay();
      functionInfo.instances.push(instance);

      this.addProperties(name, val, reasons);
    }
  }, {
    key: "_canEmbedProperty",
    value: function _canEmbedProperty(obj, key, prop) {
      if (obj instanceof _index2.FunctionValue && key === "prototype") return !!prop.writable && !prop.configurable && !prop.enumerable && !prop.set && !prop.get;else return !!prop.writable && !!prop.configurable && !!prop.enumerable && !prop.set && !prop.get;
    }
  }, {
    key: "_serializeValueObject",
    value: function _serializeValueObject(name, val, reasons) {
      var _this10 = this;

      // If this object is a prototype object that was implicitly created by the runtime
      // for a constructor, then we can obtain a reference to this object
      // in a special way that's handled alongside function serialization.
      var constructor = val.originalConstructor;
      if (constructor !== undefined) {
        var prototypeId = this.refs.get(val);
        (0, _invariant2.default)(prototypeId !== undefined);
        this._eagerOrDelay([constructor], function () {
          (0, _invariant2.default)(constructor !== undefined);
          (0, _invariant2.default)(prototypeId !== undefined);
          _this10.serializeValue(constructor, reasons.concat("Constructor of object " + name));
          _this10.addProperties(name, val, reasons);
          _this10.functionPrototypes.set(constructor, prototypeId);
        });
        return prototypeId;
      }

      var kind = val.getKind();
      switch (kind) {
        case "RegExp":
          var source = val.$OriginalSource;
          var flags = val.$OriginalFlags;
          (0, _invariant2.default)(typeof source === "string");
          (0, _invariant2.default)(typeof flags === "string");
          this.addProperties(name, val, reasons);
          return t.callExpression(this.preludeGenerator.memoizeReference("RegExp"), [t.stringLiteral(source), t.stringLiteral(flags)]);
        case "Number":
          var numberData = val.$NumberData;
          (0, _invariant2.default)(numberData !== undefined);
          this.addProperties(name, val, reasons);
          return t.newExpression(this.preludeGenerator.memoizeReference("Number"), [t.numericLiteral(numberData.value)]);
        case "String":
          var stringData = val.$StringData;
          (0, _invariant2.default)(stringData !== undefined);
          this.addProperties(name, val, reasons);
          return t.newExpression(this.preludeGenerator.memoizeReference("String"), [t.stringLiteral(stringData.value)]);
        case "Boolean":
          var booleanData = val.$BooleanData;
          (0, _invariant2.default)(booleanData !== undefined);
          this.addProperties(name, val, reasons);
          return t.newExpression(this.preludeGenerator.memoizeReference("Boolean"), [t.booleanLiteral(booleanData.value)]);
        case "Date":
          var dateValue = val.$DateValue;
          (0, _invariant2.default)(dateValue !== undefined);
          var serializedDateValue = this.serializeValue(dateValue, reasons.concat("[[DateValue]] of object " + name));
          this.addProperties(name, val, reasons);
          return t.newExpression(this.preludeGenerator.memoizeReference("Date"), [serializedDateValue]);
        case "Float32Array":
        case "Float64Array":
        case "Int8Array":
        case "Int16Array":
        case "Int32Array":
        case "Uint8Array":
        case "Uint16Array":
        case "Uint32Array":
        case "Uint8ClampedArray":
          return this._serializeValueTypedArray(name, val, reasons);
        case "Map":
        case "WeakMap":
          return this._serializeValueMap(name, val, reasons);
        case "Set":
        case "WeakSet":
          return this._serializeValueSet(name, val, reasons);
        default:
          if (kind !== "Object") this.logger.logError(val, "Serialization of an object of kind " + kind + " is not supported.");
          if (this.$ParameterMap !== undefined) this.logger.logError(val, "Serialization of an arguments object is not supported.");

          var remainingProperties = new Map(val.properties);
          var props = [];
          var _iteratorNormalCompletion9 = true;
          var _didIteratorError9 = false;
          var _iteratorError9 = undefined;

          try {
            var _loop6 = function _loop6() {
              var _step9$value = _slicedToArray(_step9.value, 2),
                  key = _step9$value[0],
                  propertyBinding = _step9$value[1];

              var descriptor = propertyBinding.descriptor;
              if (descriptor === undefined || descriptor.value === undefined) return "continue"; // deleted
              if (_this10._canEmbedProperty(val, key, descriptor)) {
                remainingProperties.delete(key);
                var propValue = descriptor.value;
                (0, _invariant2.default)(propValue instanceof _index2.Value);
                if (_this10._canIgnoreProperty(val, key, descriptor)) return "continue";
                var mightHaveBeenDeleted = propValue.mightHaveBeenDeleted();
                var _delayReason = _this10._shouldDelayValue(propValue) || mightHaveBeenDeleted;
                if (_delayReason) {
                  // self recursion
                  _this10._delay(_delayReason, [propValue, val], function () {
                    _this10._assignProperty(function () {
                      var serializedKey = _this10.generator.getAsPropertyNameExpression(key);
                      return t.memberExpression(_this10._getValIdForReference(val), serializedKey, !t.isIdentifier(serializedKey));
                    }, function () {
                      (0, _invariant2.default)(propValue instanceof _index2.Value);
                      return _this10.serializeValue(propValue, reasons.concat("Referenced in object " + name + " with key " + key));
                    }, mightHaveBeenDeleted);
                  });
                } else {
                  var serializedKey = _this10.generator.getAsPropertyNameExpression(key);
                  props.push(t.objectProperty(serializedKey, _this10.serializeValue(propValue, reasons.concat("Referenced in object " + name + " with key " + key))));
                }
              }
            };

            for (var _iterator9 = val.properties[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
              var _ret6 = _loop6();

              if (_ret6 === "continue") continue;
            }
          } catch (err) {
            _didIteratorError9 = true;
            _iteratorError9 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion9 && _iterator9.return) {
                _iterator9.return();
              }
            } finally {
              if (_didIteratorError9) {
                throw _iteratorError9;
              }
            }
          }

          this.addProperties(name, val, reasons, remainingProperties);
          return t.objectExpression(props);
      }
    }
  }, {
    key: "_serializeValueSymbol",
    value: function _serializeValueSymbol(val) {
      var args = [];
      if (val.$Description) args.push(t.stringLiteral(val.$Description));
      return t.callExpression(this.preludeGenerator.memoizeReference("Symbol"), args);
    }
  }, {
    key: "_serializeValueProxy",
    value: function _serializeValueProxy(name, val, reasons) {
      return t.newExpression(this.preludeGenerator.memoizeReference("Proxy"), [this.serializeValue(val.$ProxyTarget, reasons.concat("Proxy target of " + name)), this.serializeValue(val.$ProxyHandler, reasons.concat("Proxy handler of " + name))]);
    }
  }, {
    key: "_serializeAbstractValue",
    value: function _serializeAbstractValue(name, val, reasons) {
      var _this11 = this;

      if (val.kind === "sentinel member expression") this.logger.logError(val, "expressions of type o[p] are not yet supported for partially known o and unknown p");
      var serializedArgs = val.args.map(function (abstractArg, i) {
        return _this11.serializeValue(abstractArg, reasons.concat("Argument " + i + " of " + name));
      });
      var serializedValue = val.buildNode(serializedArgs);
      if (serializedValue.type === "Identifier") {
        var id = serializedValue;
        (0, _invariant2.default)(!this.preludeGenerator.derivedIds.has(id.name) || this.declaredDerivedIds.has(id));
      }
      return serializedValue;
    }
  }, {
    key: "_serializeValue",
    value: function _serializeValue(name, val, reasons) {
      if (val instanceof _index2.AbstractValue) {
        return this._serializeAbstractValue(name, val, reasons);
      } else if (val.isIntrinsic()) {
        return this._serializeValueIntrinsic(val);
      } else if (val instanceof _index2.EmptyValue) {
        this.needsEmptyVar = true;
        return t.identifier("__empty");
      } else if (this.shouldInline(val)) {
        return t.valueToNode(val.serialize());
      } else if ((0, _index.IsArray)(this.realm, val)) {
        (0, _invariant2.default)(val instanceof _index2.ObjectValue);
        return this._serializeValueArray(name, val, reasons);
      } else if (val instanceof _index2.ProxyValue) {
        return this._serializeValueProxy(name, val, reasons);
      } else if (val instanceof _index2.FunctionValue) {
        return this._serializeValueFunction(name, val, reasons);
      } else if (val instanceof _index2.SymbolValue) {
        return this._serializeValueSymbol(val);
      } else if (val instanceof _index2.ObjectValue) {
        return this._serializeValueObject(name, val, reasons);
      } else {
        (0, _invariant2.default)(false);
      }
    }
  }, {
    key: "_serializeGlobalBinding",
    value: function _serializeGlobalBinding(key) {
      var value = this.realm.getGlobalLetBinding(key);
      // Check for let binding vs global property
      if (value) {
        var id = this.serializeValue(value, ["global let binding"], true, "let");
        // increment ref count one more time as the value has been
        // referentialized (stored in a variable) by serializeValue
        this._incrementValToRefCount(value);
        return {
          serializedValue: id,
          modified: true, referentialized: true
        };
      } else {
        return { serializedValue: this.preludeGenerator.globalReference(key), modified: true, referentialized: true };
      }
    }
  }, {
    key: "_spliceFunctions",
    value: function _spliceFunctions() {
      var _this12 = this;

      var functionBodies = new Map();
      function getFunctionBody(instance) {
        var b = functionBodies.get(instance);
        if (b === undefined) functionBodies.set(instance, b = []);
        return b;
      }

      var requireStatistics = { replaced: 0, count: 0 };

      // Ensure that all bindings that actually get modified get proper variables
      var functionEntries = Array.from(this.functions.entries());
      var _iteratorNormalCompletion10 = true;
      var _didIteratorError10 = false;
      var _iteratorError10 = undefined;

      try {
        for (var _iterator10 = functionEntries[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
          var _step10$value = _slicedToArray(_step10.value, 2),
              _step10$value$ = _step10$value[1],
              instances = _step10$value$.instances,
              _names = _step10$value$.names;

          var _iteratorNormalCompletion13 = true;
          var _didIteratorError13 = false;
          var _iteratorError13 = undefined;

          try {
            for (var _iterator13 = instances[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
              var instance = _step13.value;

              var serializedBindings = instance.serializedBindings;
              for (var name in _names) {
                var serializedBinding = serializedBindings[name];
                if (serializedBinding.modified && !serializedBinding.referentialized) {
                  var serializedBindingId = t.identifier(this.referentializedNameGenerator.generate(name));
                  var declar = t.variableDeclaration("var", [t.variableDeclarator(serializedBindingId, serializedBinding.serializedValue)]);
                  getFunctionBody(instance).push(declar);
                  serializedBinding.serializedValue = serializedBindingId;
                  serializedBinding.referentialized = true;
                  this.statistics.referentialized++;
                }
              }
            }
          } catch (err) {
            _didIteratorError13 = true;
            _iteratorError13 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion13 && _iterator13.return) {
                _iterator13.return();
              }
            } finally {
              if (_didIteratorError13) {
                throw _iteratorError13;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError10 = true;
        _iteratorError10 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion10 && _iterator10.return) {
            _iterator10.return();
          }
        } finally {
          if (_didIteratorError10) {
            throw _iteratorError10;
          }
        }
      }

      this.statistics.functions = functionEntries.length;
      var hoistedBody = [];
      var _iteratorNormalCompletion11 = true;
      var _didIteratorError11 = false;
      var _iteratorError11 = undefined;

      try {
        for (var _iterator11 = functionEntries[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
          var _step11$value = _slicedToArray(_step11.value, 2),
              funcBody = _step11$value[0],
              _step11$value$ = _step11$value[1],
              usesArguments = _step11$value$.usesArguments,
              usesThis = _step11$value$.usesThis,
              instances = _step11$value$.instances,
              _names2 = _step11$value$.names,
              modified = _step11$value$.modified;

          var params = instances[0].functionValue.$FormalParameters;
          (0, _invariant2.default)(params !== undefined);

          var shouldInline = !funcBody;
          if (!shouldInline && funcBody.start && funcBody.end) {
            var bodySize = funcBody.end - funcBody.start;
            shouldInline = bodySize <= 30;
          }

          // TODO: instead of completely giving up creating factories if there are modified bindings,
          // figure out which instances share all they modified bindings, and then create factories for
          // those batches.
          var anySerializedBindingModified = false;
          var _iteratorNormalCompletion14 = true;
          var _didIteratorError14 = false;
          var _iteratorError14 = undefined;

          try {
            for (var _iterator14 = instances[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
              var _instance2 = _step14.value;

              var _serializedBindings3 = _instance2.serializedBindings;
              for (var _name2 in _names2) {
                var _serializedBinding2 = _serializedBindings3[_name2];
                if (_serializedBinding2.modified) {
                  anySerializedBindingModified = true;
                }
              }
            }
          } catch (err) {
            _didIteratorError14 = true;
            _iteratorError14 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion14 && _iterator14.return) {
                _iterator14.return();
              }
            } finally {
              if (_didIteratorError14) {
                throw _iteratorError14;
              }
            }
          }

          var define = function define(instance, funcNode) {
            var body = funcNode.type === "FunctionDeclaration" ? hoistedBody : getFunctionBody(instance);
            body.push(funcNode);
            var functionValue = instance.functionValue;

            var prototypeId = _this12.functionPrototypes.get(functionValue);
            if (prototypeId !== undefined) {
              var id = _this12._getValIdForReference(functionValue);
              body.push(t.variableDeclaration("var", [t.variableDeclarator(prototypeId, t.memberExpression(id, t.identifier("prototype")))]));
            }
          };

          if (shouldInline || instances.length === 1 || usesArguments || anySerializedBindingModified) {
            this.statistics.functionClones += instances.length - 1;
            var _iteratorNormalCompletion15 = true;
            var _didIteratorError15 = false;
            var _iteratorError15 = undefined;

            try {
              for (var _iterator15 = instances[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                var _instance = _step15.value;
                var functionValue = _instance.functionValue,
                    _serializedBindings = _instance.serializedBindings;

                var id = this._getValIdForReference(functionValue);
                var funcParams = params.slice();
                var funcNode = t.functionDeclaration(id, funcParams, t.cloneDeep(funcBody));

                (0, _babelTraverse2.default)(t.file(t.program([funcNode])), _visitors.ClosureRefReplacer, null, { serializedBindings: _serializedBindings,
                  modified: modified,
                  requireReturns: this.requireReturns,
                  requireStatistics: requireStatistics,
                  isRequire: this.modules.getIsRequire(funcParams, [functionValue]) });

                if (functionValue.$Strict) {
                  this.strictFunctionBodies.push(funcNode);
                } else {
                  this.unstrictFunctionBodies.push(funcNode);
                }

                define(_instance, funcNode);
              }
            } catch (err) {
              _didIteratorError15 = true;
              _iteratorError15 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion15 && _iterator15.return) {
                  _iterator15.return();
                }
              } finally {
                if (_didIteratorError15) {
                  throw _iteratorError15;
                }
              }
            }
          } else {
            var suffix = instances[0].functionValue.__originalName || "";
            var factoryId = t.identifier(this.factoryNameGenerator.generate(suffix));

            // filter included variables to only include those that are different
            var factoryNames = [];
            var sameSerializedBindings = Object.create(null);
            for (var _name in _names2) {
              var isDifferent = false;
              var lastBinding = void 0;

              var _iteratorNormalCompletion16 = true;
              var _didIteratorError16 = false;
              var _iteratorError16 = undefined;

              try {
                for (var _iterator16 = instances[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                  var _ref2 = _step16.value;
                  var _serializedBindings2 = _ref2.serializedBindings;

                  var _serializedBinding = _serializedBindings2[_name];
                  (0, _invariant2.default)(!_serializedBinding.modified);
                  if (!lastBinding) {
                    lastBinding = _serializedBinding;
                  } else if (!(0, _types.AreSameSerializedBindings)(_serializedBinding, lastBinding)) {
                    isDifferent = true;
                    break;
                  }
                }
              } catch (err) {
                _didIteratorError16 = true;
                _iteratorError16 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion16 && _iterator16.return) {
                    _iterator16.return();
                  }
                } finally {
                  if (_didIteratorError16) {
                    throw _iteratorError16;
                  }
                }
              }

              if (isDifferent) {
                factoryNames.push(_name);
              } else {
                (0, _invariant2.default)(lastBinding);
                sameSerializedBindings[_name] = { serializedValue: lastBinding.serializedValue };
              }
            }
            //

            var factoryParams = [];
            var _iteratorNormalCompletion17 = true;
            var _didIteratorError17 = false;
            var _iteratorError17 = undefined;

            try {
              for (var _iterator17 = factoryNames[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                var _key2 = _step17.value;

                factoryParams.push(t.identifier(_key2));
              }
            } catch (err) {
              _didIteratorError17 = true;
              _iteratorError17 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion17 && _iterator17.return) {
                  _iterator17.return();
                }
              } finally {
                if (_didIteratorError17) {
                  throw _iteratorError17;
                }
              }
            }

            factoryParams = factoryParams.concat(params).slice();
            // The Replacer below mutates the AST, so let's clone the original AST to avoid modifying it
            var factoryNode = t.functionDeclaration(factoryId, factoryParams, t.cloneDeep(funcBody));
            this.prelude.push(factoryNode);

            (0, _babelTraverse2.default)(t.file(t.program([factoryNode])), _visitors.ClosureRefReplacer, null, { serializedBindings: sameSerializedBindings,
              modified: modified,
              requireReturns: this.requireReturns,
              requireStatistics: requireStatistics,
              isRequire: this.modules.getIsRequire(factoryParams, instances.map(function (instance) {
                return instance.functionValue;
              })) });

            //

            var _iteratorNormalCompletion18 = true;
            var _didIteratorError18 = false;
            var _iteratorError18 = undefined;

            try {
              var _loop7 = function _loop7() {
                var instance = _step18.value;
                var functionValue = instance.functionValue,
                    serializedBindings = instance.serializedBindings,
                    insertionPoint = instance.insertionPoint;

                var id = _this12._getValIdForReference(functionValue);
                var flatArgs = factoryNames.map(function (name) {
                  return serializedBindings[name].serializedValue;
                });
                var node = void 0;
                var firstUsage = _this12.firstFunctionUsages.get(functionValue);
                (0, _invariant2.default)(insertionPoint !== undefined);
                if (usesThis || firstUsage !== undefined && !firstUsage.isNotEarlierThan(insertionPoint) || _this12.functionPrototypes.get(functionValue) !== undefined) {
                  var callArgs = [t.thisExpression()];
                  var _iteratorNormalCompletion19 = true;
                  var _didIteratorError19 = false;
                  var _iteratorError19 = undefined;

                  try {
                    for (var _iterator19 = flatArgs[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
                      var flatArg = _step19.value;
                      callArgs.push(flatArg);
                    }
                  } catch (err) {
                    _didIteratorError19 = true;
                    _iteratorError19 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion19 && _iterator19.return) {
                        _iterator19.return();
                      }
                    } finally {
                      if (_didIteratorError19) {
                        throw _iteratorError19;
                      }
                    }
                  }

                  var _iteratorNormalCompletion20 = true;
                  var _didIteratorError20 = false;
                  var _iteratorError20 = undefined;

                  try {
                    for (var _iterator20 = params[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
                      var param = _step20.value;

                      if (param.type !== "Identifier") {
                        throw new Error("TODO: do not know how to deal with non-Identifier parameters");
                      }
                      callArgs.push(param);
                    }
                  } catch (err) {
                    _didIteratorError20 = true;
                    _iteratorError20 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion20 && _iterator20.return) {
                        _iterator20.return();
                      }
                    } finally {
                      if (_didIteratorError20) {
                        throw _iteratorError20;
                      }
                    }
                  }

                  var callee = t.memberExpression(factoryId, t.identifier("call"));

                  var childBody = t.blockStatement([t.returnStatement(t.callExpression(callee, callArgs))]);

                  node = t.functionDeclaration(id, params, childBody);
                } else {
                  node = t.variableDeclaration("var", [t.variableDeclarator(id, t.callExpression(t.memberExpression(factoryId, t.identifier("bind")), [t.nullLiteral()].concat(flatArgs)))]);
                }

                define(instance, node);
              };

              for (var _iterator18 = instances[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
                _loop7();
              }
            } catch (err) {
              _didIteratorError18 = true;
              _iteratorError18 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion18 && _iterator18.return) {
                  _iterator18.return();
                }
              } finally {
                if (_didIteratorError18) {
                  throw _iteratorError18;
                }
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError11 = true;
        _iteratorError11 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion11 && _iterator11.return) {
            _iterator11.return();
          }
        } finally {
          if (_didIteratorError11) {
            throw _iteratorError11;
          }
        }
      }

      var _iteratorNormalCompletion12 = true;
      var _didIteratorError12 = false;
      var _iteratorError12 = undefined;

      try {
        for (var _iterator12 = this.functionInstances.reverse()[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
          var _instance3 = _step12.value;

          var functionBody = functionBodies.get(_instance3);
          if (functionBody !== undefined) {
            var insertionPoint = _instance3.insertionPoint;
            (0, _invariant2.default)(insertionPoint instanceof _types.BodyReference);
            Array.prototype.splice.apply(insertionPoint.body, [insertionPoint.index, 0].concat(functionBody));
          }
        }
      } catch (err) {
        _didIteratorError12 = true;
        _iteratorError12 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion12 && _iterator12.return) {
            _iterator12.return();
          }
        } finally {
          if (_didIteratorError12) {
            throw _iteratorError12;
          }
        }
      }

      if (requireStatistics.replaced > 0 && !this.collectValToRefCountOnly) {
        console.log("=== " + this.modules.initializedModules.size + " of " + this.modules.moduleIds.size + " modules initialized, " + requireStatistics.replaced + " of " + requireStatistics.count + " require calls inlined.");
      }

      return hoistedBody;
    }
  }, {
    key: "_getContext",
    value: function _getContext(reasons) {
      var _this13 = this;

      // TODO #482: Values serialized by nested generators would currently only get defined
      // along the code of the nested generator; their definitions need to get hoisted
      // or repeated so that they are accessible and defined from all using scopes
      var bodies = void 0;
      return {
        reasons: reasons,
        serializeValue: this.serializeValue.bind(this),
        startBody: function startBody() {
          if (bodies === undefined) bodies = [];
          bodies.push(_this13.body);
          var body = [];
          _this13.body = body;
          return body;
        },
        endBody: function endBody(body) {
          (0, _invariant2.default)(body === _this13.body);
          (0, _invariant2.default)(bodies !== undefined);
          (0, _invariant2.default)(bodies.length > 0);
          _this13.body = bodies.pop();
        },
        announceDeclaredDerivedId: function announceDeclaredDerivedId(id) {
          _this13.declaredDerivedIds.add(id);
          var a = _this13.delayedKeyedSerializations.get(id);
          if (a !== undefined) {
            while (a.length) {
              (0, _invariant2.default)(_this13.serializationStack.length === 0);
              (0, _invariant2.default)(_this13.delayedSerializations.length === 0);

              var _a$shift = a.shift(),
                  _values = _a$shift.values,
                  _func = _a$shift.func;

              _this13._eagerOrDelay(_values, _func);
            }
            _this13.delayedKeyedSerializations.delete(id);
          }
        }
      };
    }
  }, {
    key: "_emitGenerator",
    value: function _emitGenerator(generator) {
      generator.serialize(this.body, this._getContext(["Root generator"]));
      (0, _invariant2.default)(this.delayedKeyedSerializations.size === 0);
    }
  }, {
    key: "_shouldBeWrapped",
    value: function _shouldBeWrapped(body) {
      for (var i = 0; i < body.length; i++) {
        var item = body[i];
        if (item.type === "ExpressionStatement") {
          continue;
        } else if (item.type === "VariableDeclaration" || item.type === "FunctionDeclaration") {
          return true;
        } else if (item.type === "BlockStatement") {
          if (this._shouldBeWrapped(item.body)) {
            return true;
          }
        } else if (item.type === "IfStatement") {
          if (item.alternate) {
            if (this._shouldBeWrapped(item.alternate.body)) {
              return true;
            }
          }
          if (item.consequent) {
            if (this._shouldBeWrapped(item.consequent.body)) {
              return true;
            }
          }
        }
      }
      return false;
    }
  }, {
    key: "serialize",
    value: function serialize(filename, code, sourceMaps) {
      this._emitGenerator(this.generator);
      (0, _invariant2.default)(this.declaredDerivedIds.size <= this.preludeGenerator.derivedIds.size);

      Array.prototype.push.apply(this.prelude, this.preludeGenerator.prelude);

      // TODO #20: add timers

      // TODO #21: add event listeners

      var _iteratorNormalCompletion21 = true;
      var _didIteratorError21 = false;
      var _iteratorError21 = undefined;

      try {
        for (var _iterator21 = this.modules.initializedModules[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
          var _step21$value = _slicedToArray(_step21.value, 2),
              moduleId = _step21$value[0],
              moduleValue = _step21$value[1];

          this.requireReturns.set(moduleId, this.serializeValue(moduleValue));
        }
      } catch (err) {
        _didIteratorError21 = true;
        _iteratorError21 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion21 && _iterator21.return) {
            _iterator21.return();
          }
        } finally {
          if (_didIteratorError21) {
            throw _iteratorError21;
          }
        }
      }

      var hoistedBody = this._spliceFunctions();

      // add strict modes
      var strictDirective = t.directive(t.directiveLiteral("use strict"));
      var globalDirectives = [];
      if (!this.unstrictFunctionBodies.length && this.strictFunctionBodies.length) {
        // no unstrict functions, only strict ones
        globalDirectives.push(strictDirective);
      } else if (this.unstrictFunctionBodies.length && this.strictFunctionBodies.length) {
        // strict and unstrict functions
        var _iteratorNormalCompletion22 = true;
        var _didIteratorError22 = false;
        var _iteratorError22 = undefined;

        try {
          funcLoop: for (var _iterator22 = this.strictFunctionBodies[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
            var _func2 = _step22.value;

            if (_func2.body.directives) {
              var _iteratorNormalCompletion23 = true;
              var _didIteratorError23 = false;
              var _iteratorError23 = undefined;

              try {
                for (var _iterator23 = _func2.body.directives[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
                  var directive = _step23.value;

                  if (directive.value.value === "use strict") {
                    // already have a use strict directive
                    continue funcLoop;
                  }
                }
              } catch (err) {
                _didIteratorError23 = true;
                _iteratorError23 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion23 && _iterator23.return) {
                    _iterator23.return();
                  }
                } finally {
                  if (_didIteratorError23) {
                    throw _iteratorError23;
                  }
                }
              }
            } else _func2.body.directives = [];

            _func2.body.directives.unshift(strictDirective);
          }
        } catch (err) {
          _didIteratorError22 = true;
          _iteratorError22 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion22 && _iterator22.return) {
              _iterator22.return();
            }
          } finally {
            if (_didIteratorError22) {
              throw _iteratorError22;
            }
          }
        }
      }

      // build ast
      var body = [];
      if (this.needsEmptyVar) {
        body = [t.variableDeclaration("var", [t.variableDeclarator(t.identifier("__empty"), t.objectExpression([]))])];
      }
      body = body.concat(this.prelude, hoistedBody, this.body);
      this.factorifyObjects(body);

      var ast_body = [];
      if (this.preludeGenerator.declaredGlobals.size > 0) ast_body.push(t.variableDeclaration("var", Array.from(this.preludeGenerator.declaredGlobals).map(function (key) {
        return t.variableDeclarator(t.identifier(key));
      })));
      if (body.length) {
        if (this.realm.isCompatibleWith('node-source-maps')) {
          ast_body.push(t.expressionStatement(t.callExpression(t.memberExpression(t.callExpression(t.identifier("require"), [t.stringLiteral("source-map-support")]), t.identifier("install")), [])));
        }

        if (this._shouldBeWrapped(body)) {
          var functionExpression = t.functionExpression(null, [], t.blockStatement(body, globalDirectives));
          var callExpression = this.preludeGenerator.usesThis ? t.callExpression(t.memberExpression(functionExpression, t.identifier("call")), [t.thisExpression()]) : t.callExpression(functionExpression, []);
          ast_body.push(t.expressionStatement(callExpression));
        } else {
          ast_body = body;
        }
      }

      var ast = {
        type: "File",
        program: {
          type: "Program",
          body: ast_body
        }
      };

      return {
        generated: (0, _babelGenerator2.default)(ast, { sourceMaps: sourceMaps, sourceFileName: filename }, code)
      };
    }
  }, {
    key: "getObjectKeys",
    value: function getObjectKeys(obj) {
      var keys = [];

      var _iteratorNormalCompletion24 = true;
      var _didIteratorError24 = false;
      var _iteratorError24 = undefined;

      try {
        for (var _iterator24 = obj.properties[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {
          var prop = _step24.value;

          if (prop.type !== "ObjectProperty") return false;

          var _key3 = prop.key;
          if (_key3.type === "StringLiteral") {
            keys.push(_key3.value);
          } else if (_key3.type === "Identifier") {
            if (prop.computed) return false;
            keys.push(_key3.name);
          } else {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError24 = true;
        _iteratorError24 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion24 && _iterator24.return) {
            _iterator24.return();
          }
        } finally {
          if (_didIteratorError24) {
            throw _iteratorError24;
          }
        }
      }

      var _iteratorNormalCompletion25 = true;
      var _didIteratorError25 = false;
      var _iteratorError25 = undefined;

      try {
        for (var _iterator25 = keys[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {
          var _key4 = _step25.value;

          if (_key4.indexOf("|") >= 0) return false;
        }
      } catch (err) {
        _didIteratorError25 = true;
        _iteratorError25 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion25 && _iterator25.return) {
            _iterator25.return();
          }
        } finally {
          if (_didIteratorError25) {
            throw _iteratorError25;
          }
        }
      }

      return keys.join("|");
    }
  }, {
    key: "factorifyObjects",
    value: function factorifyObjects(body) {
      var _this14 = this;

      var signatures = Object.create(null);

      var _iteratorNormalCompletion26 = true;
      var _didIteratorError26 = false;
      var _iteratorError26 = undefined;

      try {
        for (var _iterator26 = body[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {
          var _node = _step26.value;

          if (_node.type !== "VariableDeclaration") continue;

          var _iteratorNormalCompletion33 = true;
          var _didIteratorError33 = false;
          var _iteratorError33 = undefined;

          try {
            for (var _iterator33 = _node.declarations[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {
              var _declar2 = _step33.value;
              var init = _declar2.init;

              (0, _invariant2.default)(init);
              if (init.type !== "ObjectExpression") continue;

              var _keys = this.getObjectKeys(init);
              if (!_keys) continue;

              var _declars = signatures[_keys] = signatures[_keys] || [];
              _declars.push(_declar2);
            }
          } catch (err) {
            _didIteratorError33 = true;
            _iteratorError33 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion33 && _iterator33.return) {
                _iterator33.return();
              }
            } finally {
              if (_didIteratorError33) {
                throw _iteratorError33;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError26 = true;
        _iteratorError26 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion26 && _iterator26.return) {
            _iterator26.return();
          }
        } finally {
          if (_didIteratorError26) {
            throw _iteratorError26;
          }
        }
      }

      for (var signatureKey in signatures) {
        var declars = signatures[signatureKey];
        if (declars.length < 5) continue;

        var keys = signatureKey.split("|");

        //
        var rootFactoryParams = [];
        var rootFactoryProps = [];
        for (var keyIndex = 0; keyIndex < keys.length; keyIndex++) {
          var _key5 = keys[keyIndex];
          var id = t.identifier("__" + keyIndex);
          rootFactoryParams.push(id);
          var keyNode = t.isValidIdentifier(_key5) ? t.identifier(_key5) : t.stringLiteral(_key5);
          rootFactoryProps.push(t.objectProperty(keyNode, id));
        }

        var rootFactoryId = t.identifier(this.factoryNameGenerator.generate("root"));
        var rootFactoryBody = t.blockStatement([t.returnStatement(t.objectExpression(rootFactoryProps))]);
        var rootFactory = t.functionDeclaration(rootFactoryId, rootFactoryParams, rootFactoryBody);
        body.unshift(rootFactory);

        //
        var _iteratorNormalCompletion27 = true;
        var _didIteratorError27 = false;
        var _iteratorError27 = undefined;

        try {
          for (var _iterator27 = declars[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {
            var declar = _step27.value;

            var args = [];
            var _iteratorNormalCompletion29 = true;
            var _didIteratorError29 = false;
            var _iteratorError29 = undefined;

            try {
              for (var _iterator29 = declar.init.properties[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {
                var prop = _step29.value;

                args.push(prop.value);
              }
            } catch (err) {
              _didIteratorError29 = true;
              _iteratorError29 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion29 && _iterator29.return) {
                  _iterator29.return();
                }
              } finally {
                if (_didIteratorError29) {
                  throw _iteratorError29;
                }
              }
            }

            declar.init = t.callExpression(rootFactoryId, args);
          }

          //
        } catch (err) {
          _didIteratorError27 = true;
          _iteratorError27 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion27 && _iterator27.return) {
              _iterator27.return();
            }
          } finally {
            if (_didIteratorError27) {
              throw _iteratorError27;
            }
          }
        }

        var seen = new Set();
        var _iteratorNormalCompletion28 = true;
        var _didIteratorError28 = false;
        var _iteratorError28 = undefined;

        try {
          var _loop8 = function _loop8() {
            var declar = _step28.value;

            if (seen.has(declar)) return "continue";

            // build up a map containing the arguments that are shared
            var common = new Map();
            var mostSharedArgsLength = 0;
            var _iteratorNormalCompletion30 = true;
            var _didIteratorError30 = false;
            var _iteratorError30 = undefined;

            try {
              for (var _iterator30 = declars[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {
                var declar2 = _step30.value;

                if (seen.has(declar2)) continue;
                if (declar === declar2) continue;

                var _sharedArgs = [];
                for (var _i = 0; _i < keys.length; _i++) {
                  if (isSameNode(declar.init.arguments[_i], declar2.init.arguments[_i])) {
                    _sharedArgs.push(_i);
                  }
                }
                if (!_sharedArgs.length) continue;

                mostSharedArgsLength = Math.max(mostSharedArgsLength, _sharedArgs.length);
                common.set(declar2, _sharedArgs);
              }

              // build up a mapping of the argument positions that are shared so we can pick the top one
            } catch (err) {
              _didIteratorError30 = true;
              _iteratorError30 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion30 && _iterator30.return) {
                  _iterator30.return();
                }
              } finally {
                if (_didIteratorError30) {
                  throw _iteratorError30;
                }
              }
            }

            var sharedPairs = Object.create(null);
            var _iteratorNormalCompletion31 = true;
            var _didIteratorError31 = false;
            var _iteratorError31 = undefined;

            try {
              for (var _iterator31 = common.entries()[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {
                var _step31$value = _slicedToArray(_step31.value, 2),
                    _declar = _step31$value[0],
                    _args = _step31$value[1];

                if (_args.length === mostSharedArgsLength) {
                  _args = _args.join(",");
                  var _pair = sharedPairs[_args] = sharedPairs[_args] || [];
                  _pair.push(_declar);
                }
              }

              // get the highest pair
            } catch (err) {
              _didIteratorError31 = true;
              _iteratorError31 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion31 && _iterator31.return) {
                  _iterator31.return();
                }
              } finally {
                if (_didIteratorError31) {
                  throw _iteratorError31;
                }
              }
            }

            var highestPairArgs = void 0;
            var highestPairCount = void 0;
            for (var pairArgs in sharedPairs) {
              var pair = sharedPairs[pairArgs];
              if (!highestPairArgs || pair.length > highestPairCount) {
                highestPairCount = pair.length;
                highestPairArgs = pairArgs;
              }
            }
            if (!highestPairArgs) return "continue";

            //
            var declarsSub = sharedPairs[highestPairArgs].concat(declar);
            var removeArgs = highestPairArgs.split(",");

            var subFactoryArgs = [];
            var subFactoryParams = [];
            var sharedArgs = declarsSub[0].init.arguments;
            for (var i = 0; i < sharedArgs.length; i++) {
              var arg = sharedArgs[i];
              if (removeArgs.indexOf(i + "") >= 0) {
                subFactoryArgs.push(arg);
              } else {
                var _id = t.identifier("__" + i);
                subFactoryArgs.push(_id);
                subFactoryParams.push(_id);
              }
            }

            var subFactoryId = t.identifier(_this14.factoryNameGenerator.generate("sub"));
            var subFactoryBody = t.blockStatement([t.returnStatement(t.callExpression(rootFactoryId, subFactoryArgs))]);
            var subFactory = t.functionDeclaration(subFactoryId, subFactoryParams, subFactoryBody);
            body.unshift(subFactory);

            var _iteratorNormalCompletion32 = true;
            var _didIteratorError32 = false;
            var _iteratorError32 = undefined;

            try {
              for (var _iterator32 = declarsSub[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {
                var declarSub = _step32.value;

                seen.add(declarSub);

                var call = declarSub.init;
                call.callee = subFactoryId;
                call.arguments = call.arguments.filter(function (val, i) {
                  return removeArgs.indexOf(i + "") < 0;
                });
              }
            } catch (err) {
              _didIteratorError32 = true;
              _iteratorError32 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion32 && _iterator32.return) {
                  _iterator32.return();
                }
              } finally {
                if (_didIteratorError32) {
                  throw _iteratorError32;
                }
              }
            }
          };

          for (var _iterator28 = declars[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {
            var _ret8 = _loop8();

            if (_ret8 === "continue") continue;
          }
        } catch (err) {
          _didIteratorError28 = true;
          _iteratorError28 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion28 && _iterator28.return) {
              _iterator28.return();
            }
          } finally {
            if (_didIteratorError28) {
              throw _iteratorError28;
            }
          }
        }
      }
    }
  }, {
    key: "init",
    value: function init(filename, code) {
      var map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
      var sourceMaps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var onError = arguments[4];

      // Phase 1: Let's interpret.
      this.execute(filename, code, map, onError);
      if (this.logger.hasErrors()) return undefined;
      this.modules.resolveInitializedModules();
      if (this.options.initializeMoreModules) {
        this.modules.initializeMoreModules();
        if (this.logger.hasErrors()) return undefined;
      }

      // Phase 2: Let's serialize the heap and generate code.
      // Serialize for the first time in order to gather reference counts
      if (!this.options.singlePass) {
        this.collectValToRefCountOnly = true;
        this.valToRefCount = new Map();
        this.serialize(filename, code, sourceMaps);
        if (this.logger.hasErrors()) return undefined;
      }
      // Serialize for a second time, using reference counts to minimize number of generated identifiers
      this._resetSerializeStates();
      this.collectValToRefCountOnly = false;
      var serialized = this.serialize(filename, code, sourceMaps);
      (0, _invariant2.default)(!this.logger.hasErrors());
      if (this.options.logStatistics) this.statistics.log();
      return serialized.generated;
    }
  }]);

  return Serializer;
}();
//# sourceMappingURL=serializer.js.map