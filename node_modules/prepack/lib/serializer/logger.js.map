{"version":3,"sources":["../../src/serializer/logger.js"],"names":["Logger","realm","internalDebug","_hasErrors","f","onCompletion","logCompletion","context","env","$GlobalEnv","lexicalEnvironment","variableEnvironment","pushContext","result","effects","partially_evaluate","e","Function","intrinsics","undefined","popContext","res","value","console","error","constructor","name","tryQuery","Error","object","err","stack","message","nativeStack","properties","get","descriptor","$ErrorData","contextStack","loc","expressionLocation","locString","start","line","column","source"],"mappings":";;;;;;;qjBAAA;;;;;;;;;AAWA;;AACA;;AACA;;AACA;;AACA;;;;;;;;IAEaA,M,WAAAA,M;AACX,kBAAYC,KAAZ,EAA0BC,aAA1B,EAAkD;AAAA;;AAChD,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKE,UAAL,GAAkB,KAAlB;AACA,SAAKD,aAAL,GAAqBA,aAArB;AACD;;;;;;AAMD;6BACYE,C,EAAYC,Y,EAAqCC,a,EAA2B;AAAA;;AACtF,UAAIC,UAAU,6BAAd;AACA,UAAIN,QAAQ,KAAKA,KAAjB;AACA,UAAIO,MAAMP,MAAMQ,UAAhB;AACAF,cAAQG,kBAAR,GAA6BF,GAA7B;AACAD,cAAQI,mBAAR,GAA8BH,GAA9B;AACAD,cAAQN,KAAR,GAAgBA,KAAhB;AACAA,YAAMW,WAAN,CAAkBL,OAAlB;AACA;AACA,UAAI;AACF,YAAIM,eAAJ;AACA,YAAIC,UAAUb,MAAMc,kBAAN,CAAyB,YAAM;AAC3C,cAAI;AACFF,qBAAST,GAAT;AACD,WAFD,CAEE,OAAOY,CAAP,EAAU;AACV,gBAAIA,oCAAJ,EAA6B;AAC3B,kBAAIV,aAAJ,EAAmB,MAAKA,aAAL,CAAmBU,CAAnB;AACnBH,uBAASR,wBAAwBY,QAAxB,GAAmCZ,aAAaW,CAAb,CAAnC,GAAqDX,YAA9D;AACD,aAHD,MAGO;AACL,oBAAMW,CAAN;AACD;AACF;AACD,iBAAOf,MAAMiB,UAAN,CAAiBC,SAAxB;AACD,SAZa,CAAd;AAaA,iCAAUL,QAAQ,CAAR,MAAeb,MAAMiB,UAAN,CAAiBC,SAA1C;AACA,eAASN,MAAT;AACD,OAjBD,SAiBU;AACRZ,cAAMmB,UAAN,CAAiBb,OAAjB;AACD;AACF;;;kCAEac,G,EAAiB;AAC7B,UAAIpB,QAAQ,KAAKA,KAAjB;AACA,UAAIqB,QAAQD,IAAIC,KAAhB;AACA,UAAI,KAAKpB,aAAT,EAAwBqB,QAAQC,KAAR,UAAqBH,IAAII,WAAJ,CAAgBC,IAArC;AACxB,UAAI,KAAKC,QAAL,CAAc;AAAA,eAAML,wCAAgC,+BAAmBrB,KAAnB,EAA0BqB,KAA1B,EAAiCrB,MAAMiB,UAAN,CAAiBU,KAAlD,CAAtC;AAAA,OAAd,EAA8G,KAA9G,EAAqH,KAArH,CAAJ,EAAiI;AAC/H,YAAIC,SAAWP,KAAf;AACA,YAAI;AACF,cAAIQ,MAAM,IAAIF,KAAJ,CAAU,KAAKD,QAAL,CAAc;AAAA,mBAAM,4BAAgB1B,KAAhB,EAAuB,gBAAIA,KAAJ,EAAW4B,MAAX,EAAmB,SAAnB,CAAvB,CAAN;AAAA,WAAd,EAA2E,mBAA3E,EAAgG,KAAhG,CAAV,CAAV;AACAC,cAAIC,KAAJ,GAAY,KAAKJ,QAAL,CAAc;AAAA,mBAAM,4BAAgB1B,KAAhB,EAAuB,gBAAIA,KAAJ,EAAW4B,MAAX,EAAmB,OAAnB,CAAvB,CAAN;AAAA,WAAd,EAAyE,iBAAzE,EAA4F,KAA5F,CAAZ;AACAN,kBAAQC,KAAR,CAAcM,IAAIE,OAAlB;AACAT,kBAAQC,KAAR,CAAcM,IAAIC,KAAlB;AACA,cAAI,KAAK7B,aAAL,IAAsBmB,2CAA1B,EAA0DE,QAAQC,KAAR,CAAcH,IAAIY,WAAlB;AAC3D,SAND,CAME,OAAOH,GAAP,EAAY;AACZ,cAAIE,UAAUH,OAAOK,UAAP,CAAkBC,GAAlB,CAAsB,SAAtB,CAAd;AACAZ,kBAAQC,KAAR,CAAeQ,WAAWA,QAAQI,UAAnB,IAAiCJ,QAAQI,UAAR,CAAmBd,KAAnB,+BAAlC,GAAqFU,QAAQI,UAAR,CAAmBd,KAAnB,CAAyBA,KAA9G,GAAsH,wBAApI;AACAC,kBAAQC,KAAR,CAAcM,IAAIC,KAAlB;AACA,cAAIF,OAAOQ,UAAX,EAAuB;AACrBd,oBAAQC,KAAR,CAAcK,OAAOQ,UAAP,CAAkBC,YAAhC;AACD;AACF;AACF,OAhBD,MAgBO;AACL,YAAI;AACFhB,kBAAQ,4BAAgBrB,KAAhB,EAAuBqB,KAAvB,CAAR;AACD,SAFD,CAEE,OAAOQ,GAAP,EAAY;AACZR,kBAAQQ,IAAIE,OAAZ;AACD;AACDT,gBAAQC,KAAR,CAAcF,KAAd;AACA,YAAI,KAAKpB,aAAL,IAAsBmB,2CAA1B,EAA0DE,QAAQC,KAAR,CAAcH,IAAIY,WAAlB;AAC3D;AACD,WAAK9B,UAAL,GAAkB,IAAlB;AACD;;;6BAEQmB,K,EAAcU,O,EAAiB;AACtC,UAAIO,MAAMjB,MAAMkB,kBAAhB;AACA,UAAID,GAAJ,EAAS;AACP,YAAIE,YAAeF,IAAIG,KAAJ,CAAUC,IAAzB,UAAiCJ,IAAIG,KAAJ,CAAUE,MAAV,GAAmB,CAApD,CAAJ;AACA,YAAIL,IAAIM,MAAR,EAAgBJ,YAAeF,IAAIM,MAAnB,SAA6BJ,SAA7B;AAChBT,kBAAaA,OAAb,cAA6BS,SAA7B;AACD;;AAEDlB,cAAQC,KAAR,CAAcQ,OAAd;AACA,WAAK7B,UAAL,GAAkB,IAAlB;AACD;;;gCAEW;AACV,aAAO,KAAKA,UAAZ;AACD","file":"logger.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm, ExecutionContext } from \"../realm.js\";\nimport { ToStringPartial, Get, InstanceofOperator } from \"../methods/index.js\";\nimport { Completion, ThrowCompletion } from \"../completions.js\";\nimport { ObjectValue, StringValue, Value } from \"../values/index.js\";\nimport invariant from \"../invariant.js\";\n\nexport class Logger {\n  constructor(realm: Realm, internalDebug: boolean) {\n    this.realm = realm;\n    this._hasErrors = false;\n    this.internalDebug = internalDebug;\n  }\n\n  realm: Realm;\n  _hasErrors: boolean;\n  internalDebug: boolean;\n\n  // Wraps a query that might potentially execute user code.\n  tryQuery<T>(f: () => T, onCompletion: T | (Completion => T), logCompletion: boolean): T {\n    let context = new ExecutionContext();\n    let realm = this.realm;\n    let env = realm.$GlobalEnv;\n    context.lexicalEnvironment = env;\n    context.variableEnvironment = env;\n    context.realm = realm;\n    realm.pushContext(context);\n    // We use partial evaluation so that we can throw away any state mutations\n    try {\n      let result;\n      let effects = realm.partially_evaluate(() => {\n        try {\n          result = f();\n        } catch (e) {\n          if (e instanceof Completion) {\n            if (logCompletion) this.logCompletion(e);\n            result = onCompletion instanceof Function ? onCompletion(e) : onCompletion;\n          } else {\n            throw e;\n          }\n        }\n        return realm.intrinsics.undefined;\n      });\n      invariant(effects[0] === realm.intrinsics.undefined);\n      return ((result: any): T);\n    } finally {\n      realm.popContext(context);\n    }\n  }\n\n  logCompletion(res: Completion) {\n    let realm = this.realm;\n    let value = res.value;\n    if (this.internalDebug) console.error(`=== ${res.constructor.name} ===`);\n    if (this.tryQuery(() => value instanceof ObjectValue && InstanceofOperator(realm, value, realm.intrinsics.Error), false, false)) {\n      let object = ((value: any): ObjectValue);\n      try {\n        let err = new Error(this.tryQuery(() => ToStringPartial(realm, Get(realm, object, \"message\")), \"(unknown message)\", false));\n        err.stack = this.tryQuery(() => ToStringPartial(realm, Get(realm, object, \"stack\")), \"(unknown stack)\", false);\n        console.error(err.message);\n        console.error(err.stack);\n        if (this.internalDebug && res instanceof ThrowCompletion) console.error(res.nativeStack);\n      } catch (err) {\n        let message = object.properties.get(\"message\");\n        console.error((message && message.descriptor && message.descriptor.value instanceof StringValue) ? message.descriptor.value.value : \"(no message available)\");\n        console.error(err.stack);\n        if (object.$ErrorData) {\n          console.error(object.$ErrorData.contextStack);\n        }\n      }\n    } else {\n      try {\n        value = ToStringPartial(realm, value);\n      } catch (err) {\n        value = err.message;\n      }\n      console.error(value);\n      if (this.internalDebug && res instanceof ThrowCompletion) console.error(res.nativeStack);\n    }\n    this._hasErrors = true;\n  }\n\n  logError(value: Value, message: string) {\n    let loc = value.expressionLocation;\n    if (loc) {\n      let locString = `${loc.start.line}:${loc.start.column + 1}`;\n      if (loc.source) locString = `${loc.source}:${locString}`;\n      message = `${message}\\nat: ${locString}`;\n    }\n\n    console.error(message);\n    this._hasErrors = true;\n  }\n\n  hasErrors() {\n    return this._hasErrors;\n  }\n}\n"]}