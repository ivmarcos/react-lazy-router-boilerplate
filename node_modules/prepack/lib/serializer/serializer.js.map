{"version":3,"sources":["../../src/serializer/serializer.js"],"names":["t","isSameNode","left","right","type","name","value","Serializer","realm","serializerOptions","isPartial","generator","logger","internalDebug","modules","logModules","delayUnsupportedRequires","trace","tracers","push","realmGenerator","realmPreludeGenerator","preludeGenerator","options","_resetSerializeStates","declarativeEnvironmentRecordsBindings","Map","serializationStack","delayedSerializations","delayedKeyedSerializations","globalReasons","prelude","body","unstrictFunctionBodies","strictFunctionBodies","functions","functionInstances","refs","declaredDerivedIds","Set","descriptors","needsEmptyVar","valueNameGenerator","createNameGenerator","referentializedNameGenerator","descriptorNameGenerator","factoryNameGenerator","requireReturns","statistics","firstFunctionUsages","functionPrototypes","length","filename","code","map","onError","res","$GlobalEnv","execute","ast","nameGenerator","forbiddenNames","context","pushContext","logCompletion","popContext","val","hasIdentifier","derivedIds","has","getIdentifier","isIntrinsic","key","desc","writable","enumerable","configurable","undefined","logError","hasDefaultLength","$Strict","$FunctionKind","originalConstructor","obj","reasons","alternateProperties","propertyBinding","descriptor","_canIgnoreProperty","_eagerOrDelay","_getDescriptorValues","concat","_emitProperty","properties","unknownProperty","_getNestedAbstractValues","_emitPropertiesWithComputedNames","addObjectPrototype","addConstructorPrototype","objects","objectProperties","size","proto","$Prototype","kind","getKind","intrinsics","serializedProto","serializeValue","uid","_getValIdForReference","isCompatibleWith","MOBILE_JSC_VERSION","expressionStatement","callExpression","memoizeReference","assignmentExpression","memberExpression","identifier","func","prototype","_getPropertyValue","_isDefaultPrototype","absVal","values","args","cond","P","V","W","consequent","alternate","earlier_props","serializedP","serializedV","serializedCond","saved_body","consequent_body","blockStatement","alternate_body","ifStatement","_canEmbedProperty","descValue","mightHaveBeenDeleted","serializeFunc","_assignProperty","serializedKey","getAsPropertyNameExpression","isIdentifier","_shouldDelayValues","_delay","descProps","boolKeys","valKeys","get","set","descriptorsKey","boolKey","b","objectProperty","booleanLiteral","toString","descKey","join","descriptorId","generate","declar","variableDeclaration","variableDeclarator","objectExpression","r","n","functionName","serializedBindings","Object","create","serializedBinding","binding","bindings","deletable","initialized","serializedValue","mightBeObject","_incrementValToRefCount","id","_getValIdForReferenceOptional","collectValToRefCountOnly","refCount","valToRefCount","referenceOnly","bindingType","ref","shouldInline","_serializeValue","__originalName","init","result","singlePass","valueIds","delete","valueIdsElided","pop","serializer","shift","intrinsicName","convertStringToMember","reason","a","delayReason","_shouldDelayValue","$BoundTargetFunction","$BoundThis","$BoundArguments","arg","_getBodyReference","$ProxyTarget","$ProxyHandler","$DateValue","indexOf","locationFn","valueFn","assignment","condition","binaryExpression","empty","elems","remainingProperties","lenProperty","len","i","elem","elemVal","numericLiteral","addProperties","arrayExpression","entries","$MapData","$WeakMapData","entry","$Key","$Value","arrayValue","newExpression","$SetData","$WeakSetData","$ArrayLength","$Get","prototypeBinding","prototypeDesc","symbols","ObjectPrototype","getExtensible","foundConstructor","keys","boundArg","Error","constructor","formalParameters","$FormalParameters","$ECMAScriptCode","functionInfo","names","modified","instances","usesArguments","usesThis","state","tryQuery","bind","file","program","functionExpression","isResidual","loc","instance","functionValue","delayed","undelay","insertionPoint","innerName","referencedValues","serializeBindingFunc","doesNotMatter","reference","$Environment","_serializeGlobalBinding","referencedBase","base","referencedName","_serializeDeclarativeEnvironmentRecordBinding","prop","prototypeId","source","$OriginalSource","flags","$OriginalFlags","stringLiteral","numberData","$NumberData","stringData","$StringData","booleanData","$BooleanData","dateValue","serializedDateValue","_serializeValueTypedArray","_serializeValueMap","_serializeValueSet","$ParameterMap","props","propValue","$Description","serializedArgs","abstractArg","buildNode","_serializeAbstractValue","_serializeValueIntrinsic","valueToNode","serialize","_serializeValueArray","_serializeValueProxy","_serializeValueFunction","_serializeValueSymbol","_serializeValueObject","getGlobalLetBinding","referentialized","globalReference","functionBodies","getFunctionBody","requireStatistics","replaced","count","functionEntries","Array","from","serializedBindingId","hoistedBody","funcBody","params","start","end","bodySize","anySerializedBindingModified","define","funcNode","functionClones","funcParams","slice","functionDeclaration","cloneDeep","isRequire","getIsRequire","suffix","factoryId","factoryNames","sameSerializedBindings","isDifferent","lastBinding","factoryParams","factoryNode","flatArgs","node","firstUsage","isNotEarlierThan","callArgs","thisExpression","flatArg","param","callee","childBody","returnStatement","nullLiteral","reverse","functionBody","splice","apply","index","console","log","initializedModules","moduleIds","bodies","startBody","endBody","announceDeclaredDerivedId","add","_getContext","item","_shouldBeWrapped","sourceMaps","_emitGenerator","moduleId","moduleValue","_spliceFunctions","strictDirective","directive","directiveLiteral","globalDirectives","funcLoop","directives","unshift","factorifyObjects","ast_body","declaredGlobals","generated","sourceFileName","computed","signatures","declarations","getObjectKeys","declars","signatureKey","split","rootFactoryParams","rootFactoryProps","keyIndex","keyNode","isValidIdentifier","rootFactoryId","rootFactoryBody","rootFactory","seen","common","mostSharedArgsLength","declar2","sharedArgs","arguments","Math","max","sharedPairs","pair","highestPairArgs","highestPairCount","pairArgs","declarsSub","removeArgs","subFactoryArgs","subFactoryParams","subFactoryId","subFactoryBody","subFactory","declarSub","call","filter","hasErrors","resolveInitializedModules","initializeMoreModules","serialized","logStatistics"],"mappings":"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","file":"serializer.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { GlobalEnvironmentRecord, DeclarativeEnvironmentRecord } from \"../environment.js\";\nimport { Realm, ExecutionContext } from \"../realm.js\";\nimport type { Descriptor, PropertyBinding } from \"../types.js\";\nimport { IsUnresolvableReference, ResolveBinding, ToLength, IsArray, Get } from \"../methods/index.js\";\nimport { Completion } from \"../completions.js\";\nimport { BoundFunctionValue, ProxyValue, SymbolValue, AbstractValue, EmptyValue, FunctionValue, Value, ObjectValue, PrimitiveValue, NativeFunctionValue, UndefinedValue } from \"../values/index.js\";\nimport { describeLocation } from \"../intrinsics/ecma262/Error.js\";\nimport * as t from \"babel-types\";\nimport type { BabelNodeExpression, BabelNodeStatement, BabelNodeIdentifier, BabelNodeBlockStatement, BabelNodeObjectExpression, BabelNodeStringLiteral, BabelNodeLVal, BabelNodeSpreadElement, BabelVariableKind, BabelNodeFunctionDeclaration } from \"babel-types\";\nimport { Generator, PreludeGenerator, NameGenerator } from \"../utils/generator.js\";\nimport type { SerializationContext } from \"../utils/generator.js\";\nimport generate from \"babel-generator\";\n// import { transform } from \"babel-core\";\nimport traverse from \"babel-traverse\";\nimport invariant from \"../invariant.js\";\nimport type { SerializedBinding, SerializedBindings, FunctionInfo, FunctionInstance, SerializerOptions } from \"./types.js\";\nimport { BodyReference, AreSameSerializedBindings, SerializerStatistics } from \"./types.js\";\nimport { ClosureRefVisitor, ClosureRefReplacer, IdentifierCollector } from \"./visitors.js\";\nimport { Logger } from \"./logger.js\";\nimport { Modules } from \"./modules.js\";\nimport { LoggingTracer } from \"./LoggingTracer.js\";\n\ntype SourceMap = {\n  sources: Array<string>,\n  names: Array<string>,\n  mappings: string,\n  sourcesContent: Array<string>\n};\n\nfunction isSameNode(left, right) {\n  let type = left.type;\n\n  if (type !== right.type) {\n    return false;\n  }\n\n  if (type === \"Identifier\") {\n    return left.name === right.name;\n  }\n\n  if (type === \"NullLiteral\") {\n    return true;\n  }\n\n  if (type === \"BooleanLiteral\" || type === \"StringLiteral\" || type === \"NumericLiteral\") {\n    return left.value === right.value;\n  }\n\n  return false;\n}\n\nexport class Serializer {\n  constructor(realm: Realm, serializerOptions: SerializerOptions = {}) {\n    invariant(realm.isPartial);\n    // Start tracking mutations\n    realm.generator = new Generator(realm);\n\n    this.realm = realm;\n    this.logger = new Logger(this.realm, !!serializerOptions.internalDebug);\n    this.modules = new Modules(this.realm, this.logger, !!serializerOptions.logModules, !!serializerOptions.delayUnsupportedRequires);\n    if (serializerOptions.trace) this.realm.tracers.push(new LoggingTracer(this.realm));\n\n    let realmGenerator = this.realm.generator;\n    invariant(realmGenerator);\n    this.generator = realmGenerator;\n    let realmPreludeGenerator = this.realm.preludeGenerator;\n    invariant(realmPreludeGenerator);\n    this.preludeGenerator = realmPreludeGenerator;\n\n    this.options = serializerOptions;\n    this._resetSerializeStates();\n  }\n\n  _resetSerializeStates() {\n    this.declarativeEnvironmentRecordsBindings = new Map();\n    this.serializationStack = [];\n    this.delayedSerializations = [];\n    this.delayedKeyedSerializations = new Map();\n    this.globalReasons = {};\n    this.prelude = [];\n    this.body = [];\n\n    this.unstrictFunctionBodies = [];\n    this.strictFunctionBodies = [];\n\n    this.functions = new Map();\n    this.functionInstances = [];\n    this.refs = new Map();\n    this.declaredDerivedIds = new Set();\n    this.descriptors = new Map();\n    this.needsEmptyVar = false;\n    this.valueNameGenerator = this.preludeGenerator.createNameGenerator(\"_\");\n    this.referentializedNameGenerator = this.preludeGenerator.createNameGenerator(\"$\");\n    this.descriptorNameGenerator = this.preludeGenerator.createNameGenerator(\"$$\");\n    this.factoryNameGenerator = this.preludeGenerator.createNameGenerator(\"$_\");\n    this.requireReturns = new Map();\n    this.statistics = new SerializerStatistics();\n    this.firstFunctionUsages = new Map();\n    this.functionPrototypes = new Map();\n  }\n\n  globalReasons: {\n    [filename: string]: Array<string>\n  };\n\n  declarativeEnvironmentRecordsBindings: Map<DeclarativeEnvironmentRecord, SerializedBindings>;\n  serializationStack: Array<Value>;\n  delayedSerializations: Array<() => void>;\n  delayedKeyedSerializations: Map<BabelNodeIdentifier, Array<{values: Array<Value>, func: () => void}>>;\n  unstrictFunctionBodies: Array<BabelNodeFunctionDeclaration>;\n  strictFunctionBodies: Array<BabelNodeFunctionDeclaration>;\n  functions: Map<BabelNodeBlockStatement, FunctionInfo>;\n  functionInstances: Array<FunctionInstance>;\n  //value to intermediate references generated like $0, $1, $2,...\n  refs: Map<Value, BabelNodeIdentifier>;\n  collectValToRefCountOnly: boolean;\n  valToRefCount: Map<Value, number>;\n  prelude: Array<BabelNodeStatement>;\n  body: Array<BabelNodeStatement>;\n  realm: Realm;\n  declaredDerivedIds: Set<BabelNodeIdentifier>;\n  preludeGenerator: PreludeGenerator;\n  generator: Generator;\n  descriptors: Map<string, BabelNodeIdentifier>;\n  needsEmptyVar: boolean;\n  valueNameGenerator: NameGenerator;\n  referentializedNameGenerator: NameGenerator;\n  descriptorNameGenerator: NameGenerator;\n  factoryNameGenerator: NameGenerator;\n  logger: Logger;\n  modules: Modules;\n  requireReturns: Map<number | string, BabelNodeExpression>;\n  options: SerializerOptions;\n  statistics: SerializerStatistics;\n  firstFunctionUsages: Map<FunctionValue, BodyReference>;\n  functionPrototypes: Map<FunctionValue, BabelNodeIdentifier>;\n\n  _getBodyReference() {\n    return new BodyReference(this.body, this.body.length);\n  }\n\n  execute(filename: string, code: string, map: string,\n      onError: void | ((Realm, Value) => void)) {\n    let realm = this.realm;\n    let res = realm.$GlobalEnv.execute(code, filename, map, \"script\", ast =>\n      traverse(ast, IdentifierCollector, null, this.preludeGenerator.nameGenerator.forbiddenNames));\n\n    if (res instanceof Completion) {\n      let context = new ExecutionContext();\n      realm.pushContext(context);\n      try {\n        if (onError) {\n          onError(realm, res.value);\n        }\n        this.logger.logCompletion(res);\n      } finally {\n        realm.popContext(context);\n      }\n    }\n\n    return res;\n  }\n\n  shouldInline(val: Value): boolean {\n    if (val instanceof SymbolValue) {\n      return false;\n    }\n\n    if (val instanceof AbstractValue && val.hasIdentifier()) {\n      invariant(!this.preludeGenerator.derivedIds.has(val.getIdentifier().name) ||\n        this.declaredDerivedIds.has(val.getIdentifier()));\n      return true;\n    }\n\n    if (val.isIntrinsic()) {\n      return false;\n    }\n\n    return val instanceof PrimitiveValue;\n  }\n\n  _canIgnoreProperty(val: ObjectValue, key: string, desc: Descriptor) {\n    if (IsArray(this.realm, val)) {\n      if (key === \"length\" && desc.writable && !desc.enumerable && !desc.configurable) {\n        // length property has the correct descriptor values\n        return true;\n      }\n    } else if (val instanceof FunctionValue) {\n      if (key === \"length\") {\n        if (desc.value === undefined) {\n          this.logger.logError(val, \"Functions with length accessor properties are not supported.\");\n          // Rationale: .bind() would call the accessor, which might throw, mutate state, or do whatever...\n        }\n        // length property will be inferred already by the amount of parameters\n        return !desc.writable && !desc.enumerable && desc.configurable && val.hasDefaultLength();\n      }\n\n      if (key === \"name\") {\n        // TODO #474: Make sure that we retain original function names. Or set name property. Or ensure that nothing references the name property.\n        return true;\n      }\n\n      // Properties `caller` and `arguments` are added to normal functions in non-strict mode to prevent TypeErrors.\n      // Because they are autogenerated, they should be ignored.\n      if (key === \"arguments\" || key === \"caller\") {\n        if (!val.$Strict && desc.writable && !desc.enumerable && desc.configurable && desc.value instanceof UndefinedValue && val.$FunctionKind === 'normal')\n          return true;\n      }\n\n      // ignore the `prototype` property when it's the right one\n      if (key === \"prototype\") {\n        if (!desc.configurable && !desc.enumerable && desc.writable &&\n            desc.value instanceof ObjectValue && desc.value.originalConstructor === val) {\n          return true;\n        }\n      }\n    }\n\n    if (key === \"constructor\") {\n      if (desc.configurable && !desc.enumerable && desc.writable && desc.value === val.originalConstructor) return true;\n    }\n\n    return false;\n  }\n\n  addProperties(name: string, obj: ObjectValue, reasons: Array<string>, alternateProperties: ?Map<string, PropertyBinding>) {\n    /*\n    for (let symbol of obj.symbols.keys()) {\n      // TODO #22: serialize symbols\n    }\n    */\n\n    // inject properties\n    for (let [key, propertyBinding] of alternateProperties || obj.properties) {\n      invariant(propertyBinding);\n      let desc = propertyBinding.descriptor;\n      if (desc === undefined) continue; //deleted\n      if (this._canIgnoreProperty(obj, key, desc)) continue;\n      invariant(desc !== undefined);\n      this._eagerOrDelay(this._getDescriptorValues(desc).concat(obj), () => {\n        invariant(desc !== undefined);\n        return this._emitProperty(name, obj, key, desc, reasons);\n      });\n    }\n\n    // inject properties with computed names\n    if (obj.unknownProperty !== undefined) {\n      let desc = obj.unknownProperty.descriptor;\n      if (desc !== undefined) {\n        let val = desc.value;\n        invariant(val instanceof AbstractValue);\n        this._eagerOrDelay(this._getNestedAbstractValues(val, [obj]), () => {\n          invariant(val instanceof AbstractValue);\n          this._emitPropertiesWithComputedNames(obj, val, reasons);\n        });\n      }\n    }\n\n    // prototype\n    this.addObjectPrototype(name, obj, reasons);\n    if (obj instanceof FunctionValue) this.addConstructorPrototype(name, obj, reasons);\n\n    this.statistics.objects++;\n    this.statistics.objectProperties += obj.properties.size;\n  }\n\n  addObjectPrototype(name: string, obj: ObjectValue, reasons: Array<string>) {\n    let proto = obj.$Prototype;\n\n    let kind = obj.getKind();\n    if (proto === this.realm.intrinsics[kind + \"Prototype\"]) return;\n\n    this._eagerOrDelay([proto, obj], () => {\n      invariant(proto);\n      let serializedProto = this.serializeValue(proto, reasons.concat(`Referred to as the prototype for ${name}`));\n      let uid = this._getValIdForReference(obj);\n      if (!this.realm.isCompatibleWith(this.realm.MOBILE_JSC_VERSION))\n        this.body.push(t.expressionStatement(t.callExpression(\n          this.preludeGenerator.memoizeReference(\"Object.setPrototypeOf\"),\n          [uid, serializedProto]\n        )));\n      else {\n        this.body.push(t.expressionStatement(t.assignmentExpression(\n          \"=\",\n          t.memberExpression(uid, t.identifier(\"__proto__\")),\n          serializedProto\n        )));\n      }\n    });\n  }\n\n  addConstructorPrototype(name: string, func: FunctionValue, reasons: Array<string>) {\n    // If the original prototype object was mutated,\n    // request its serialization here as this might be observable by\n    // residual code.\n    let prototype = this._getPropertyValue(func, \"prototype\");\n    if (prototype instanceof ObjectValue &&\n      prototype.originalConstructor === func &&\n      !this._isDefaultPrototype(prototype)) {\n      this._eagerOrDelay([func], () => {\n        invariant(prototype);\n        this.serializeValue(prototype, reasons.concat(`Prototype of ${name}`));\n      });\n    }\n  }\n\n  _getNestedAbstractValues(absVal: AbstractValue, values: Array<Value>): Array<Value> {\n    invariant(absVal.args.length === 3);\n    let cond = absVal.args[0];\n    invariant(cond instanceof AbstractValue);\n    if (cond.kind === \"template for property name condition\") {\n      let P = cond.args[0]; values.push(P);\n      let V = absVal.args[1]; values.push(V);\n      let W = absVal.args[2];\n      if (W instanceof AbstractValue)\n        this._getNestedAbstractValues(W, values);\n      else\n        values.push(W);\n    } else {\n      // conditional assignment\n      values.push(cond);\n      let consequent = absVal.args[1]; invariant(consequent instanceof AbstractValue);\n      let alternate = absVal.args[2]; invariant(alternate instanceof AbstractValue);\n      this._getNestedAbstractValues(consequent, values);\n      this._getNestedAbstractValues(alternate, values);\n    }\n    return values;\n  }\n\n  _emitPropertiesWithComputedNames(obj: ObjectValue, absVal: AbstractValue, reasons: Array<string>) {\n    invariant(absVal.args.length === 3);\n    let cond = absVal.args[0];\n    invariant(cond instanceof AbstractValue);\n    if (cond.kind === \"template for property name condition\") {\n      let P = cond.args[0]; invariant(P instanceof AbstractValue);\n      let V = absVal.args[1];\n      let earlier_props = absVal.args[2];\n      if (earlier_props instanceof AbstractValue)\n        this._emitPropertiesWithComputedNames(obj, earlier_props, reasons);\n      let uid = this._getValIdForReference(obj);\n      let serializedP = this.serializeValue(P, reasons.concat(\"Computed property name\"));\n      let serializedV = this.serializeValue(V, reasons.concat(\"Computed property value\"));\n      this.body.push(t.expressionStatement(t.assignmentExpression(\n        \"=\",\n        t.memberExpression(uid, serializedP, true),\n        serializedV\n      )));\n    } else {\n      // conditional assignment\n      let serializedCond = this.serializeValue(cond, reasons.concat(\"joined computed property condition\"));\n      let consequent = absVal.args[1]; invariant(consequent instanceof AbstractValue);\n      let alternate = absVal.args[2]; invariant(alternate instanceof AbstractValue);\n      let saved_body = this.body;\n      this.body = [];\n      this._emitPropertiesWithComputedNames(obj, consequent, reasons);\n      let consequent_body = t.blockStatement(this.body);\n      this.body = [];\n      this._emitPropertiesWithComputedNames(obj, alternate, reasons);\n      let alternate_body = t.blockStatement(this.body);\n      this.body = saved_body;\n      this.body.push(t.ifStatement(serializedCond, consequent_body, alternate_body));\n    }\n  }\n\n  _emitProperty(name: string, val: ObjectValue, key: string, desc: Descriptor, reasons: Array<string>): void {\n    if (this._canEmbedProperty(val, key, desc)) {\n      let descValue = desc.value;\n      invariant(descValue instanceof Value);\n      let mightHaveBeenDeleted = descValue.mightHaveBeenDeleted();\n      let serializeFunc = () => {\n        this._assignProperty(\n          () => {\n            let serializedKey = this.generator.getAsPropertyNameExpression(key);\n            return t.memberExpression(this._getValIdForReference(val), serializedKey, !t.isIdentifier(serializedKey));\n          },\n          () => {\n            invariant(descValue instanceof Value);\n            return this.serializeValue(\n              descValue,\n              reasons.concat(`Referred to in the object ${name} for the key ${key}`));\n          },\n          mightHaveBeenDeleted);\n      };\n      invariant(!this._shouldDelayValues([descValue, val]), \"precondition of _emitProperty\");\n      if (mightHaveBeenDeleted) {\n        this._delay(true, [], serializeFunc);\n      } else {\n        serializeFunc();\n      }\n    } else {\n      let descProps = [];\n\n      let boolKeys = [\"enumerable\", \"configurable\"];\n      let valKeys = [];\n\n      if (!desc.get && !desc.set) {\n        boolKeys.push(\"writable\");\n        valKeys.push(\"value\");\n      } else {\n        valKeys.push(\"set\", \"get\");\n      }\n\n      let descriptorsKey = [];\n      for (let boolKey of boolKeys) {\n        if (boolKey in desc) {\n          let b = desc[boolKey];\n          invariant(b !== undefined);\n          descProps.push(t.objectProperty(t.identifier(boolKey), t.booleanLiteral(b)));\n          descriptorsKey.push(`${boolKey}:${b.toString()}`);\n        }\n      }\n\n      for (let descKey of valKeys) {\n        if (descKey in desc) descriptorsKey.push(descKey);\n      }\n\n      descriptorsKey = descriptorsKey.join(\",\");\n      let descriptorId = this.descriptors.get(descriptorsKey);\n      if (descriptorId === undefined) {\n        descriptorId = t.identifier(this.descriptorNameGenerator.generate(descriptorsKey));\n        let declar = t.variableDeclaration(\"var\", [\n          t.variableDeclarator(descriptorId, t.objectExpression(descProps))]);\n        this.body.push(declar);\n        this.descriptors.set(descriptorsKey, descriptorId);\n      }\n      invariant(descriptorId !== undefined);\n\n      for (let descKey of valKeys) {\n        if (descKey in desc) {\n          let descValue = desc[descKey] || this.realm.intrinsics.undefined;\n          invariant(descValue instanceof Value);\n          invariant(!this._shouldDelayValues([descValue]), \"precondition of _emitProperty\");\n          this.body.push(t.expressionStatement(t.assignmentExpression(\n            \"=\",\n            t.memberExpression(descriptorId, t.identifier(descKey)),\n            this.serializeValue(\n              descValue,\n              reasons.concat(`Referred to in the object ${name} for the key ${((key: any): BabelNodeIdentifier).name || ((key: any): BabelNodeStringLiteral).value} in the descriptor property ${descKey}`)\n            )\n          )));\n        }\n      }\n\n      let serializedKey = this.generator.getAsPropertyNameExpression(key, /*canBeIdentifier*/false);\n      invariant(!this._shouldDelayValues([val]), \"precondition of _emitProperty\");\n      let uid = this._getValIdForReference(val);\n      this.body.push(t.expressionStatement(t.callExpression(\n        this.preludeGenerator.memoizeReference(\"Object.defineProperty\"),\n        [uid, serializedKey, descriptorId]\n      )));\n    }\n  }\n\n  _serializeDeclarativeEnvironmentRecordBinding(r: DeclarativeEnvironmentRecord, n: string, functionName: string, reasons: Array<string>): SerializedBinding {\n    let serializedBindings = this.declarativeEnvironmentRecordsBindings.get(r);\n    if (!serializedBindings) {\n      serializedBindings = Object.create(null);\n      this.declarativeEnvironmentRecordsBindings.set(r, serializedBindings);\n    }\n    let serializedBinding: ?SerializedBinding = serializedBindings[n];\n    if (!serializedBinding) {\n      let realm = this.realm;\n      let binding = r.bindings[n];\n      invariant(!binding.deletable);\n      let value = (binding.initialized && binding.value) || realm.intrinsics.undefined;\n      let serializedValue = this.serializeValue(\n        value,\n        reasons.concat(`access in ${functionName} to ${n}`));\n      serializedBinding = { serializedValue, value };\n      serializedBindings[n] = serializedBinding;\n      if (value.mightBeObject()) {\n        // Increment ref count one more time to ensure that this object will be assigned a unique id.\n        // This ensures that only once instance is created across all possible residual function invocations.\n        this._incrementValToRefCount(value);\n      }\n    }\n    return serializedBinding;\n  }\n\n  _getValIdForReference(val: Value): BabelNodeIdentifier {\n    let id = this._getValIdForReferenceOptional(val);\n    invariant(id, \"Value Id cannot be null or undefined\");\n    return id;\n  }\n\n  _getValIdForReferenceOptional(val: Value): ?BabelNodeIdentifier {\n    let id = this.refs.get(val);\n    if (id) {\n      this._incrementValToRefCount(val);\n    }\n    return id;\n  }\n\n  _incrementValToRefCount(val: Value) {\n    if (this.collectValToRefCountOnly) {\n      let refCount = this.valToRefCount.get(val);\n      if (refCount) {\n        refCount++;\n      } else {\n        refCount = 1;\n      }\n      this.valToRefCount.set(val, refCount);\n    }\n  }\n\n  serializeValue(val: Value, reasons?: Array<string>, referenceOnly?: boolean, bindingType?: BabelVariableKind): BabelNodeExpression {\n\n    let ref = this._getValIdForReferenceOptional(val);\n    if (ref) {\n      return ref;\n    }\n\n    reasons = reasons || [];\n    if (!referenceOnly && this.shouldInline(val)) {\n      let res = this._serializeValue(\"\", val, reasons);\n      invariant(res !== undefined);\n      return res;\n    }\n\n    let name = this.valueNameGenerator.generate(val.__originalName || \"\");\n    let id = t.identifier(name);\n    this.refs.set(val, id);\n    this.serializationStack.push(val);\n    let init = this._serializeValue(name, val, reasons);\n    let result = id;\n    this._incrementValToRefCount(val);\n\n    if (reasons.length) {\n      this.globalReasons[name] = reasons;\n    }\n\n    // default to 2 because we don't want the serializer to assume there's\n    // one reference and inline the value\n    let refCount = this.options.singlePass ? 2 : this.valToRefCount.get(val);\n    invariant(refCount !== undefined && refCount > 0);\n    if (this.collectValToRefCountOnly ||\n      refCount !== 1) {\n       if (init) {\n         if (init !== id) {\n           let declar = t.variableDeclaration((bindingType ? bindingType : \"var\"), [\n             t.variableDeclarator(id, init)\n           ]);\n\n           this.body.push(declar);\n         }\n         this.statistics.valueIds++;\n       }\n     } else {\n       if (init) {\n         this.refs.delete(val);\n         result = init;\n         this.statistics.valueIdsElided++;\n       }\n     }\n\n    this.serializationStack.pop();\n    if (this.serializationStack.length === 0) {\n      while (this.delayedSerializations.length) {\n        invariant(this.serializationStack.length === 0);\n        let serializer = this.delayedSerializations.shift();\n        serializer();\n      }\n    }\n\n    return result;\n  }\n\n  _serializeValueIntrinsic(val: Value): BabelNodeExpression {\n    invariant(val.intrinsicName);\n    return this.preludeGenerator.convertStringToMember(val.intrinsicName);\n  }\n\n  _delay(reason: boolean | BabelNodeIdentifier, values: Array<Value>, func: () => void) {\n    invariant(reason);\n    if (reason === true) {\n      this.delayedSerializations.push(func);\n    } else {\n      let a = this.delayedKeyedSerializations.get(reason);\n      if (a === undefined) this.delayedKeyedSerializations.set(reason, a = []);\n      a.push({ values, func });\n    }\n  }\n\n  _getDescriptorValues(desc: Descriptor): Array<Value> {\n    if (desc.value !== undefined) return [desc.value];\n    invariant(desc.get !== undefined);\n    invariant(desc.set !== undefined);\n    return [desc.get, desc.set];\n  }\n\n  _shouldDelayValues(values: Array<Value>): boolean | BabelNodeIdentifier {\n    for (let value of values) {\n      let delayReason = this._shouldDelayValue(value);\n      if (delayReason) return delayReason;\n    }\n    return false;\n  }\n\n  _shouldDelayValue(val: Value): boolean | BabelNodeIdentifier {\n    // Serialization of a statement related to a value MUST be delayed if\n    // the creation of the value's identity requires the availability of either:\n    // 1. a time-dependent value that is declared by some generator entry\n    //    that has not yet been processed\n    //    (tracked by the `declaredDerivedIds` set), or\n    // 2. a value that is also currently being serialized\n    //    (tracked by the `serializationStack`).\n    let delayReason;\n    if (val instanceof BoundFunctionValue) {\n      delayReason = this._shouldDelayValue(val.$BoundTargetFunction);\n      if (delayReason) return delayReason;\n      delayReason = this._shouldDelayValue(val.$BoundThis);\n      if (delayReason) return delayReason;\n      for (let arg of val.$BoundArguments) {\n        delayReason = this._shouldDelayValue(arg);\n        if (delayReason) return delayReason;\n      }\n    } else if (val instanceof FunctionValue) {\n      if (!this.firstFunctionUsages.has(val)) this.firstFunctionUsages.set(val, this._getBodyReference());\n      return false;\n    } else if (val instanceof AbstractValue) {\n      if (val.hasIdentifier() && !this.declaredDerivedIds.has(val.getIdentifier())) return val.getIdentifier();\n      for (let arg of val.args) {\n        delayReason = this._shouldDelayValue(arg);\n        if (delayReason) return delayReason;\n      }\n    } else if (val instanceof ProxyValue) {\n      delayReason = this._shouldDelayValue(val.$ProxyTarget);\n      if (delayReason) return delayReason;\n      delayReason = this._shouldDelayValue(val.$ProxyHandler);\n      if (delayReason) return delayReason;\n    } else if (val instanceof ObjectValue) {\n      let kind = val.getKind();\n      if (kind === \"Date\") {\n        invariant(val.$DateValue !== undefined);\n        delayReason = this._shouldDelayValue(val.$DateValue);\n        if (delayReason) return delayReason;\n      }\n    }\n\n    return this.serializationStack.indexOf(val) >= 0;\n  }\n\n  _eagerOrDelay(values: Array<Value>, serializer: () => void) {\n    let delayReason = this._shouldDelayValues(values);\n    if (delayReason) {\n      this._delay(delayReason, values, serializer);\n    } else {\n      serializer();\n    }\n  }\n\n  _assignProperty(locationFn: () => BabelNodeLVal, valueFn: () => BabelNodeExpression, mightHaveBeenDeleted: boolean) {\n    let assignment = t.expressionStatement(\n      t.assignmentExpression(\"=\", locationFn(), valueFn()));\n    if (mightHaveBeenDeleted) {\n      let condition = t.binaryExpression(\"!==\", valueFn(), this.serializeValue(this.realm.intrinsics.empty));\n      this.body.push(t.ifStatement(condition, assignment));\n    } else {\n      this.body.push(assignment);\n    }\n  }\n\n  _serializeValueArray(name: string, val: ObjectValue, reasons: Array<string>): BabelNodeExpression {\n    let realm = this.realm;\n    let elems = [];\n\n    let remainingProperties = new Map(val.properties);\n\n    // If array length is abstract set it manually and then all known properties (including numeric indices)\n    let lenProperty = Get(realm, val, \"length\");\n    if (lenProperty instanceof AbstractValue) {\n      this._eagerOrDelay([val], () => {\n        this._assignProperty(\n          () => t.memberExpression(this._getValIdForReference(val), t.identifier(\"length\")),\n          () => {\n            return this.serializeValue(lenProperty, reasons.concat(`Abstract length of array ${name}`));\n          },\n          false /*mightHaveBeenDeleted*/);\n        }\n      );\n      remainingProperties.delete(\"length\");\n    } else {\n      // An array's length property cannot be redefined, so this won't run user code\n      let len = ToLength(realm, lenProperty);\n      for (let i = 0; i < len; i++) {\n        let key = i + \"\";\n        let propertyBinding = remainingProperties.get(key);\n        let elem = null;\n        if (propertyBinding !== undefined) {\n          let descriptor = propertyBinding.descriptor;\n          if (descriptor !== undefined && descriptor.value !== undefined) { // deleted\n            remainingProperties.delete(key);\n            if (this._canEmbedProperty(val, key, descriptor)) {\n              let elemVal = descriptor.value;\n              invariant(elemVal instanceof Value);\n              let mightHaveBeenDeleted = elemVal.mightHaveBeenDeleted();\n              let delayReason = this._shouldDelayValue(elemVal) || mightHaveBeenDeleted;\n              if (delayReason) {\n                // handle self recursion\n                this._delay(delayReason, [elemVal, val], () => {\n                  this._assignProperty(\n                    () => t.memberExpression(this._getValIdForReference(val), t.numericLiteral(i), true),\n                    () => {\n                      invariant(elemVal !== undefined);\n                      return this.serializeValue(elemVal, reasons.concat(`Declared in array ${name} at index ${key}`));\n                    },\n                    mightHaveBeenDeleted);\n                });\n              } else {\n                elem = this.serializeValue(\n                  elemVal,\n                  reasons.concat(`Declared in array ${name} at index ${key}`)\n                );\n              }\n            }\n          }\n        }\n        elems.push(elem);\n      }\n    }\n\n    this.addProperties(name, val, reasons, remainingProperties);\n    return t.arrayExpression(elems);\n  }\n\n  _serializeValueMap(name: string, val: ObjectValue, reasons: Array<string>): BabelNodeExpression {\n    let kind = val.getKind();\n    let elems = [];\n\n    let entries;\n    if (kind === \"Map\") {\n      entries = val.$MapData;\n    } else {\n      invariant(kind === \"WeakMap\");\n      entries = val.$WeakMapData;\n    }\n    invariant(entries !== undefined);\n    let len = entries.length;\n\n    for (let i = 0; i < len; i++) {\n      let entry = entries[i];\n      let key = entry.$Key;\n      let value = entry.$Value;\n      if (key === undefined || value === undefined) continue;\n      let mightHaveBeenDeleted = key.mightHaveBeenDeleted();\n      let delayReason = this._shouldDelayValue(key) ||\n        this._shouldDelayValue(value) || mightHaveBeenDeleted;\n        if (delayReason) {\n          // handle self recursion\n          this._delay(delayReason, [key, value, val], () => {\n            invariant(key !== undefined);\n            invariant(value !== undefined);\n            this.body.push(t.expressionStatement(\n              t.callExpression(\n                t.memberExpression(this._getValIdForReference(val), t.identifier(\"set\")),\n                [this.serializeValue(key, reasons.concat(`Set entry on ${name}`)),\n                 this.serializeValue(value, reasons.concat(`Set entry on ${name}`))]\n              )\n            ));\n          });\n        } else {\n          let serializedKey = this.serializeValue(key, reasons);\n          let serializedValue = this.serializeValue(value, reasons.concat(`Set entry on ${name}`));\n          let elem = t.arrayExpression([serializedKey, serializedValue]);\n          elems.push(elem);\n        }\n    }\n\n    this.addProperties(name, val, reasons, val.properties);\n    let arrayValue = t.arrayExpression(elems);\n    return t.newExpression(\n      this.preludeGenerator.memoizeReference(kind), [arrayValue]);\n  }\n\n  _serializeValueSet(name: string, val: ObjectValue, reasons: Array<string>): BabelNodeExpression {\n    let kind = val.getKind();\n    let elems = [];\n\n    let entries = val.$SetData;\n    if (kind === \"Set\") {\n      entries = val.$SetData;\n    } else {\n      invariant(kind === \"WeakSet\");\n      entries = val.$WeakSetData;\n    }\n    invariant(entries !== undefined);\n    let len = entries.length;\n\n    for (let i = 0; i < len; i++) {\n      let entry = entries[i];\n      if (entry === undefined) continue;\n      let mightHaveBeenDeleted = entry.mightHaveBeenDeleted();\n      let delayReason = this._shouldDelayValue(entry) || mightHaveBeenDeleted;\n      if (delayReason) {\n        // handle self recursion\n        this._delay(delayReason, [entry, val], () => {\n          invariant(entry !== undefined);\n          this.body.push(t.expressionStatement(\n            t.callExpression(\n              t.memberExpression(this._getValIdForReference(val), t.identifier(\"add\")),\n              [this.serializeValue(entry, reasons.concat(`Added to ${name}`))]\n            )\n          ));\n        });\n      } else {\n        let elem = this.serializeValue(\n          entry,\n          reasons.concat(`Added to ${name}`)\n        );\n        elems.push(elem);\n      }\n    }\n\n    this.addProperties(name, val, reasons, val.properties);\n    let arrayValue = t.arrayExpression(elems);\n    return t.newExpression(\n      this.preludeGenerator.memoizeReference(kind), [arrayValue]);\n  }\n\n  _serializeValueTypedArray(name: string, val: ObjectValue, reasons: Array<string>): BabelNodeExpression {\n    let elems = [];\n\n    let len = val.$ArrayLength;\n    invariant(len !== undefined);\n    for (let i = 0; i < len; i++) {\n      let key = i + \"\";\n      let elemVal = val.$Get(key, val);\n      let elem = this.serializeValue(\n        elemVal,\n        reasons.concat(`Declared in typed array ${name} at index ${key}`)\n      );\n      elems.push(elem);\n    }\n\n    this.addProperties(name, val, reasons, val.properties);\n    let arrayValue = t.arrayExpression(elems);\n    return t.newExpression(\n      this.preludeGenerator.memoizeReference(val.getKind()), [arrayValue]);\n  }\n\n  _getPropertyValue(val: ObjectValue, name: string): void | Value {\n    let prototypeBinding = val.properties.get(name);\n    if (prototypeBinding === undefined) return undefined;\n    let prototypeDesc = prototypeBinding.descriptor;\n    if (prototypeDesc === undefined) return undefined;\n    return prototypeDesc.value;\n  }\n\n  _isDefaultPrototype(prototype: ObjectValue): boolean {\n    if (prototype.symbols.size !== 0 ||\n      prototype.$Prototype !== this.realm.intrinsics.ObjectPrototype ||\n      !prototype.getExtensible()) return false;\n    let foundConstructor = false;\n    for (let name of prototype.properties.keys())\n      if (name === \"constructor\" &&\n        this._getPropertyValue(prototype, name) === prototype.originalConstructor)\n        foundConstructor = true;\n      else\n        return false;\n    return foundConstructor;\n  }\n\n  _serializeValueFunction(name: string, val: FunctionValue, reasons: Array<string>): void | BabelNodeExpression {\n    if (val instanceof BoundFunctionValue) {\n      this.addProperties(name, val, reasons);\n      return t.callExpression(\n        t.memberExpression(\n          this.serializeValue(val.$BoundTargetFunction, reasons.concat(`Bound by ${name}`)),\n          t.identifier(\"bind\")\n        ),\n        [].concat(\n          this.serializeValue(val.$BoundThis, reasons.concat(`Bound this of ${name}`)),\n          val.$BoundArguments.map((boundArg, i) => this.serializeValue(boundArg, reasons.concat(`Bound argument ${i} of ${name}`)))\n        )\n      );\n    }\n\n    if (val instanceof NativeFunctionValue) {\n      throw new Error(\"TODO: do not know how to serialize non-intrinsic native function value\");\n    }\n\n    invariant(val.constructor === FunctionValue);\n    let formalParameters = val.$FormalParameters;\n    invariant(formalParameters != null);\n    let code = val.$ECMAScriptCode;\n    invariant(code != null);\n\n    let functionInfo = this.functions.get(code);\n\n    if (!functionInfo) {\n      functionInfo = {\n        names: Object.create(null),\n        modified: Object.create(null),\n        instances: [],\n        usesArguments: false,\n        usesThis: false,\n      };\n      this.functions.set(code, functionInfo);\n\n      let state = {\n        tryQuery: this.logger.tryQuery.bind(this.logger),\n        val,\n        reasons,\n        name,\n        functionInfo,\n        map: functionInfo.names,\n        realm: this.realm };\n\n      traverse(\n        t.file(t.program([\n          t.expressionStatement(\n            t.functionExpression(\n              null,\n              formalParameters,\n              code\n            )\n          )\n        ])),\n        ClosureRefVisitor,\n        null,\n        state\n      );\n\n      if (val.isResidual && Object.keys(functionInfo.names).length) {\n        this.logger.logError(val, `residual function ${describeLocation(this.realm, val, undefined, code.loc) || \"(unknown)\"} refers to the following identifiers defined outside of the local scope: ${Object.keys(functionInfo.names).join(\", \")}`);\n      }\n    }\n\n    let serializedBindings = Object.create(null);\n    let instance: FunctionInstance = {\n      serializedBindings,\n      functionValue: val,\n    };\n    let delayed = 1;\n    let undelay = () => {\n      if (--delayed === 0) {\n        instance.insertionPoint = this._getBodyReference();\n        this.functionInstances.push(instance);\n      }\n    };\n    for (let innerName in functionInfo.names) {\n      let referencedValues = [];\n      let serializeBindingFunc;\n      let doesNotMatter = true;\n      let reference = this.logger.tryQuery(\n        () => ResolveBinding(this.realm, innerName, doesNotMatter, val.$Environment),\n        undefined, true);\n      if (reference === undefined) {\n        serializeBindingFunc = () => this._serializeGlobalBinding(innerName);\n      } else {\n        invariant(!IsUnresolvableReference(this.realm, reference));\n        let referencedBase = reference.base;\n        let referencedName: string = (reference.referencedName: any);\n        if (typeof referencedName !== \"string\") {\n          throw new Error(\"TODO: do not know how to serialize reference with symbol\");\n        }\n        if (reference.base instanceof GlobalEnvironmentRecord) {\n          serializeBindingFunc = () => this._serializeGlobalBinding(referencedName);\n        } else if (referencedBase instanceof DeclarativeEnvironmentRecord) {\n          serializeBindingFunc = () => {\n            invariant(referencedBase instanceof DeclarativeEnvironmentRecord);\n            return this._serializeDeclarativeEnvironmentRecordBinding(referencedBase, referencedName, name, reasons);\n          };\n          let binding = referencedBase.bindings[referencedName];\n          if (binding.initialized && binding.value) referencedValues.push(binding.value);\n        } else {\n          invariant(false);\n        }\n      }\n      delayed++;\n      this._eagerOrDelay(referencedValues, () => {\n        let serializedBinding = serializeBindingFunc();\n        invariant(serializedBinding);\n        serializedBindings[innerName] = serializedBinding;\n        invariant(functionInfo);\n        if (functionInfo.modified[innerName]) serializedBinding.modified = true;\n        undelay();\n      });\n    }\n\n    undelay();\n    functionInfo.instances.push(instance);\n\n    this.addProperties(name, val, reasons);\n  }\n\n  _canEmbedProperty(obj: ObjectValue, key: string, prop: Descriptor): boolean {\n    if (obj instanceof FunctionValue && key === \"prototype\")\n      return !!prop.writable && !prop.configurable && !prop.enumerable && !prop.set && !prop.get;\n    else\n      return !!prop.writable && !!prop.configurable && !!prop.enumerable && !prop.set && !prop.get;\n  }\n\n  _serializeValueObject(name: string, val: ObjectValue, reasons: Array<string>): BabelNodeExpression {\n    // If this object is a prototype object that was implicitly created by the runtime\n    // for a constructor, then we can obtain a reference to this object\n    // in a special way that's handled alongside function serialization.\n    let constructor = val.originalConstructor;\n    if (constructor !== undefined) {\n      let prototypeId = this.refs.get(val);\n      invariant(prototypeId !== undefined);\n      this._eagerOrDelay([constructor], () => {\n        invariant(constructor !== undefined);\n        invariant(prototypeId !== undefined);\n        this.serializeValue(constructor, reasons.concat(`Constructor of object ${name}`));\n        this.addProperties(name, val, reasons);\n        this.functionPrototypes.set(constructor, prototypeId);\n      });\n      return prototypeId;\n    }\n\n    let kind = val.getKind();\n    switch (kind) {\n      case \"RegExp\":\n        let source = val.$OriginalSource;\n        let flags = val.$OriginalFlags;\n        invariant(typeof source === \"string\");\n        invariant(typeof flags === \"string\");\n        this.addProperties(name, val, reasons);\n        return t.callExpression(this.preludeGenerator.memoizeReference(\"RegExp\"), [t.stringLiteral(source), t.stringLiteral(flags)]);\n      case \"Number\":\n        let numberData = val.$NumberData;\n        invariant(numberData !== undefined);\n        this.addProperties(name, val, reasons);\n        return t.newExpression(this.preludeGenerator.memoizeReference(\"Number\"), [t.numericLiteral(numberData.value)]);\n      case \"String\":\n        let stringData = val.$StringData;\n        invariant(stringData !== undefined);\n        this.addProperties(name, val, reasons);\n        return t.newExpression(this.preludeGenerator.memoizeReference(\"String\"), [t.stringLiteral(stringData.value)]);\n      case \"Boolean\":\n        let booleanData = val.$BooleanData;\n        invariant(booleanData !== undefined);\n        this.addProperties(name, val, reasons);\n        return t.newExpression(this.preludeGenerator.memoizeReference(\"Boolean\"), [t.booleanLiteral(booleanData.value)]);\n      case \"Date\":\n        let dateValue = val.$DateValue;\n        invariant(dateValue !== undefined);\n        let serializedDateValue = this.serializeValue(dateValue, reasons.concat(`[[DateValue]] of object ${name}`));\n        this.addProperties(name, val, reasons);\n        return t.newExpression(this.preludeGenerator.memoizeReference(\"Date\"), [serializedDateValue]);\n      case \"Float32Array\":\n      case \"Float64Array\":\n      case \"Int8Array\":\n      case \"Int16Array\":\n      case \"Int32Array\":\n      case \"Uint8Array\":\n      case \"Uint16Array\":\n      case \"Uint32Array\":\n      case \"Uint8ClampedArray\":\n        return this._serializeValueTypedArray(name, val, reasons);\n      case \"Map\":\n      case \"WeakMap\":\n        return this._serializeValueMap(name, val, reasons);\n      case \"Set\":\n      case \"WeakSet\":\n        return this._serializeValueSet(name, val, reasons);\n      default:\n        if (kind !== \"Object\")\n          this.logger.logError(val, `Serialization of an object of kind ${kind} is not supported.`);\n        if (this.$ParameterMap !== undefined)\n          this.logger.logError(val, `Serialization of an arguments object is not supported.`);\n\n        let remainingProperties = new Map(val.properties);\n        let props = [];\n        for (let [key, propertyBinding] of val.properties) {\n          let descriptor = propertyBinding.descriptor;\n          if (descriptor === undefined || descriptor.value === undefined) continue; // deleted\n          if (this._canEmbedProperty(val, key, descriptor)) {\n            remainingProperties.delete(key);\n            let propValue = descriptor.value;\n            invariant(propValue instanceof Value);\n            if (this._canIgnoreProperty(val, key, descriptor)) continue;\n            let mightHaveBeenDeleted = propValue.mightHaveBeenDeleted();\n            let delayReason = this._shouldDelayValue(propValue) || mightHaveBeenDeleted;\n            if (delayReason) {\n              // self recursion\n              this._delay(delayReason, [propValue, val], () => {\n                this._assignProperty(\n                  () => {\n                    let serializedKey = this.generator.getAsPropertyNameExpression(key);\n                    return t.memberExpression(this._getValIdForReference(val), serializedKey, !t.isIdentifier(serializedKey));\n                  },\n                  () => {\n                    invariant(propValue instanceof Value);\n                    return this.serializeValue(propValue, reasons.concat(`Referenced in object ${name} with key ${key}`));\n                  },\n                  mightHaveBeenDeleted);\n              });\n            } else {\n              let serializedKey = this.generator.getAsPropertyNameExpression(key);\n              props.push(t.objectProperty(serializedKey, this.serializeValue(\n                propValue,\n                reasons.concat(`Referenced in object ${name} with key ${key}`)\n              )));\n            }\n          }\n        }\n\n        this.addProperties(name, val, reasons, remainingProperties);\n        return t.objectExpression(props);\n    }\n  }\n\n  _serializeValueSymbol(val: SymbolValue): BabelNodeExpression {\n    let args = [];\n    if (val.$Description) args.push(t.stringLiteral(val.$Description));\n    return t.callExpression(this.preludeGenerator.memoizeReference(\"Symbol\"), args);\n  }\n\n  _serializeValueProxy(name: string, val: ProxyValue, reasons: Array<string>): BabelNodeExpression {\n    return t.newExpression(this.preludeGenerator.memoizeReference(\"Proxy\"), [\n      this.serializeValue(val.$ProxyTarget, reasons.concat(`Proxy target of ${name}`)),\n      this.serializeValue(val.$ProxyHandler, reasons.concat(`Proxy handler of ${name}`))\n    ]);\n  }\n\n  _serializeAbstractValue(name: string, val: AbstractValue, reasons: Array<string>): BabelNodeExpression {\n    if (val.kind === \"sentinel member expression\")\n      this.logger.logError(val, \"expressions of type o[p] are not yet supported for partially known o and unknown p\");\n    let serializedArgs = val.args.map((abstractArg, i) => this.serializeValue(abstractArg, reasons.concat(`Argument ${i} of ${name}`)));\n    let serializedValue = val.buildNode(serializedArgs);\n    if (serializedValue.type === \"Identifier\") {\n      let id = ((serializedValue: any): BabelNodeIdentifier);\n      invariant(!this.preludeGenerator.derivedIds.has(id.name) ||\n        this.declaredDerivedIds.has(id));\n    }\n    return serializedValue;\n  }\n\n  _serializeValue(name: string, val: Value, reasons: Array<string>): void | BabelNodeExpression {\n    if (val instanceof AbstractValue) {\n      return this._serializeAbstractValue(name, val, reasons);\n    } else if (val.isIntrinsic()) {\n      return this._serializeValueIntrinsic(val);\n    } else if (val instanceof EmptyValue) {\n      this.needsEmptyVar = true;\n      return t.identifier(\"__empty\");\n    } else if (this.shouldInline(val)) {\n      return t.valueToNode(val.serialize());\n    } else if (IsArray(this.realm, val)) {\n      invariant(val instanceof ObjectValue);\n      return this._serializeValueArray(name, val, reasons);\n    } else if (val instanceof ProxyValue) {\n      return this._serializeValueProxy(name, val, reasons);\n    } else if (val instanceof FunctionValue) {\n      return this._serializeValueFunction(name, val, reasons);\n    } else if (val instanceof SymbolValue) {\n      return this._serializeValueSymbol(val);\n    } else if (val instanceof ObjectValue) {\n      return this._serializeValueObject(name, val, reasons);\n    } else {\n      invariant(false);\n    }\n  }\n\n  _serializeGlobalBinding(key: string): void | SerializedBinding {\n    let value = this.realm.getGlobalLetBinding(key);\n    // Check for let binding vs global property\n    if (value) {\n      let id = this.serializeValue(value, [\"global let binding\"], true, \"let\");\n      // increment ref count one more time as the value has been\n      // referentialized (stored in a variable) by serializeValue\n      this._incrementValToRefCount(value);\n      return {\n        serializedValue: id,\n        modified: true, referentialized: true\n      };\n    } else {\n      return { serializedValue: this.preludeGenerator.globalReference(key), modified: true, referentialized: true };\n    }\n  }\n\n  _spliceFunctions() {\n    let functionBodies = new Map();\n    function getFunctionBody(instance: FunctionInstance): Array<BabelNodeStatement> {\n      let b = functionBodies.get(instance);\n      if (b === undefined) functionBodies.set(instance, b = []);\n      return b;\n    }\n\n    let requireStatistics = { replaced: 0, count: 0 };\n\n    // Ensure that all bindings that actually get modified get proper variables\n    let functionEntries: Array<[BabelNodeBlockStatement, FunctionInfo]> = Array.from(this.functions.entries());\n    for (let [, { instances, names }] of functionEntries) {\n      for (let instance of instances) {\n        let serializedBindings = instance.serializedBindings;\n        for (let name in names) {\n          let serializedBinding: SerializedBinding = serializedBindings[name];\n          if (serializedBinding.modified && !serializedBinding.referentialized) {\n            let serializedBindingId = t.identifier(this.referentializedNameGenerator.generate(name));\n            let declar = t.variableDeclaration(\"var\", [\n              t.variableDeclarator(serializedBindingId, serializedBinding.serializedValue)]);\n            getFunctionBody(instance).push(declar);\n            serializedBinding.serializedValue = serializedBindingId;\n            serializedBinding.referentialized = true;\n            this.statistics.referentialized++;\n          }\n        }\n      }\n    }\n\n    this.statistics.functions = functionEntries.length;\n    let hoistedBody = [];\n    for (let [funcBody, { usesArguments, usesThis, instances, names, modified }] of functionEntries) {\n      let params = instances[0].functionValue.$FormalParameters;\n      invariant(params !== undefined);\n\n      let shouldInline = !funcBody;\n      if (!shouldInline && funcBody.start && funcBody.end) {\n        let bodySize = funcBody.end - funcBody.start;\n        shouldInline = bodySize <= 30;\n      }\n\n      // TODO: instead of completely giving up creating factories if there are modified bindings,\n      // figure out which instances share all they modified bindings, and then create factories for\n      // those batches.\n      let anySerializedBindingModified = false;\n      for (let instance of instances) {\n        let serializedBindings = instance.serializedBindings;\n        for (let name in names) {\n          let serializedBinding: SerializedBinding = serializedBindings[name];\n          if (serializedBinding.modified) {\n            anySerializedBindingModified = true;\n          }\n        }\n      }\n\n      let define = (instance, funcNode) => {\n        let body = funcNode.type === \"FunctionDeclaration\"\n          ? hoistedBody\n          : getFunctionBody(instance);\n        body.push(funcNode);\n        let { functionValue } = instance;\n        let prototypeId = this.functionPrototypes.get(functionValue);\n        if (prototypeId !== undefined) {\n          let id = this._getValIdForReference(functionValue);\n          body.push(t.variableDeclaration(\"var\", [\n            t.variableDeclarator(prototypeId,\n              t.memberExpression(id, t.identifier(\"prototype\")))\n          ]));\n        }\n      };\n\n      if (shouldInline || instances.length === 1 || usesArguments || anySerializedBindingModified) {\n        this.statistics.functionClones += instances.length - 1;\n        for (let instance of instances) {\n          let { functionValue, serializedBindings } = instance;\n          let id = this._getValIdForReference(functionValue);\n          let funcParams = params.slice();\n          let funcNode = t.functionDeclaration(id, funcParams, ((t.cloneDeep(funcBody): any): BabelNodeBlockStatement));\n\n          traverse(\n            t.file(t.program([funcNode])),\n            ClosureRefReplacer,\n            null,\n            { serializedBindings,\n              modified,\n              requireReturns: this.requireReturns,\n              requireStatistics,\n              isRequire: this.modules.getIsRequire(funcParams, [functionValue]) }\n          );\n\n          if (functionValue.$Strict) {\n            this.strictFunctionBodies.push(funcNode);\n          } else {\n            this.unstrictFunctionBodies.push(funcNode);\n          }\n\n          define(instance, funcNode);\n        }\n      } else {\n        let suffix = instances[0].functionValue.__originalName || \"\";\n        let factoryId = t.identifier(this.factoryNameGenerator.generate(suffix));\n\n        // filter included variables to only include those that are different\n        let factoryNames: Array<string> = [];\n        let sameSerializedBindings = Object.create(null);\n        for (let name in names) {\n          let isDifferent = false;\n          let lastBinding;\n\n          for (let { serializedBindings } of instances) {\n            let serializedBinding = serializedBindings[name];\n            invariant(!serializedBinding.modified);\n            if (!lastBinding) {\n              lastBinding = serializedBinding;\n            } else if (!AreSameSerializedBindings(serializedBinding, lastBinding)) {\n              isDifferent = true;\n              break;\n            }\n          }\n\n          if (isDifferent) {\n            factoryNames.push(name);\n          } else {\n            invariant(lastBinding);\n            sameSerializedBindings[name] = { serializedValue: lastBinding.serializedValue };\n          }\n        }\n        //\n\n        let factoryParams: Array<BabelNodeLVal> = [];\n        for (let key of factoryNames) {\n          factoryParams.push(t.identifier(key));\n        }\n        factoryParams = factoryParams.concat(params).slice();\n        // The Replacer below mutates the AST, so let's clone the original AST to avoid modifying it\n        let factoryNode = t.functionDeclaration(factoryId, factoryParams, ((t.cloneDeep(funcBody): any): BabelNodeBlockStatement));\n        this.prelude.push(factoryNode);\n\n        traverse(\n          t.file(t.program([factoryNode])),\n          ClosureRefReplacer,\n          null,\n          { serializedBindings: sameSerializedBindings,\n            modified,\n            requireReturns: this.requireReturns,\n            requireStatistics,\n            isRequire: this.modules.getIsRequire(factoryParams, instances.map(instance => instance.functionValue)) }\n        );\n\n        //\n\n        for (let instance of instances) {\n          let { functionValue, serializedBindings, insertionPoint } = instance;\n          let id = this._getValIdForReference(functionValue);\n          let flatArgs: Array<BabelNodeExpression> = factoryNames.map((name) => serializedBindings[name].serializedValue);\n          let node;\n          let firstUsage = this.firstFunctionUsages.get(functionValue);\n          invariant(insertionPoint !== undefined);\n          if (usesThis ||\n              firstUsage !== undefined && !firstUsage.isNotEarlierThan(insertionPoint) ||\n              this.functionPrototypes.get(functionValue) !== undefined) {\n            let callArgs: Array<BabelNodeExpression | BabelNodeSpreadElement> = [t.thisExpression()];\n            for (let flatArg of flatArgs) callArgs.push(flatArg);\n            for (let param of params) {\n              if (param.type !== \"Identifier\") {\n                throw new Error(\"TODO: do not know how to deal with non-Identifier parameters\");\n              }\n              callArgs.push(((param: any): BabelNodeIdentifier));\n            }\n            let callee = t.memberExpression(factoryId, t.identifier(\"call\"));\n\n            let childBody = t.blockStatement([\n              t.returnStatement(t.callExpression(callee, callArgs))\n            ]);\n\n            node = t.functionDeclaration(id, params, childBody);\n          } else {\n            node = t.variableDeclaration(\"var\", [\n              t.variableDeclarator(id, t.callExpression(\n                t.memberExpression(factoryId, t.identifier(\"bind\")),\n                [t.nullLiteral()].concat(flatArgs)\n              ))\n            ]);\n          }\n\n          define(instance, node);\n        }\n      }\n    }\n\n    for (let instance of this.functionInstances.reverse()) {\n      let functionBody = functionBodies.get(instance);\n      if (functionBody !== undefined) {\n        let insertionPoint = instance.insertionPoint;\n        invariant(insertionPoint instanceof BodyReference);\n        Array.prototype.splice.apply(insertionPoint.body, ([insertionPoint.index, 0]: Array<any>).concat((functionBody: Array<any>)));\n      }\n    }\n\n    if (requireStatistics.replaced > 0 && !this.collectValToRefCountOnly) {\n      console.log(`=== ${this.modules.initializedModules.size} of ${this.modules.moduleIds.size} modules initialized, ${requireStatistics.replaced} of ${requireStatistics.count} require calls inlined.`);\n    }\n\n    return hoistedBody;\n  }\n\n  _getContext(reasons: Array<string>): SerializationContext {\n    // TODO #482: Values serialized by nested generators would currently only get defined\n    // along the code of the nested generator; their definitions need to get hoisted\n    // or repeated so that they are accessible and defined from all using scopes\n    let bodies;\n    return {\n      reasons,\n      serializeValue: this.serializeValue.bind(this),\n      startBody: () => {\n        if (bodies === undefined) bodies = [];\n        bodies.push(this.body);\n        let body = [];\n        this.body = body;\n        return body;\n      },\n      endBody: (body: Array<BabelNodeStatement>) => {\n        invariant(body === this.body);\n        invariant(bodies !== undefined);\n        invariant(bodies.length > 0);\n        this.body = bodies.pop();\n      },\n      announceDeclaredDerivedId: (id: BabelNodeIdentifier) => {\n        this.declaredDerivedIds.add(id);\n        let a = this.delayedKeyedSerializations.get(id);\n        if (a !== undefined) {\n          while (a.length) {\n            invariant(this.serializationStack.length === 0);\n            invariant(this.delayedSerializations.length === 0);\n            let { values, func } = a.shift();\n            this._eagerOrDelay(values, func);\n          }\n          this.delayedKeyedSerializations.delete(id);\n        }\n      }\n    };\n  }\n\n  _emitGenerator(generator: Generator) {\n    generator.serialize(this.body, this._getContext([\"Root generator\"]));\n    invariant(this.delayedKeyedSerializations.size === 0);\n  }\n\n  _shouldBeWrapped(body: Array<any>) {\n    for (let i = 0; i < body.length; i++){\n      let item = body[i];\n      if (item.type === \"ExpressionStatement\") {\n        continue;\n      } else if (item.type === \"VariableDeclaration\" || item.type === \"FunctionDeclaration\") {\n        return true;\n      } else if (item.type === \"BlockStatement\") {\n        if (this._shouldBeWrapped(item.body)) {\n          return true;\n        }\n      } else if (item.type === \"IfStatement\"){\n        if (item.alternate){\n          if (this._shouldBeWrapped(item.alternate.body)){\n            return true;\n          }\n        }\n        if (item.consequent){\n          if (this._shouldBeWrapped(item.consequent.body)){\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  serialize(filename: string, code: string, sourceMaps: boolean): { generated?: { code: string, map?: SourceMap } } {\n    this._emitGenerator(this.generator);\n    invariant(this.declaredDerivedIds.size <= this.preludeGenerator.derivedIds.size);\n\n    Array.prototype.push.apply(this.prelude, this.preludeGenerator.prelude);\n\n    // TODO #20: add timers\n\n    // TODO #21: add event listeners\n\n    for (let [moduleId, moduleValue] of this.modules.initializedModules)\n      this.requireReturns.set(moduleId, this.serializeValue(moduleValue));\n\n    let hoistedBody = this._spliceFunctions();\n\n    // add strict modes\n    let strictDirective = t.directive(t.directiveLiteral(\"use strict\"));\n    let globalDirectives = [];\n    if (!this.unstrictFunctionBodies.length && this.strictFunctionBodies.length) {\n      // no unstrict functions, only strict ones\n      globalDirectives.push(strictDirective);\n    } else if (this.unstrictFunctionBodies.length && this.strictFunctionBodies.length) {\n      // strict and unstrict functions\n      funcLoop: for (let func of this.strictFunctionBodies) {\n        if (func.body.directives) {\n          for (let directive of func.body.directives) {\n            if (directive.value.value === \"use strict\") {\n              // already have a use strict directive\n              continue funcLoop;\n            }\n          }\n        } else\n          func.body.directives = [];\n\n        func.body.directives.unshift(strictDirective);\n      }\n    }\n\n    // build ast\n    let body = [];\n    if (this.needsEmptyVar) {\n      body = [(t.variableDeclaration(\"var\", [\n        t.variableDeclarator(\n          t.identifier(\"__empty\"),\n          t.objectExpression([])\n        ),\n      ]))];\n    }\n    body = body.concat(this.prelude, hoistedBody, this.body);\n    this.factorifyObjects(body);\n\n    let ast_body = [];\n    if (this.preludeGenerator.declaredGlobals.size > 0)\n      ast_body.push(t.variableDeclaration(\"var\",\n        Array.from(this.preludeGenerator.declaredGlobals).map(key =>\n          t.variableDeclarator(t.identifier(key)))));\n    if (body.length) {\n      if (this.realm.isCompatibleWith('node-source-maps')) {\n        ast_body.push(\n          t.expressionStatement(\n            t.callExpression(\n              t.memberExpression(\n                t.callExpression(\n                  t.identifier(\"require\"),\n                  [t.stringLiteral(\"source-map-support\")]\n                ),\n                t.identifier(\"install\")\n              ),\n              []\n            )\n          )\n        );\n      }\n\n      if (this._shouldBeWrapped(body)){\n        let functionExpression = t.functionExpression(null, [], t.blockStatement(body, globalDirectives));\n        let callExpression = this.preludeGenerator.usesThis\n          ? t.callExpression(\n              t.memberExpression(functionExpression, t.identifier(\"call\")),\n              [t.thisExpression()]\n            )\n          : t.callExpression(functionExpression, []);\n        ast_body.push(t.expressionStatement(callExpression));\n      } else {\n        ast_body = body;\n      }\n    }\n\n    let ast = {\n      type: \"File\",\n      program: {\n        type: \"Program\",\n        body: ast_body\n      }\n    };\n\n    return {\n      generated: generate(\n        ast,\n        { sourceMaps: sourceMaps, sourceFileName: filename },\n        code)\n    };\n  }\n\n  getObjectKeys(obj: BabelNodeObjectExpression): string | false {\n    let keys = [];\n\n    for (let prop of obj.properties) {\n      if (prop.type !== \"ObjectProperty\") return false;\n\n      let key = prop.key;\n      if (key.type === \"StringLiteral\") {\n        keys.push(key.value);\n      } else if (key.type === \"Identifier\") {\n        if (prop.computed) return false;\n        keys.push(key.name);\n      } else {\n        return false;\n      }\n    }\n\n    for (let key of keys) {\n      if (key.indexOf(\"|\") >= 0) return false;\n    }\n\n    return keys.join(\"|\");\n  }\n\n  factorifyObjects(body: Array<BabelNodeStatement>) {\n    let signatures = Object.create(null);\n\n    for (let node of body) {\n      if (node.type !== \"VariableDeclaration\") continue;\n\n      for (let declar of node.declarations) {\n        let { init } = declar;\n        invariant(init);\n        if (init.type !== \"ObjectExpression\") continue;\n\n        let keys = this.getObjectKeys(init);\n        if (!keys) continue;\n\n        let declars = signatures[keys] = signatures[keys] || [];\n        declars.push(declar);\n      }\n    }\n\n    for (let signatureKey in signatures) {\n      let declars = signatures[signatureKey];\n      if (declars.length < 5) continue;\n\n      let keys = signatureKey.split(\"|\");\n\n      //\n      let rootFactoryParams: Array<BabelNodeLVal> = [];\n      let rootFactoryProps = [];\n      for (let keyIndex = 0; keyIndex < keys.length; keyIndex++) {\n        let key = keys[keyIndex];\n        let id = t.identifier(`__${keyIndex}`);\n        rootFactoryParams.push(id);\n        let keyNode = t.isValidIdentifier(key) ? t.identifier(key) : t.stringLiteral(key);\n        rootFactoryProps.push(t.objectProperty(keyNode, id));\n      }\n\n      let rootFactoryId = t.identifier(this.factoryNameGenerator.generate(\"root\"));\n      let rootFactoryBody = t.blockStatement([\n        t.returnStatement(t.objectExpression(rootFactoryProps))\n      ]);\n      let rootFactory = t.functionDeclaration(rootFactoryId, rootFactoryParams, rootFactoryBody);\n      body.unshift(rootFactory);\n\n      //\n      for (let declar of declars) {\n        let args = [];\n        for (let prop of declar.init.properties) {\n          args.push(prop.value);\n        }\n\n        declar.init = t.callExpression(rootFactoryId, args);\n      }\n\n      //\n      let seen = new Set();\n      for (let declar of declars) {\n        if (seen.has(declar)) continue;\n\n        // build up a map containing the arguments that are shared\n        let common = new Map();\n        let mostSharedArgsLength = 0;\n        for (let declar2 of declars) {\n          if (seen.has(declar2)) continue;\n          if (declar === declar2) continue;\n\n          let sharedArgs = [];\n          for (let i = 0; i < keys.length; i++) {\n            if (isSameNode(declar.init.arguments[i], declar2.init.arguments[i])) {\n              sharedArgs.push(i);\n            }\n          }\n          if (!sharedArgs.length) continue;\n\n          mostSharedArgsLength = Math.max(mostSharedArgsLength, sharedArgs.length);\n          common.set(declar2, sharedArgs);\n        }\n\n        // build up a mapping of the argument positions that are shared so we can pick the top one\n        let sharedPairs = Object.create(null);\n        for (let [declar2, args] of common.entries()) {\n          if (args.length === mostSharedArgsLength) {\n            args = args.join(\",\");\n            let pair = sharedPairs[args] = sharedPairs[args] || [];\n            pair.push(declar2);\n          }\n        }\n\n        // get the highest pair\n        let highestPairArgs;\n        let highestPairCount;\n        for (let pairArgs in sharedPairs) {\n          let pair = sharedPairs[pairArgs];\n          if (!highestPairArgs || pair.length > highestPairCount) {\n            highestPairCount = pair.length;\n            highestPairArgs = pairArgs;\n          }\n        }\n        if (!highestPairArgs) continue;\n\n        //\n        let declarsSub = sharedPairs[highestPairArgs].concat(declar);\n        let removeArgs = highestPairArgs.split(\",\");\n\n        let subFactoryArgs = [];\n        let subFactoryParams = [];\n        let sharedArgs = declarsSub[0].init.arguments;\n        for (let i = 0; i < sharedArgs.length; i++) {\n          let arg = sharedArgs[i];\n          if (removeArgs.indexOf(i + \"\") >= 0) {\n            subFactoryArgs.push(arg);\n          } else {\n            let id = t.identifier(`__${i}`);\n            subFactoryArgs.push(id);\n            subFactoryParams.push(id);\n          }\n        }\n\n        let subFactoryId = t.identifier(this.factoryNameGenerator.generate(\"sub\"));\n        let subFactoryBody = t.blockStatement([\n          t.returnStatement(t.callExpression(rootFactoryId, subFactoryArgs))\n        ]);\n        let subFactory = t.functionDeclaration(subFactoryId, subFactoryParams, subFactoryBody);\n        body.unshift(subFactory);\n\n        for (let declarSub of declarsSub) {\n          seen.add(declarSub);\n\n          let call = declarSub.init;\n          call.callee = subFactoryId;\n          call.arguments = call.arguments.filter(function (val, i) {\n            return removeArgs.indexOf(i + \"\") < 0;\n          });\n        }\n      }\n    }\n  }\n\n  init(filename: string, code: string, map?: string = \"\",\n      sourceMaps?: boolean = false, onError?: (Realm, Value) => void) {\n    // Phase 1: Let's interpret.\n    this.execute(filename, code, map, onError);\n    if (this.logger.hasErrors()) return undefined;\n    this.modules.resolveInitializedModules();\n    if (this.options.initializeMoreModules) {\n      this.modules.initializeMoreModules();\n      if (this.logger.hasErrors()) return undefined;\n    }\n\n    // Phase 2: Let's serialize the heap and generate code.\n    // Serialize for the first time in order to gather reference counts\n    if (!this.options.singlePass) {\n      this.collectValToRefCountOnly = true;\n      this.valToRefCount = new Map();\n      this.serialize(filename, code, sourceMaps);\n      if (this.logger.hasErrors()) return undefined;\n    }\n    // Serialize for a second time, using reference counts to minimize number of generated identifiers\n    this._resetSerializeStates();\n    this.collectValToRefCountOnly = false;\n    let serialized = this.serialize(filename, code, sourceMaps);\n    invariant(!this.logger.hasErrors());\n    if (this.options.logStatistics) this.statistics.log();\n    return serialized.generated;\n  }\n}\n"]}