{"version":3,"sources":["../../src/serializer/types.js"],"names":["AreSameSerializedBindings","x","y","serializedValue","value","BodyReference","body","index","other","SerializerStatistics","objects","objectProperties","functions","functionClones","referentialized","valueIds","valueIdsElided","console","log"],"mappings":";;;;;;;qjBAAA;;;;;;;;;QAyCgBA,yB,GAAAA,yB;;AA9BhB;;AAEA;;AACA;;;;;;;;AA2BO,SAASA,yBAAT,CAAmCC,CAAnC,EAAyDC,CAAzD,EAA+E;AACpF,MAAID,EAAEE,eAAF,KAAsBD,EAAEC,eAA5B,EAA6C,OAAO,IAAP;AAC7C,MAAIF,EAAEG,KAAF,IAAWH,EAAEG,KAAF,KAAYF,EAAEE,KAA7B,EAAoC,OAAO,IAAP;AACpC,SAAO,KAAP;AACD;;IAEYC,a,WAAAA,a;AACX,yBAAYC,IAAZ,EAA6CC,KAA7C,EAA4D;AAAA;;AAC1D,6BAAUA,SAAS,CAAnB;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACD;;;;qCACgBC,K,EAA+B;AAC9C,aAAO,KAAKF,IAAL,KAAcE,MAAMF,IAApB,IAA4B,KAAKC,KAAL,IAAcC,MAAMD,KAAvD;AACD;;;;;;IAeUE,oB,WAAAA,oB;AACX,kCAAc;AAAA;;AACZ,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,gBAAL,GAAwB,CAAxB;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,cAAL,GAAsB,CAAtB;AACA,SAAKC,eAAL,GAAuB,CAAvB;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACA,SAAKC,cAAL,GAAsB,CAAtB;AACD;;;;0BAQK;AACJC,cAAQC,GAAR;AACAD,cAAQC,GAAR,CAAe,KAAKR,OAApB,sBAA4C,KAAKC,gBAAjD;AACAM,cAAQC,GAAR,CAAe,KAAKN,SAApB,wBAAgD,KAAKC,cAArD,2CAAyG,KAAKC,eAA9G;AACAG,cAAQC,GAAR,CAAe,KAAKH,QAApB,iCAAwD,KAAKC,cAA7D;AACD","file":"types.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { FunctionValue, Value } from \"../values/index.js\";\nimport type { BabelNodeExpression, BabelNodeStatement } from \"babel-types\";\nimport { Completion } from \"../completions.js\";\nimport invariant from \"../invariant.js\";\n\nexport type TryQuery<T> = (f: () => T, onCompletion: T | (Completion => T), logCompletion: boolean) => T;\n\nexport type FunctionInstance = {\n  serializedBindings: SerializedBindings;\n  functionValue: FunctionValue;\n  insertionPoint?: BodyReference;\n};\n\nexport type Names = { [key: string]: true };\nexport type FunctionInfo = {\n  names: Names;\n  modified: Names;\n  instances: Array<FunctionInstance>;\n  usesArguments: boolean;\n  usesThis: boolean;\n}\n\nexport type SerializedBindings = { [key: string]: SerializedBinding };\nexport type SerializedBinding = {\n  serializedValue: BabelNodeExpression;\n  value?: Value;\n  referentialized?: boolean;\n  modified?: boolean;\n}\n\nexport function AreSameSerializedBindings(x: SerializedBinding, y: SerializedBinding) {\n  if (x.serializedValue === y.serializedValue) return true;\n  if (x.value && x.value === y.value) return true;\n  return false;\n}\n\nexport class BodyReference {\n  constructor(body: Array<BabelNodeStatement>, index: number) {\n    invariant(index >= 0);\n    this.body = body;\n    this.index = index;\n  }\n  isNotEarlierThan(other: BodyReference): boolean {\n    return this.body === other.body && this.index >= other.index;\n  }\n  body: Array<BabelNodeStatement>;\n  index: number;\n}\n\nexport type SerializerOptions = {\n  initializeMoreModules?: boolean;\n  internalDebug?: boolean;\n  trace?: boolean;\n  singlePass?: boolean;\n  logStatistics?: boolean;\n  logModules?: boolean;\n  delayUnsupportedRequires?: boolean;\n}\n\nexport class SerializerStatistics {\n  constructor() {\n    this.objects = 0;\n    this.objectProperties = 0;\n    this.functions = 0;\n    this.functionClones = 0;\n    this.referentialized = 0;\n    this.valueIds = 0;\n    this.valueIdsElided = 0;\n  }\n  objects: number;\n  objectProperties: number;\n  functions: number;\n  functionClones: number;\n  referentialized: number;\n  valueIds: number;\n  valueIdsElided: number;\n  log() {\n    console.log(`=== serialization statistics`);\n    console.log(`${this.objects} objects with ${this.objectProperties} properties`);\n    console.log(`${this.functions} functions plus ${this.functionClones} clones due to captured variables; ${this.referentialized} captured mutable variables`);\n    console.log(`${this.valueIds} value ids generated and ${this.valueIdsElided} elided`);\n  }\n}\n"]}