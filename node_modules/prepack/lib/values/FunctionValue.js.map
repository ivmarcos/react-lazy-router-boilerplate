{"version":3,"sources":["../../src/values/FunctionValue.js"],"names":["t","FunctionValue","realm","intrinsicName","intrinsics","FunctionPrototype","binding","properties","get","desc","descriptor","value","undefined","params","$FormalParameters","expected","length","i","param","isAssignmentPattern","isRestElement","getLength"],"mappings":";;;;;;;;AAcA;;AACA;;IAAYA,C;;AAEZ;;;;;;;;;;;;+eAjBA;;;;;;;;;IAmBqBC,a;;;AACnB,yBAAYC,KAAZ,EAA0BC,aAA1B,EAAkD;AAAA;;AAAA,yHAC1CD,KAD0C,EACnCA,MAAME,UAAN,CAAiBC,iBADkB,EACCF,aADD;AAEjD;;AAaD;AACA;AACA;;;;;8BAGsB;AACpB,aAAO,UAAP;AACD;;;gCAE0B;AACzB,UAAIG,UAAU,KAAKC,UAAL,CAAgBC,GAAhB,CAAoB,QAApB,CAAd;AACA,+BAAUF,OAAV;AACA,UAAIG,OAAOH,QAAQI,UAAnB;AACA,+BAAUD,IAAV;AACA,UAAIE,QAAQF,KAAKE,KAAjB;AACA,UAAI,EAAEA,mCAAF,CAAJ,EAAqC,OAAOC,SAAP;AACrC,aAAOD,MAAMA,KAAb;AACD;;;uCAE2B;AAC1B,UAAIE,SAAS,KAAKC,iBAAlB;AACA,UAAID,WAAWD,SAAf,EAA0B,OAAO,KAAP;AAC1B,UAAIG,WAAWF,OAAOG,MAAtB;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,OAAOG,MAA3B,EAAmCC,GAAnC,EAAwC;AACtC,YAAIC,QAAQL,OAAOI,CAAP,CAAZ;AACA,YAAIjB,EAAEmB,mBAAF,CAAsBD,KAAtB,KAAgClB,EAAEoB,aAAF,CAAgBF,KAAhB,CAApC,EAA4D;AAC1DH,qBAAWE,CAAX;AACA;AACD;AACF;AACD,aAAOF,aAAa,KAAKM,SAAL,EAApB;AACD;;;;;;kBA/CkBpB,a","file":"FunctionValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { ObjectKind } from \"../types.js\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport type { Realm } from \"../realm.js\";\nimport { ObjectValue, NumberValue } from \"./index.js\";\nimport * as t from \"babel-types\";\nimport type { BabelNodeLVal, BabelNodeBlockStatement, BabelNodeSourceLocation } from \"babel-types\";\nimport invariant from \"../invariant.js\";\n\nexport default class FunctionValue extends ObjectValue {\n  constructor(realm: Realm, intrinsicName?: string) {\n    super(realm, realm.intrinsics.FunctionPrototype, intrinsicName);\n  }\n\n  $ConstructorKind: void | string;\n  $ThisMode: void | string;\n  $HomeObject: void | ObjectValue;\n  $Environment: LexicalEnvironment;\n  $Strict: boolean;\n  $FormalParameters: void | Array<BabelNodeLVal>;\n  $ECMAScriptCode: void | BabelNodeBlockStatement;\n  $FunctionKind: string;\n  $ScriptOrModule: any;\n  loc: ?BabelNodeSourceLocation;\n\n  // Indicates whether this function has been referenced by a __residual call.\n  // If true, the serializer will check that the function does not access any\n  // identifiers defined outside of the local scope.\n  isResidual: void | true;\n\n  getKind(): ObjectKind {\n    return \"Function\";\n  }\n\n  getLength(): void | number {\n    let binding = this.properties.get(\"length\");\n    invariant(binding);\n    let desc = binding.descriptor;\n    invariant(desc);\n    let value = desc.value;\n    if (!(value instanceof NumberValue)) return undefined;\n    return value.value;\n  }\n\n  hasDefaultLength(): boolean {\n    let params = this.$FormalParameters;\n    if (params === undefined) return false;\n    let expected = params.length;\n    for (let i = 0; i < params.length; i++) {\n      let param = params[i];\n      if (t.isAssignmentPattern(param) || t.isRestElement(param)) {\n        expected = i;\n        break;\n      }\n    }\n    return expected === this.getLength();\n  }\n}\n"]}