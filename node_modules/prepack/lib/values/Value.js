"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright (c) 2017-present, Facebook, Inc.
ll rights reserved.

his source code is licensed under the BSD-style license found in the
file in the root directory of this source tree. An additional grant
of patent rights can be found in the PATENTS file in the same directory.


var _index = require("./index.js");

var _invariant = require("../invariant.js");

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Value = function () {
  function Value(realm, intrinsicName) {
    _classCallCheck(this, Value);

    (0, _invariant2.default)(realm, "realm required");

    this.$Realm = realm;
    this.intrinsicName = intrinsicName;
    this.expressionLocation = realm.currentLocation;
  }
  // Name from original source if existant


  _createClass(Value, [{
    key: "getType",
    value: function getType() {
      return this.constructor;
    }
  }, {
    key: "isIntrinsic",
    value: function isIntrinsic() {
      return !!this.intrinsicName;
    }
  }, {
    key: "mightBeNumber",
    value: function mightBeNumber() {
      throw new Error("abstract method; please override");
    }
  }, {
    key: "mightNotBeNumber",
    value: function mightNotBeNumber() {
      throw new Error("abstract method; please override");
    }
  }, {
    key: "mightNotBeObject",
    value: function mightNotBeObject() {
      throw new Error("abstract method; please override");
    }
  }, {
    key: "mightBeObject",
    value: function mightBeObject() {
      throw new Error("abstract method; please override");
    }
  }, {
    key: "mightNotBeString",
    value: function mightNotBeString() {
      throw new Error("abstract method; please override");
    }
  }, {
    key: "mightBeUndefined",
    value: function mightBeUndefined() {
      throw new Error("abstract method; please override");
    }
  }, {
    key: "mightHaveBeenDeleted",
    value: function mightHaveBeenDeleted() {
      throw new Error("abstract method; please override");
    }
  }, {
    key: "promoteEmptyToUndefined",
    value: function promoteEmptyToUndefined() {
      throw new Error("abstract method; please override");
    }
  }, {
    key: "throwIfNotConcrete",
    value: function throwIfNotConcrete() {
      throw new Error("abstract method; please override");
    }
  }, {
    key: "throwIfNotConcreteNumber",
    value: function throwIfNotConcreteNumber() {
      throw new Error("abstract method; please override");
    }
  }, {
    key: "throwIfNotConcreteObject",
    value: function throwIfNotConcreteObject() {
      throw new Error("abstract method; please override");
    }
  }, {
    key: "throwIfNotObject",
    value: function throwIfNotObject() {
      throw new Error("abstract method; please override");
    }
  }, {
    key: "serialize",
    value: function serialize() {
      var _this = this;

      var stack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();

      if (stack.has(this)) {
        return stack.get(this);
      } else if (this._serialize) {
        var set = function set(val) {
          stack.set(_this, val);
          return val;
        };

        return set(this._serialize(set, stack));
      } else {
        throw new Error("can't serialize this type");
      }
    }
  }, {
    key: "_serialize",
    value: function _serialize(set, stack) {
      throw new Error("abstract method; please override");
    }
  }], [{
    key: "getTypeFromName",
    value: function getTypeFromName(typeName) {
      switch (typeName) {
        case "empty":
          return _index.EmptyValue;
        case "undefined":
          return _index.UndefinedValue;
        case "null":
          return _index.NullValue;
        case "boolean":
          return _index.BooleanValue;
        case "string":
          return _index.StringValue;
        case "symbol":
          return _index.SymbolValue;
        case "number":
          return _index.NumberValue;
        case "object":
          return _index.ObjectValue;
        case "function":
          return _index.FunctionValue;
        default:
          return undefined;
      }
    }
  }, {
    key: "isTypeCompatibleWith",
    value: function isTypeCompatibleWith(type, Constructor) {
      return type.prototype instanceof Constructor || type.prototype === Constructor.prototype;
    }
    // The source location of the expression that first produced this value.

  }]);

  return Value;
}();

exports.default = Value;
//# sourceMappingURL=Value.js.map