{"version":3,"sources":["../../src/values/Value.js"],"names":["Value","realm","intrinsicName","$Realm","expressionLocation","currentLocation","constructor","Error","stack","Map","has","get","_serialize","set","val","typeName","undefined","type","Constructor","prototype"],"mappings":";;;;;;qjBAAA;;;;;;;;;AAaA;;AAEA;;;;;;;;IAEqBA,K;AACnB,iBAAYC,KAAZ,EAA0BC,aAA1B,EAAkD;AAAA;;AAChD,6BAAUD,KAAV,EAAiB,gBAAjB;;AAEA,SAAKE,MAAL,GAAcF,KAAd;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKE,kBAAL,GAA0BH,MAAMI,eAAhC;AACD;AACD;;;;;8BAGwB;AACtB,aAAO,KAAKC,WAAZ;AACD;;;kCA0BsB;AACrB,aAAO,CAAC,CAAC,KAAKJ,aAAd;AACD;;;oCAEwB;AACvB,YAAM,IAAIK,KAAJ,CAAU,kCAAV,CAAN;AACD;;;uCAE2B;AAC1B,YAAM,IAAIA,KAAJ,CAAU,kCAAV,CAAN;AACD;;;uCAE2B;AAC1B,YAAM,IAAIA,KAAJ,CAAU,kCAAV,CAAN;AACD;;;oCAEwB;AACvB,YAAM,IAAIA,KAAJ,CAAU,kCAAV,CAAN;AACD;;;uCAE2B;AAC1B,YAAM,IAAIA,KAAJ,CAAU,kCAAV,CAAN;AACD;;;uCAE2B;AAC1B,YAAM,IAAIA,KAAJ,CAAU,kCAAV,CAAN;AACD;;;2CAE+B;AAC9B,YAAM,IAAIA,KAAJ,CAAU,kCAAV,CAAN;AACD;;;8CAEgC;AAC/B,YAAM,IAAIA,KAAJ,CAAU,kCAAV,CAAN;AACD;;;yCAEmC;AAClC,YAAM,IAAIA,KAAJ,CAAU,kCAAV,CAAN;AACD;;;+CAEuC;AACtC,YAAM,IAAIA,KAAJ,CAAU,kCAAV,CAAN;AACD;;;+CAEuC;AACtC,YAAM,IAAIA,KAAJ,CAAU,kCAAV,CAAN;AACD;;;uCAEqD;AACpD,YAAM,IAAIA,KAAJ,CAAU,kCAAV,CAAN;AACD;;;gCAEkD;AAAA;;AAAA,UAAzCC,KAAyC,uEAAhB,IAAIC,GAAJ,EAAgB;;AACjD,UAAID,MAAME,GAAN,CAAU,IAAV,CAAJ,EAAqB;AACnB,eAAOF,MAAMG,GAAN,CAAU,IAAV,CAAP;AACD,OAFD,MAEO,IAAI,KAAKC,UAAT,EAAqB;AAC1B,YAAIC,MAAM,SAANA,GAAM,CAACC,GAAD,EAAS;AACjBN,gBAAMK,GAAN,QAAgBC,GAAhB;AACA,iBAAOA,GAAP;AACD,SAHD;;AAKA,eAAOD,IAAI,KAAKD,UAAL,CAAgBC,GAAhB,EAAqBL,KAArB,CAAJ,CAAP;AACD,OAPM,MAOA;AACL,cAAM,IAAID,KAAJ,CAAU,2BAAV,CAAN;AACD;AACF;;;+BAEUM,G,EAAeL,K,EAA6B;AACrD,YAAM,IAAID,KAAJ,CAAU,kCAAV,CAAN;AACD;;;oCA7FsBQ,Q,EAAuC;AAC5D,cAAQA,QAAR;AACE,aAAK,OAAL;AAAc;AACd,aAAK,WAAL;AAAkB;AAClB,aAAK,MAAL;AAAa;AACb,aAAK,SAAL;AAAgB;AAChB,aAAK,QAAL;AAAe;AACf,aAAK,QAAL;AAAe;AACf,aAAK,QAAL;AAAe;AACf,aAAK,QAAL;AAAe;AACf,aAAK,UAAL;AAAiB;AACjB;AAAS,iBAAOC,SAAP;AAVX;AAYD;;;yCAE2BC,I,EAAoBC,W,EAAoC;AAClF,aAAOD,KAAKE,SAAL,YAA0BD,WAA1B,IAAyCD,KAAKE,SAAL,KAAmBD,YAAYC,SAA/E;AACD;AAGD;;;;;;;kBAnCmBnB,K","file":"Value.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { BabelNodeSourceLocation } from \"babel-types\";\nimport type { Realm } from \"../realm.js\";\nimport { EmptyValue, UndefinedValue, NullValue, BooleanValue, StringValue, SymbolValue, NumberValue, ObjectValue, ConcreteValue, AbstractObjectValue, FunctionValue } from \"./index.js\";\n\nimport invariant from \"../invariant.js\";\n\nexport default class Value {\n  constructor(realm: Realm, intrinsicName?: string) {\n    invariant(realm, \"realm required\");\n\n    this.$Realm = realm;\n    this.intrinsicName = intrinsicName;\n    this.expressionLocation = realm.currentLocation;\n  }\n  // Name from original source if existant\n  __originalName: void | string;\n\n  getType(): typeof Value {\n    return this.constructor;\n  }\n\n  static getTypeFromName(typeName: string): void | typeof Value {\n    switch (typeName) {\n      case \"empty\": return EmptyValue;\n      case \"undefined\": return UndefinedValue;\n      case \"null\": return NullValue;\n      case \"boolean\": return BooleanValue;\n      case \"string\": return StringValue;\n      case \"symbol\": return SymbolValue;\n      case \"number\": return NumberValue;\n      case \"object\": return ObjectValue;\n      case \"function\": return FunctionValue;\n      default: return undefined;\n    }\n  }\n\n  static isTypeCompatibleWith(type: typeof Value, Constructor: typeof Value): boolean {\n    return type.prototype instanceof Constructor || type.prototype === Constructor.prototype;\n  }\n\n  intrinsicName: ?string;\n  // The source location of the expression that first produced this value.\n  expressionLocation: ?BabelNodeSourceLocation;\n  $Realm: Realm;\n\n  isIntrinsic(): boolean {\n    return !!this.intrinsicName;\n  }\n\n  mightBeNumber(): boolean {\n    throw new Error(\"abstract method; please override\");\n  }\n\n  mightNotBeNumber(): boolean {\n    throw new Error(\"abstract method; please override\");\n  }\n\n  mightNotBeObject(): boolean {\n    throw new Error(\"abstract method; please override\");\n  }\n\n  mightBeObject(): boolean {\n    throw new Error(\"abstract method; please override\");\n  }\n\n  mightNotBeString(): boolean {\n    throw new Error(\"abstract method; please override\");\n  }\n\n  mightBeUndefined(): boolean {\n    throw new Error(\"abstract method; please override\");\n  }\n\n  mightHaveBeenDeleted(): boolean {\n    throw new Error(\"abstract method; please override\");\n  }\n\n  promoteEmptyToUndefined(): Value {\n    throw new Error(\"abstract method; please override\");\n  }\n\n  throwIfNotConcrete(): ConcreteValue {\n    throw new Error(\"abstract method; please override\");\n  }\n\n  throwIfNotConcreteNumber(): NumberValue {\n    throw new Error(\"abstract method; please override\");\n  }\n\n  throwIfNotConcreteObject(): ObjectValue {\n    throw new Error(\"abstract method; please override\");\n  }\n\n  throwIfNotObject(): ObjectValue | AbstractObjectValue {\n    throw new Error(\"abstract method; please override\");\n  }\n\n  serialize(stack: Map<Value, any> = new Map()): any {\n    if (stack.has(this)) {\n      return stack.get(this);\n    } else if (this._serialize) {\n      let set = (val) => {\n        stack.set(this, val);\n        return val;\n      };\n\n      return set(this._serialize(set, stack));\n    } else {\n      throw new Error(\"can't serialize this type\");\n    }\n  }\n\n  _serialize(set: Function, stack: Map<Value, any>): any {\n    throw new Error(\"abstract method; please override\");\n  }\n\n}\n"]}