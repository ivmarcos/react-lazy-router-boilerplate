{"version":3,"sources":["../../src/values/AbstractObjectValue.js"],"names":["t","AbstractObjectValue","realm","types","values","args","buildNode","kind","intrinsicName","result","$Realm","_buildNode","getElements","element","isPartial","createIntrospectionErrorThrowCompletion","undefined","isSimple","makeNotPartial","makePartial","makeSimple","P","value","elements","size","cv","$GetOwnProperty","hasProp","doesNotHaveProp","desc","d","cond","createAbstract","topVal","x","y","binaryExpression","Desc","$DefineOwnProperty","intrinsics","writable","enumerable","configurable","new_val","sawTrue","sawFalse","dval","vale","empty","$HasProperty","Receiver","generator","pname","getAsPropertyNameExpression","deriveAbstract","node","memberExpression","isIdentifier","$Get","cvVal","$GetPartial","V","$Set","oldVal","v","$SetPartial","$Delete","$OwnPropertyKeys"],"mappings":"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","file":"AbstractObjectValue.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport type { Descriptor, PropertyKeyValue } from \"../types.js\";\nimport { AbstractValue, BooleanValue, ObjectValue, StringValue, Value } from \"./index.js\";\nimport type { AbstractValueBuildNodeFunction } from \"./AbstractValue.js\";\nimport { TypesDomain, ValuesDomain } from \"../domains/index.js\";\nimport { IsDataDescriptor, joinValuesAsConditional, cloneDescriptor, equalDescriptors } from \"../methods/index.js\";\nimport type { BabelNodeExpression } from \"babel-types\";\nimport invariant from \"../invariant.js\";\nimport * as t from \"babel-types\";\n\nexport default class AbstractObjectValue extends AbstractValue {\n  constructor(\n      realm: Realm,\n      types: TypesDomain,\n      values: ValuesDomain,\n      args: Array<Value>,\n      buildNode: AbstractValueBuildNodeFunction | BabelNodeExpression,\n      kind?: string,\n      intrinsicName?: string) {\n    super(realm, types, values, args, buildNode, kind, intrinsicName);\n  }\n\n  clone(): AbstractObjectValue {\n    let result = new AbstractObjectValue(\n      this.$Realm, this.types, this.values, this.args, this._buildNode);\n    if (this.kind) result.kind = this.kind;\n    if (this.intrinsicName) result.intrinsicName = this.intrinsicName;\n    return result;\n  }\n\n  getTemplate(): ObjectValue {\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (element.isPartial()) {\n        return element;\n      } else {\n        break;\n      }\n    }\n    throw AbstractValue.createIntrospectionErrorThrowCompletion(this);\n  }\n\n  isPartial(): boolean {\n    let result;\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (result === undefined)\n        result = element.isPartial();\n      else if (result !== element.isPartial())\n        throw AbstractValue.createIntrospectionErrorThrowCompletion(this);\n    }\n    if (result === undefined)\n      throw AbstractValue.createIntrospectionErrorThrowCompletion(this);\n    return result;\n  }\n\n  isSimple(): boolean {\n    let result;\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      if (result === undefined)\n        result = element.isSimple();\n      else if (result !== element.isSimple())\n        throw AbstractValue.createIntrospectionErrorThrowCompletion(this);\n    }\n    if (result === undefined)\n      throw AbstractValue.createIntrospectionErrorThrowCompletion(this);\n    return result;\n  }\n\n  makeNotPartial(): void {\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      element.makeNotPartial();\n    }\n  }\n\n  makePartial(): void {\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      element.makePartial();\n    }\n  }\n\n  makeSimple(): void {\n    for (let element of this.values.getElements()) {\n      invariant(element instanceof ObjectValue);\n      return element.makeSimple();\n    }\n  }\n\n  throwIfNotObject(): AbstractObjectValue {\n    return this;\n  }\n\n  // ECMA262 9.1.3\n  $IsExtensible(): boolean {\n    return false;\n  }\n\n  // ECMA262 9.1.5\n  $GetOwnProperty(P: PropertyKeyValue): Descriptor | void {\n    if (P instanceof StringValue) P = P.value;\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$GetOwnProperty(P, cv);\n      }\n      invariant(false);\n    } else {\n      let hasProp = false;\n      let doesNotHaveProp = false;\n      let desc;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d === undefined)\n          doesNotHaveProp = true;\n        else {\n          hasProp = true;\n          if (desc === undefined) {\n            desc = cloneDescriptor(d);\n            invariant(desc !== undefined);\n            if  (!IsDataDescriptor(this.$Realm, d)) continue;\n          } else {\n            if (!equalDescriptors(d, desc))\n              throw AbstractValue.createIntrospectionErrorThrowCompletion(this, P);\n            if  (!IsDataDescriptor(this.$Realm, desc)) continue;\n            // values may be different\n            let cond = this.$Realm.createAbstract(new TypesDomain(BooleanValue), ValuesDomain.topVal,\n              [this, cv],\n              ([x, y]) => t.binaryExpression(\"===\", x, y));\n            desc.value = joinValuesAsConditional(this.$Realm, cond, d.value, desc.value);\n          }\n        }\n      }\n      if (hasProp && doesNotHaveProp)\n        throw AbstractValue.createIntrospectionErrorThrowCompletion(this, P);\n      return desc;\n    }\n  }\n\n  // ECMA262 9.1.6\n  $DefineOwnProperty(P: PropertyKeyValue, Desc: Descriptor): boolean {\n    if (P instanceof StringValue) P = P.value;\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$DefineOwnProperty(P, Desc);\n      }\n      invariant(false);\n    } else {\n      if (!IsDataDescriptor(this.$Realm, Desc))\n        throw AbstractValue.createIntrospectionErrorThrowCompletion(this, P);\n      let desc = {\n        value: 'value' in Desc ? Desc.value : this.$Realm.intrinsics.undefined,\n        writable: 'writable' in Desc ? Desc.writable : false,\n        enumerable: 'enumerable' in Desc ? Desc.enumerable : false,\n        configurable: 'configurable' in Desc ? Desc.configurable : false\n      };\n      let new_val = desc.value;\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d !== undefined && !equalDescriptors(d, desc))\n          throw AbstractValue.createIntrospectionErrorThrowCompletion(this, P);\n        let dval = d === undefined || d.vale === undefined ?\n         this.$Realm.intrinsics.empty : d.value;\n        let cond = this.$Realm.createAbstract(new TypesDomain(BooleanValue), ValuesDomain.topVal,\n          [this, cv],\n          ([x, y]) => t.binaryExpression(\"===\", x, y));\n        desc.value = joinValuesAsConditional(this.$Realm, cond, new_val, dval);\n        if (cv.$DefineOwnProperty(P, desc)) {\n          sawTrue = true;\n        } else\n          sawFalse = true;\n      }\n      if (sawTrue && sawFalse)\n        throw AbstractValue.createIntrospectionErrorThrowCompletion(this, P);\n      return sawTrue;\n    }\n  }\n\n  // ECMA262 9.1.7\n  $HasProperty(P: PropertyKeyValue): boolean {\n    if (P instanceof StringValue) P = P.value;\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$HasProperty(P, cv);\n      }\n      invariant(false);\n    } else {\n      let hasProp = false;\n      let doesNotHaveProp = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        if (cv.$HasProperty(P)) hasProp = true; else doesNotHaveProp = true;\n      }\n      if (hasProp && doesNotHaveProp)\n        throw AbstractValue.createIntrospectionErrorThrowCompletion(this, P);\n      return hasProp;\n    }\n  }\n\n  // ECMA262 9.1.8\n  $Get(P: PropertyKeyValue, Receiver: Value): Value {\n    if (P instanceof StringValue) P = P.value;\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        if (cv.isSimple() && typeof P === \"string\") {\n          let generator = this.$Realm.generator;\n          invariant(generator !== undefined);\n          let pname = generator.getAsPropertyNameExpression(P);\n          let d = cv.$GetOwnProperty(P);\n          if (d === undefined) {\n            return this.$Realm.deriveAbstract(TypesDomain.topVal,\n               ValuesDomain.topVal, [cv],\n               ([node]) => t.memberExpression(node, pname, !t.isIdentifier(pname)));\n          }\n        }\n        return cv.$Get(P, Receiver);\n      }\n      invariant(false);\n    } else {\n      let result;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        // We do not currently join property getters\n        if (d !== undefined && !IsDataDescriptor(this.$Realm, d))\n          throw AbstractValue.createIntrospectionErrorThrowCompletion(this, P);\n        let cvVal = d === undefined ? this.$Realm.intrinsics.undefined : d.value;\n        if (result === undefined)\n          result = cvVal;\n        else {\n          let cond = this.$Realm.createAbstract(new TypesDomain(BooleanValue),\n            ValuesDomain.topVal,\n            [this, cv],\n            ([x, y]) => t.binaryExpression(\"===\", x, y));\n          result = joinValuesAsConditional(this.$Realm, cond, cvVal, result);\n        }\n      }\n      invariant(result !== undefined);\n      return result;\n    }\n  }\n\n  $GetPartial(P: AbstractValue | PropertyKeyValue, Receiver: Value): Value {\n    if (!(P instanceof AbstractValue)) return this.$Get(P, Receiver);\n    invariant(this === Receiver, \"TODO\");\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        return cv.$GetPartial(P, cv);\n      }\n      invariant(false);\n    } else {\n      let result;\n      for (let cv of elements) {\n        let cvVal = cv.$GetPartial(P, cv);\n        if (result === undefined)\n          result = cvVal;\n        else {\n          let cond = this.$Realm.createAbstract(new TypesDomain(BooleanValue),\n            ValuesDomain.topVal,\n            [this, cv],\n            ([x, y]) => t.binaryExpression(\"===\", x, y));\n          result = joinValuesAsConditional(this.$Realm, cond, cvVal, result);\n        }\n      }\n      invariant(result !== undefined);\n      return result;\n    }\n  }\n\n  // ECMA262 9.1.9\n  $Set(P: PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (P instanceof StringValue) P = P.value;\n    invariant(this === Receiver, \"TODO\");\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$Set(P, V, cv);\n      }\n      invariant(false);\n    } else {\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d !== undefined && !IsDataDescriptor(this.$Realm, d))\n          throw AbstractValue.createIntrospectionErrorThrowCompletion(this, P);\n        let oldVal = d === undefined ? this.$Realm.intrinsics.empty : d.value;\n        let cond = this.$Realm.createAbstract(new TypesDomain(BooleanValue), ValuesDomain.topVal,\n          [this, cv],\n          ([x, y]) => t.binaryExpression(\"===\", x, y));\n        let v = joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n        if (cv.$Set(P, v, cv)) sawTrue = true; else sawFalse = true;\n      }\n      if (sawTrue && sawFalse)\n        throw AbstractValue.createIntrospectionErrorThrowCompletion(this, P);\n      return sawTrue;\n    }\n  }\n\n  $SetPartial(P: AbstractValue | PropertyKeyValue, V: Value, Receiver: Value): boolean {\n    if (!(P instanceof AbstractValue)) return this.$Set(P, V, Receiver);\n    invariant(this === Receiver, \"TODO\");\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$SetPartial(P, V, cv);\n      }\n      invariant(false);\n    } else {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let oldVal = this.$GetPartial(P, Receiver);\n        let cond = this.$Realm.createAbstract(new TypesDomain(BooleanValue), ValuesDomain.topVal,\n          [this, cv],\n          ([x, y]) => t.binaryExpression(\"===\", x, y));\n        let v = joinValuesAsConditional(this.$Realm, cond, V, oldVal);\n        cv.$SetPartial(P, v, cv);\n      }\n      return true;\n    }\n  }\n\n  // ECMA262 9.1.10\n  $Delete(P: PropertyKeyValue): boolean {\n    if (P instanceof StringValue) P = P.value;\n\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$Delete(P);\n      }\n      invariant(false);\n    } else {\n      let sawTrue = false;\n      let sawFalse = false;\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        let d = cv.$GetOwnProperty(P);\n        if (d === undefined) continue;\n        if (!IsDataDescriptor(this.$Realm, d))\n          throw AbstractValue.createIntrospectionErrorThrowCompletion(this, P);\n        let cond = this.$Realm.createAbstract(new TypesDomain(BooleanValue), ValuesDomain.topVal,\n          [this, cv],\n          ([x, y]) => t.binaryExpression(\"===\", x, y));\n        let v = joinValuesAsConditional(this.$Realm, cond, this.$Realm.intrinsics.empty, d.value);\n        if (cv.$Set(P, v, cv)) sawTrue = true; else sawFalse = true;\n      }\n      if (sawTrue && sawFalse)\n        throw AbstractValue.createIntrospectionErrorThrowCompletion(this, P);\n      return sawTrue;\n    }\n  }\n\n  $OwnPropertyKeys(): Array<PropertyKeyValue> {\n    let elements = this.values.getElements();\n    if (elements.size === 1) {\n      for (let cv of elements) {\n        invariant(cv instanceof ObjectValue);\n        return cv.$OwnPropertyKeys();\n      }\n      invariant(false);\n    } else {\n      throw AbstractValue.createIntrospectionErrorThrowCompletion(this);\n    }\n  }\n\n}\n"]}