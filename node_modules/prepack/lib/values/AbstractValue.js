"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _completions = require("../completions.js");

var _index = require("./index.js");

var _index2 = require("../domains/index.js");

var _invariant = require("../invariant.js");

var _invariant2 = _interopRequireDefault(_invariant);

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2017-present, Facebook, Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the BSD-style license found in the
file in the root directory of this source tree. An additional grant
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * of patent rights can be found in the PATENTS file in the same directory.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var AbstractValue = function (_Value) {
  _inherits(AbstractValue, _Value);

  function AbstractValue(realm, types, values, args, buildNode, kind, intrinsicName) {
    _classCallCheck(this, AbstractValue);

    (0, _invariant2.default)(realm.isPartial);

    var _this = _possibleConstructorReturn(this, (AbstractValue.__proto__ || Object.getPrototypeOf(AbstractValue)).call(this, realm, intrinsicName));

    (0, _invariant2.default)(types.getType() !== _index.ObjectValue || _this instanceof _index.AbstractObjectValue);
    (0, _invariant2.default)(types.getType() !== _index.NullValue && types.getType() !== _index.UndefinedValue);
    _this.types = types;
    _this.values = values;
    _this.mightBeEmpty = false;
    _this._buildNode = buildNode;
    _this.args = args;
    _this.kind = kind;
    return _this;
  }

  _createClass(AbstractValue, [{
    key: "clone",
    value: function clone() {
      var result = new AbstractValue(this.$Realm, this.types, this.values, this.args, this._buildNode);
      if (this.mightBeEmpty) result.mightBeEmpty = true;
      if (this.args) result.args = this.args;
      if (this.kind) result.kind = this.kind;
      return result;
    }
  }, {
    key: "getType",
    value: function getType() {
      return this.types.getType();
    }
  }, {
    key: "getGenerator",
    value: function getGenerator() {
      var realmGenerator = this.$Realm.generator;
      (0, _invariant2.default)(realmGenerator);
      return realmGenerator;
    }
  }, {
    key: "buildNode",
    value: function buildNode(args) {
      return this._buildNode instanceof Function ? this._buildNode(args) : this._buildNode;
    }
  }, {
    key: "hasIdentifier",
    value: function hasIdentifier() {
      return this._buildNode.type === "Identifier";
    }
  }, {
    key: "getIdentifier",
    value: function getIdentifier() {
      (0, _invariant2.default)(this.hasIdentifier());
      return this._buildNode;
    }
  }, {
    key: "addSourceLocationsTo",
    value: function addSourceLocationsTo(locations) {
      if (!(this._buildNode instanceof Function)) {
        if (this._buildNode.loc) locations.push(this._buildNode.loc);
      }
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var val = _step.value;

          if (val instanceof AbstractValue) val.addSourceLocationsTo(locations);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "addSourceNamesTo",
    value: function addSourceNamesTo(names) {
      var gen = this.$Realm.preludeGenerator;
      function add_instrinsic(name) {
        if (name.startsWith("_$")) {
          if (gen === undefined) return;
          add_args(gen.derivedIds.get(name));
        } else if (names.indexOf(name) < 0) {
          names.push(name);
        }
      }
      function add_args(args) {
        if (args === undefined) return;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = args[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var val = _step2.value;

            if (val.intrinsicName) {
              add_instrinsic(val.intrinsicName);
            } else if (val instanceof AbstractValue) {
              val.addSourceNamesTo(names);
            } else if (val instanceof _index.StringValue) {
              if (val.value.startsWith("__")) {
                names.push(val.value.slice(2));
              }
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
      if (this.intrinsicName) {
        add_instrinsic(this.intrinsicName);
      }
      add_args(this.args);
    }
  }, {
    key: "mightBeNumber",
    value: function mightBeNumber() {
      var valueType = this.getType();
      if (valueType === _index.NumberValue) return true;
      if (valueType !== _index.Value) return false;
      if (this.values.isTop()) return true;
      return this.values.includesValueOfType(_index.NumberValue);
    }
  }, {
    key: "mightNotBeNumber",
    value: function mightNotBeNumber() {
      var valueType = this.getType();
      if (valueType === _index.NumberValue) return false;
      if (valueType !== _index.Value) return true;
      if (this.values.isTop()) return true;
      return this.values.includesValueNotOfType(_index.NumberValue);
    }
  }, {
    key: "mightNotBeObject",
    value: function mightNotBeObject() {
      var valueType = this.getType();
      if (_index.Value.isTypeCompatibleWith(valueType, _index.PrimitiveValue)) return true;
      if (_index.Value.isTypeCompatibleWith(valueType, _index.ObjectValue)) return false;
      if (this.values.isTop()) return true;
      return this.values.includesValueNotOfType(_index.ObjectValue);
    }
  }, {
    key: "mightBeObject",
    value: function mightBeObject() {
      var valueType = this.getType();
      if (_index.Value.isTypeCompatibleWith(valueType, _index.PrimitiveValue)) return false;
      if (_index.Value.isTypeCompatibleWith(valueType, _index.ObjectValue)) return true;
      if (this.values.isTop()) return true;
      return this.values.includesValueOfType(_index.ObjectValue);
    }
  }, {
    key: "mightNotBeString",
    value: function mightNotBeString() {
      var valueType = this.getType();
      if (valueType === _index.StringValue) return false;
      if (valueType !== _index.Value) return true;
      if (this.values.isTop()) return true;
      return this.values.includesValueNotOfType(_index.StringValue);
    }
  }, {
    key: "mightBeUndefined",
    value: function mightBeUndefined() {
      var valueType = this.getType();
      if (valueType === _index.UndefinedValue) return true;
      if (valueType !== _index.Value) return false;
      if (this.values.isTop()) return true;
      return this.values.includesValueOfType(_index.UndefinedValue);
    }
  }, {
    key: "mightHaveBeenDeleted",
    value: function mightHaveBeenDeleted() {
      return this.mightBeEmpty;
    }
  }, {
    key: "promoteEmptyToUndefined",
    value: function promoteEmptyToUndefined() {
      if (this.values.isTop()) return this;
      if (!this.mightBeEmpty) return this;
      var result = this.clone();
      result.mightBeEmpty = false;
      result.values = result.values.promoteEmptyToUndefined();
      var cond = this.$Realm.createAbstract(new _index2.TypesDomain(_index.BooleanValue), _index2.ValuesDomain.topVal, [this, this.$Realm.intrinsics.empty], function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            x = _ref2[0],
            y = _ref2[1];

        return t.binaryExpression("===", x, y);
      });
      result.args = [cond, this.$Realm.intrinsics.undefined, this];
      result._buildNode = function (args) {
        return t.conditionalExpression(args[0], args[1], args[2]);
      };
      return result;
    }
  }, {
    key: "throwIfNotConcrete",
    value: function throwIfNotConcrete() {
      throw AbstractValue.createIntrospectionErrorThrowCompletion(this);
    }
  }, {
    key: "throwIfNotConcreteNumber",
    value: function throwIfNotConcreteNumber() {
      throw AbstractValue.createIntrospectionErrorThrowCompletion(this);
    }
  }, {
    key: "throwIfNotConcreteObject",
    value: function throwIfNotConcreteObject() {
      throw AbstractValue.createIntrospectionErrorThrowCompletion(this);
    }
  }, {
    key: "throwIfNotObject",
    value: function throwIfNotObject() {
      (0, _invariant2.default)(!(this instanceof _index.AbstractObjectValue));
      throw AbstractValue.createIntrospectionErrorThrowCompletion(this);
    }
  }], [{
    key: "createIntrospectionErrorThrowCompletion",
    value: function createIntrospectionErrorThrowCompletion(val, propertyName) {
      var realm = val.$Realm;

      var identity = void 0;
      if (val === realm.$GlobalObject) identity = "global";else if (val instanceof AbstractValue) {
        var names = [];
        val.addSourceNamesTo(names);
        if (names.length === 0) {
          val.addSourceNamesTo(names);
        }
        identity = "abstract value" + (names.length > 1 ? 's' : '') + " " + names.join(" and ");
      } else identity = val.intrinsicName || "(some value)";

      var source_locations = [];
      if (val instanceof AbstractValue) val.addSourceLocationsTo(source_locations);

      var location = void 0;
      if (propertyName instanceof _index.SymbolValue) location = "at symbol [" + (propertyName.$Description || "(no description)") + "]";else if (propertyName instanceof _index.StringValue) location = "at " + propertyName.value;else if (typeof propertyName === "string") location = "at " + propertyName;else location = source_locations.length === 0 ? "" : "at " + source_locations.join("\n");

      var message = "This operation is not yet supported on " + identity + " " + location;

      return realm.createIntrospectionErrorThrowCompletion(message);
    }
  }]);

  return AbstractValue;
}(_index.Value);

exports.default = AbstractValue;
//# sourceMappingURL=AbstractValue.js.map