{"version":3,"sources":["../src/prepack-standalone.js"],"names":["InitializationError","prepack","prepackFromAst","t","self","Error","Object","setPrototypeOf","prototype","code","options","filename","realm","serializer","serialized","init","sourceMaps","ast","type","file"],"mappings":";;;;;QAsBgBA,mB,GAAAA,mB;QASAC,O,GAAAA,O;QAYAC,c,GAAAA,c;;AAjChB;;;;AACA;;;;AACA;;;;AACA;;IAAYC,C;;AACZ;;;;;;AAMA;AACA;AArBA;;;;;;;;;AAsBO,SAASH,mBAAT,GAA+B;AACpC,MAAII,OAAO,IAAIC,KAAJ,CAAU,yDAAV,CAAX;AACAC,SAAOC,cAAP,CAAsBH,IAAtB,EAA4BJ,oBAAoBQ,SAAhD;AACA,SAAOJ,IAAP;AACD;AACDE,OAAOC,cAAP,CAAsBP,mBAAtB,EAA2CK,KAA3C;AACAC,OAAOC,cAAP,CAAsBP,oBAAoBQ,SAA1C,EAAqDH,MAAMG,SAA3D;;AAGO,SAASP,OAAT,CAAiBQ,IAAjB,EAAkE;AAAA,MAAnCC,OAAmC;;AACvE,MAAIC,WAAWD,QAAQC,QAAR,IAAoB,SAAnC;AACA,MAAIC,QAAQ,+BAAgB,8BAAgBF,OAAhB,CAAhB,CAAZ;AACA,yBAAkBE,KAAlB;AACA,MAAIC,aAAa,oBAAeD,KAAf,EAAsB,mCAAqBF,OAArB,CAAtB,CAAjB;AACA,MAAII,aAAaD,WAAWE,IAAX,CAAgBJ,QAAhB,EAA0BF,IAA1B,EAAgC,EAAhC,EAAoCC,QAAQM,UAA5C,CAAjB;AACA,MAAI,CAACF,UAAL,EAAiB;AACf,UAAM,IAAId,mBAAJ,EAAN;AACD;AACD,SAAOc,UAAP;AACD;;AAEM,SAASZ,cAAT,CAAwBe,GAAxB,EAA+DR,IAA/D,EAAgH;AAAA,MAAnCC,OAAmC;;AACrH,MAAIO,OAAOA,IAAIC,IAAJ,KAAa,SAAxB,EAAmC;AACjCD,UAAMd,EAAEgB,IAAF,CAAOF,GAAP,EAAY,EAAZ,EAAgB,EAAhB,CAAN;AACD,GAFD,MAEO,IAAI,CAACA,GAAD,IAAQA,IAAIC,IAAJ,KAAa,MAAzB,EAAiC;AACtC,UAAM,IAAIb,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAED;AACA;;AAEA,MAAIO,QAAQ,+BAAgB,8BAAgBF,OAAhB,CAAhB,CAAZ;AACA,yBAAkBE,KAAlB;AACA,MAAIC,aAAa,oBAAeD,KAAf,EAAsB,mCAAqBF,OAArB,CAAtB,CAAjB;AACA,MAAII,aAAaD,WAAWE,IAAX,CAAgB,EAAhB,EAAoBN,IAApB,EAA0B,EAA1B,EAA8BC,QAAQM,UAAtC,CAAjB;AACA,MAAI,CAACF,UAAL,EAAiB;AACf,UAAM,IAAId,mBAAJ,EAAN;AACD;AACD,SAAOc,UAAP;AACD","file":"prepack-standalone.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\nimport Serializer from \"./serializer/index.js\";\nimport construct_realm from \"./construct_realm.js\";\nimport initializeGlobals from \"./globals.js\";\nimport * as t from \"babel-types\";\nimport { getRealmOptions, getSerializerOptions } from \"./options\";\n\nimport type { Options } from \"./options\";\nimport { defaultOptions } from \"./options\";\nimport type { BabelNodeFile, BabelNodeProgram } from \"babel-types\";\n\n// This should just be a class but Babel classes doesn't work with\n// built-in super classes.\nexport function InitializationError() {\n  let self = new Error(\"An error occurred while prepacking. See the error logs.\");\n  Object.setPrototypeOf(self, InitializationError.prototype);\n  return self;\n}\nObject.setPrototypeOf(InitializationError, Error);\nObject.setPrototypeOf(InitializationError.prototype, Error.prototype);\n\n\nexport function prepack(code: string, options: Options = defaultOptions) {\n  let filename = options.filename || 'unknown';\n  let realm = construct_realm(getRealmOptions(options));\n  initializeGlobals(realm);\n  let serializer = new Serializer(realm, getSerializerOptions(options));\n  let serialized = serializer.init(filename, code, \"\", options.sourceMaps);\n  if (!serialized) {\n    throw new InitializationError();\n  }\n  return serialized;\n}\n\nexport function prepackFromAst(ast: BabelNodeFile | BabelNodeProgram, code: string, options: Options = defaultOptions) {\n  if (ast && ast.type === \"Program\") {\n    ast = t.file(ast, [], []);\n  } else if (!ast || ast.type !== \"File\") {\n    throw new Error(\"Not a valid ast?\");\n  }\n\n  // TODO: Expose an option to wire an already parsed ast all the way through\n  // to the execution environment. For now, we just reparse.\n\n  let realm = construct_realm(getRealmOptions(options));\n  initializeGlobals(realm);\n  let serializer = new Serializer(realm, getSerializerOptions(options));\n  let serialized = serializer.init(\"\", code, \"\", options.sourceMaps);\n  if (!serialized) {\n    throw new InitializationError();\n  }\n  return serialized;\n}\n"]}