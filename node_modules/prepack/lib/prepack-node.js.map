{"version":3,"sources":["../src/prepack-node.js"],"names":["prepackFile","prepackFileSync","filename","options","callback","sourceMapFilename","inputSourceMapFilename","readFile","fileErr","code","mapErr","sourceMap","console","warn","serialized","realm","serializer","init","sourceMaps","err","readFileSync","_e"],"mappings":";;;;;;AAeA;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;QAEgBA,W,GAAAA,W;QAsCAC,e,GAAAA,e;;AAlDhB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAdA;;;;;;;;;AAsBO,SAASD,WAAT,CAAqBE,QAArB,EAA8F;AAAA,MAAvDC,OAAuD;AAAA,MAApBC,QAAoB;;AACnG,MAAIC,oBAAoBF,QAAQG,sBAAR,IAAmCJ,WAAW,MAAtE;AACA,eAAGK,QAAH,CAAYL,QAAZ,EAAsB,MAAtB,EAA8B,UAASM,OAAT,EAAkBC,IAAlB,EAAwB;AACpD,QAAID,OAAJ,EAAa;AACXJ,eAASI,OAAT;AACA;AACD;AACD,iBAAGD,QAAH,CAAYF,iBAAZ,EAA+B,MAA/B,EAAuC,UAASK,MAAT,EAAiBC,SAAjB,EAA4B;AACjE,UAAID,MAAJ,EAAY;AACVE,gBAAQC,IAAR,4BAAsCR,iBAAtC;AACAM,oBAAY,EAAZ;AACD;AACD,UAAIG,mBAAJ;AACA,UAAI;AACF,YAAIC,QAAQ,+BAAgB,8BAAgBZ,OAAhB,CAAhB,CAAZ;AACA,+BAAkBY,KAAlB;AACA,YAAIC,aAAa,oBACfD,KADe,EAEf,mCAAqBZ,OAArB,CAFe,CAAjB;AAIAW,qBAAaE,WAAWC,IAAX,CACXd,QAAQD,QAAR,IAAoBA,QADT,EAEXO,IAFW,EAGXE,SAHW,EAIXR,QAAQe,UAJG,CAAb;AAMA,YAAI,CAACJ,UAAL,EAAiB;AACf,gBAAM,4CAAN;AACD;AACF,OAhBD,CAgBE,OAAOK,GAAP,EAAY;AACZf,iBAASe,GAAT;AACA;AACD;AACDf,eAAS,IAAT,EAAeU,UAAf;AACD,KA3BD;AA4BD,GAjCD;AAkCD;;AAEM,SAASb,eAAT,CAAyBC,QAAzB,EAA8E;AAAA,MAAnCC,OAAmC;;AACnF,MAAIM,OAAO,aAAGW,YAAH,CAAgBlB,QAAhB,EAA0B,MAA1B,CAAX;AACA,MAAIS,YAAY,EAAhB;AACA,MAAIN,oBAAoBF,QAAQG,sBAAR,IAAmCJ,WAAW,MAAtE;AACA,MAAI;AACFS,gBAAY,aAAGS,YAAH,CAAgBf,iBAAhB,EAAmC,MAAnC,CAAZ;AACD,GAFD,CAEE,OAAOgB,EAAP,EAAW;AACXT,YAAQC,IAAR,4BAAsCR,iBAAtC;AACD;AACD,MAAIU,QAAQ,+BAAgB,8BAAgBZ,OAAhB,CAAhB,CAAZ;AACA,yBAAkBY,KAAlB;AACA,MAAIC,aAAa,oBACfD,KADe,EAEf,mCAAqBZ,OAArB,CAFe,CAAjB;AAIA,MAAIW,aAAaE,WAAWC,IAAX,CACfd,QAAQD,QAAR,IAAoBA,QADL,EAEfO,IAFe,EAGfE,SAHe,EAIfR,QAAQe,UAJO,CAAjB;AAMA,MAAI,CAACJ,UAAL,EAAiB;AACf,UAAM,4CAAN;AACD;AACD,SAAOA,UAAP;AACD","file":"prepack-node.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\nimport Serializer from \"./serializer/index.js\";\nimport construct_realm from \"./construct_realm.js\";\nimport initializeGlobals from \"./globals.js\";\nimport fs from \"fs\";\nimport { getRealmOptions, getSerializerOptions } from \"./options\";\nimport { InitializationError } from \"./prepack-standalone\";\n\nimport type { Options } from \"./options\";\nimport { defaultOptions } from \"./options\";\n\nexport * from \"./prepack-standalone\";\n\nexport function prepackFile(filename: string, options: Options = defaultOptions, callback: Function) {\n  let sourceMapFilename = options.inputSourceMapFilename || (filename + \".map\");\n  fs.readFile(filename, \"utf8\", function(fileErr, code) {\n    if (fileErr) {\n      callback(fileErr);\n      return;\n    }\n    fs.readFile(sourceMapFilename, \"utf8\", function(mapErr, sourceMap) {\n      if (mapErr) {\n        console.warn(`No sourcemap found at ${sourceMapFilename}.`);\n        sourceMap = \"\";\n      }\n      let serialized;\n      try {\n        let realm = construct_realm(getRealmOptions(options));\n        initializeGlobals(realm);\n        let serializer = new Serializer(\n          realm,\n          getSerializerOptions(options),\n        );\n        serialized = serializer.init(\n          options.filename || filename,\n          code,\n          sourceMap,\n          options.sourceMaps\n        );\n        if (!serialized) {\n          throw new InitializationError();\n        }\n      } catch (err) {\n        callback(err);\n        return;\n      }\n      callback(null, serialized);\n    });\n  });\n}\n\nexport function prepackFileSync(filename: string, options: Options = defaultOptions) {\n  let code = fs.readFileSync(filename, \"utf8\");\n  let sourceMap = \"\";\n  let sourceMapFilename = options.inputSourceMapFilename || (filename + \".map\");\n  try {\n    sourceMap = fs.readFileSync(sourceMapFilename, \"utf8\");\n  } catch (_e) {\n    console.warn(`No sourcemap found at ${sourceMapFilename}.`);\n  }\n  let realm = construct_realm(getRealmOptions(options));\n  initializeGlobals(realm);\n  let serializer = new Serializer(\n    realm,\n    getSerializerOptions(options),\n  );\n  let serialized = serializer.init(\n    options.filename || filename,\n    code,\n    sourceMap,\n    options.sourceMaps\n  );\n  if (!serialized) {\n    throw new InitializationError();\n  }\n  return serialized;\n}\n"]}