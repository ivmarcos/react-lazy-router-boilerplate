import { NO_OP } from 'inferno-shared';
import { LifecycleClass as _LifecycleClass } from 'inferno-shared';
import _VNodeFlags from 'inferno-vnode-flags';
import { getFlagsForElementVnode, normalize as internal_normalize } from './core/normalization';
import { options, Root as _Root } from './core/options';
import { cloneVNode, createVNode, InfernoChildren, InfernoInput, Props, VNode } from './core/VNodes';
import { isUnitlessNumber as internal_isUnitlessNumber } from './DOM/constants';
import { linkEvent } from './DOM/events/linkEvent';
import { patch as internal_patch } from './DOM/patching';
import { componentToDOMNodeMap as internal_DOMNodeMap, createRenderer, findDOMNode, render } from './DOM/rendering';
import { EMPTY_OBJ } from './DOM/utils';
export declare const VNodeFlags: _VNodeFlags;
export declare const Root: _Root;
export declare const LifecycleClass: _LifecycleClass;
declare const version = "3.1.2";
declare var _default: {
    getFlagsForElementVnode: (type: string) => number;
    linkEvent: (data: any, event: any) => {
        data: any;
        event: any;
    };
    createVNode: (flags: _VNodeFlags, type: string | Function | null, className?: string | null | undefined, children?: InfernoChildren, props?: Props | null | undefined, key?: any, ref?: ((node?: Element | null | undefined) => void | null) | undefined, noNormalise?: boolean | undefined) => any;
    cloneVNode: (vNodeToClone: VNode, props?: Props | undefined, ..._children: InfernoChildren[]) => VNode;
    NO_OP: string;
    EMPTY_OBJ: {};
    render: (input: InfernoInput, parentDom: Element | Node | HTMLElement | DocumentFragment | SVGAElement | null) => InfernoChildren;
    findDOMNode: (ref: any) => any;
    createRenderer: (parentDom?: any) => (lastInput: any, nextInput: any) => void;
    options: {
        afterMount: Function | null;
        afterRender: Function | null;
        afterUpdate: Function | null;
        beforeRender: Function | null;
        beforeUnmount: Function | null;
        createVNode: Function | null;
        findDOMNodeEnabled: boolean;
        recyclingEnabled: boolean;
        roots: _Root[];
    };
    version: string;
    internal_patch: (lastVNode: VNode, nextVNode: VNode, parentDom: Element, lifecycle: _LifecycleClass, context: Object, isSVG: boolean, isRecycling: boolean) => void;
    internal_DOMNodeMap: Map<any, any>;
    internal_isUnitlessNumber: Set<string>;
    internal_normalize: (vNode: VNode) => void;
};
export default _default;
export { Props, VNode, InfernoChildren, InfernoInput, getFlagsForElementVnode, linkEvent, createVNode, cloneVNode, NO_OP, EMPTY_OBJ, render, findDOMNode, createRenderer, options, version, internal_patch, internal_DOMNodeMap, internal_isUnitlessNumber, internal_normalize };
