import { cloneVNode, createVNode, EMPTY_OBJ, findDOMNode, InfernoChildren, Props, render, VNode } from 'inferno';
import Component from 'inferno-component';
import createClass, { ClassicComponentClass, ComponentSpec } from 'inferno-create-class';
import { NO_OP } from 'inferno-shared';
import _VNodeFlags from 'inferno-vnode-flags';
import isValidElement from './isValidElement';
import PropTypes from './PropTypes';
declare global  {
    interface Event {
        persist: Function;
    }
}
declare function unmountComponentAtNode(container: Element | SVGAElement | DocumentFragment): boolean;
export declare type IterateChildrenFn = (value: InfernoChildren | any, index: number, array: Array<InfernoChildren | any>) => any;
declare const Children: {
    map(children: any[], fn: IterateChildrenFn, ctx: any): any[];
    forEach(children: any[], fn: IterateChildrenFn, ctx: any): void;
    count(children: any[]): number;
    only(children: any[]): any;
    toArray(children: any[]): any[];
};
declare const version = "15.4.2";
declare const createElement: (name: any, _props: any, ...children: any[]) => any;
declare const cloneElement: (name: any, _props: any, ...children: any[]) => any;
declare function PureComponent(props: any, context: any): void;
declare function unstable_renderSubtreeIntoContainer(parentComponent: any, vNode: any, container: any, callback: any): InfernoChildren;
declare function createFactory(type: any): any;
declare const DOM: {};
export { ClassicComponentClass, ComponentSpec, createVNode, render, isValidElement, createElement, Component, PureComponent, unmountComponentAtNode, cloneElement, PropTypes, createClass, findDOMNode, Children, cloneVNode, NO_OP, version, unstable_renderSubtreeIntoContainer, createFactory, DOM, EMPTY_OBJ };
declare var _default: {
    createVNode: (flags: _VNodeFlags, type: string | Function | null, className?: string | null | undefined, children?: InfernoChildren, props?: Props | null | undefined, key?: any, ref?: ((node?: Element | null | undefined) => void | null) | undefined, noNormalise?: boolean | undefined) => any;
    render: (input: string | number | VNode | null, parentDom: Element | Node | HTMLElement | DocumentFragment | SVGAElement | null) => InfernoChildren;
    isValidElement: (obj: VNode) => boolean;
    createElement: (name: any, _props: any, ...children: any[]) => any;
    Component: typeof Component;
    PureComponent: (props: any, context: any) => void;
    unmountComponentAtNode: (container: Element | DocumentFragment | SVGAElement) => boolean;
    cloneElement: (name: any, _props: any, ...children: any[]) => any;
    PropTypes: {
        any: () => () => void;
        array: () => void;
        arrayOf: () => () => void;
        bool: () => void;
        element: () => () => void;
        func: () => void;
        instanceOf: () => () => void;
        node: () => () => void;
        number: () => void;
        object: () => void;
        objectOf: () => () => void;
        oneOf: () => () => void;
        oneOfType: () => () => void;
        shape: () => () => void;
        string: () => void;
        symbol: () => void;
    };
    createClass: <P, S>(obj: ComponentSpec<P, S>) => ClassicComponentClass<P, S>;
    findDOMNode: (ref: any) => any;
    Children: {
        map(children: any[], fn: IterateChildrenFn, ctx: any): any[];
        forEach(children: any[], fn: IterateChildrenFn, ctx: any): void;
        count(children: any[]): number;
        only(children: any[]): any;
        toArray(children: any[]): any[];
    };
    cloneVNode: (vNodeToClone: VNode, props?: Props | undefined, ..._children: InfernoChildren[]) => VNode;
    NO_OP: string;
    version: string;
    unstable_renderSubtreeIntoContainer: (parentComponent: any, vNode: any, container: any, callback: any) => InfernoChildren;
    createFactory: (type: any) => any;
    DOM: {};
    EMPTY_OBJ: {};
};
export default _default;
export declare const VNodeFlags: _VNodeFlags;
